<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>十分钟搞定支付宝H5支付(ThinkPHP5.1)</title>
      <link href="2021/03/09/Ali-H5-Pay-for-PHP/"/>
      <url>2021/03/09/Ali-H5-Pay-for-PHP/</url>
      
        <content type="html"><![CDATA[<h1 id="十分钟搞定支付宝H5支付-ThinkPHP5-1"><a href="#十分钟搞定支付宝H5支付-ThinkPHP5-1" class="headerlink" title="十分钟搞定支付宝H5支付(ThinkPHP5.1)"></a>十分钟搞定支付宝H5支付(ThinkPHP5.1)</h1><p>记录下接入支付宝H5支付的过程</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>开通手机网站支付的支付宝账号</li><li>入驻支付宝开放平台新建<strong>网页&amp;移动应用</strong>并签约</li></ol>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付 </tag>
            
            <tag> 支付宝支付 </tag>
            
            <tag> 支付宝H5支付 </tag>
            
            <tag> ThinkPHP </tag>
            
            <tag> 大熊BIGBEAR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十分钟搞定微信H5支付(ThinkPHP5.1)</title>
      <link href="2021/03/04/Wechat-H5-Pay-for-PHP/"/>
      <url>2021/03/04/Wechat-H5-Pay-for-PHP/</url>
      
        <content type="html"><![CDATA[<h1 id="十分钟搞定微信H5支付-ThinkPHP5-1"><a href="#十分钟搞定微信H5支付-ThinkPHP5-1" class="headerlink" title="十分钟搞定微信H5支付(ThinkPHP5.1)"></a>十分钟搞定微信H5支付(ThinkPHP5.1)</h1><p>之前接过的支付都是jssdk支付, 也就是在微信浏览器环境下的支付, 这次有个项目需要对接微信H5支付, 这里记录下</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>首先微信公众号要开通微信支付功能, 并绑定商户号</li><li>开通微信H5支付服务, 审核大概需要1天左右</li></ol><h2 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h2><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><p>在<code>config</code>目录下, 新建<code>wechat.php</code>文件, 写入如下配置</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 微信配置参数 */</span><span class="token keyword">return</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'auth'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'appid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'appsecret'</span><span class="token operator">=&gt;</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'pay'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token comment">// 微信支付用这里的参数</span>        <span class="token string single-quoted-string">'appid'</span><span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'APPID'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'mch_id'</span><span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'MCH_ID'</span><span class="token punctuation">,</span> <span class="token comment">// 商户号</span>        <span class="token string single-quoted-string">'notify_url'</span><span class="token operator">=&gt;</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token comment">// 支付结果通知地址, 填写你接收通知的url</span>        <span class="token string single-quoted-string">'key'</span><span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'E918BB87E7BF1B73359AA378550A2598'</span><span class="token punctuation">,</span> <span class="token comment">// 这个key是在商户平台配置的好像, 随便生成一个md5就可以</span>    <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="支付类WechatAppPay-php"><a href="#支付类WechatAppPay-php" class="headerlink" title="支付类WechatAppPay.php"></a>支付类<code>WechatAppPay.php</code></h4><p>提供订单相关的功能, 例如统一下单(主要), 查询订单信息, 关闭订单等, 这里只贴出了支付需要用到的部分</p><p>我将这个库文件, 放在了<code>application/extra</code>目录下面, tp5.1 <code>extra</code>目录需要自己创建一下就好了,<br>如果想放在其他地方, 将代码中的<code>namespace</code>改一下再用.</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>extra</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">WechatAppPay</span><span class="token punctuation">{</span>    <span class="token comment">//接口API URL前缀</span>    <span class="token keyword">const</span> <span class="token constant">API_URL_PREFIX</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'https://api.mch.weixin.qq.com'</span><span class="token punctuation">;</span>    <span class="token comment">//下单地址URL</span>    <span class="token keyword">const</span> <span class="token constant">UNIFIEDORDER_URL</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/pay/unifiedorder"</span><span class="token punctuation">;</span>    <span class="token comment">//查询订单URL</span>    <span class="token keyword">const</span> <span class="token constant">ORDERQUERY_URL</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/pay/orderquery"</span><span class="token punctuation">;</span>    <span class="token comment">//关闭订单URL</span>    <span class="token keyword">const</span> <span class="token constant">CLOSEORDER_URL</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/pay/closeorder"</span><span class="token punctuation">;</span>    <span class="token comment">//公众账号ID</span>    <span class="token keyword">private</span> <span class="token variable">$appid</span><span class="token punctuation">;</span>    <span class="token comment">//商户号</span>    <span class="token keyword">private</span> <span class="token variable">$mch_id</span><span class="token punctuation">;</span>    <span class="token comment">//随机字符串</span>    <span class="token keyword">private</span> <span class="token variable">$nonce_str</span><span class="token punctuation">;</span>    <span class="token comment">//签名</span>    <span class="token keyword">private</span> <span class="token variable">$sign</span><span class="token punctuation">;</span>    <span class="token comment">//商品描述</span>    <span class="token keyword">private</span> <span class="token variable">$body</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$scene_info</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$attach</span><span class="token punctuation">;</span>    <span class="token comment">//商户订单号</span>    <span class="token keyword">private</span> <span class="token variable">$out_trade_no</span><span class="token punctuation">;</span>    <span class="token comment">//支付总金额</span>    <span class="token keyword">private</span> <span class="token variable">$total_fee</span><span class="token punctuation">;</span>    <span class="token comment">//终端IP</span>    <span class="token keyword">private</span> <span class="token variable">$spbill_create_ip</span><span class="token punctuation">;</span>    <span class="token comment">//支付结果回调通知地址</span>    <span class="token keyword">private</span> <span class="token variable">$notify_url</span><span class="token punctuation">;</span>    <span class="token comment">//交易类型</span>    <span class="token keyword">private</span> <span class="token variable">$trade_type</span><span class="token punctuation">;</span>    <span class="token comment">//支付密钥</span>    <span class="token keyword">private</span> <span class="token variable">$key</span><span class="token punctuation">;</span>    <span class="token comment">//证书路径</span>    <span class="token keyword">private</span> <span class="token variable">$SSLCERT_PATH</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$SSLKEY_PATH</span><span class="token punctuation">;</span>    <span class="token comment">//所有参数</span>    <span class="token keyword">private</span> <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$appid</span><span class="token punctuation">,</span> <span class="token variable">$mch_id</span><span class="token punctuation">,</span> <span class="token variable">$notify_url</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">appid</span> <span class="token operator">=</span> <span class="token variable">$appid</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">mch_id</span> <span class="token operator">=</span> <span class="token variable">$mch_id</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">notify_url</span> <span class="token operator">=</span> <span class="token variable">$notify_url</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">key</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 下单方法     * @param   $params 下单参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">unifiedOrder</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">body</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'body'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">out_trade_no</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">total_fee</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'total_fee'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">trade_type</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'trade_type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">scene_info</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scene_info'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attach</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'attach'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">nonce_str</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">genRandomString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">spbill_create_ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'appid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">appid</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'mch_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">mch_id</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nonce_str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">nonce_str</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'body'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">body</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">out_trade_no</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'total_fee'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">total_fee</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'spbill_create_ip'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">spbill_create_ip</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'notify_url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">notify_url</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'trade_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">trade_type</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scene_info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">scene_info</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'attach'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">attach</span><span class="token punctuation">;</span>        <span class="token comment">//获取签名数据</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sign</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">MakeSign</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sign'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">sign</span><span class="token punctuation">;</span>        <span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">data_to_xml</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">postXmlCurl</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">,</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">API_URL_PREFIX</span><span class="token operator">.</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">UNIFIEDORDER_URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token variable">$response</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">xml_to_data</span><span class="token punctuation">(</span> <span class="token variable">$response</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'result_code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'err_code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'err_msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">error_code</span><span class="token punctuation">(</span> <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'err_code'</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     *     * 获取支付结果通知数据     * return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getNotifyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//获取通知的数据</span><span class="token comment">//        $xml = $GLOBALS['HTTP_RAW_POST_DATA'];</span>        <span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//echo 123;die;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">c_log</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xml为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">xml_to_data</span><span class="token punctuation">(</span> <span class="token variable">$xml</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'return_code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'return_code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'FAIL'</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 接收通知成功后应答输出XML数据     * @param string $xml     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">replyNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'return_code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'SUCCESS'</span><span class="token punctuation">;</span>        <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'return_msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'OK'</span><span class="token punctuation">;</span>        <span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">data_to_xml</span><span class="token punctuation">(</span> <span class="token variable">$data</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$xml</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 生成签名     *  @return 签名     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">MakeSign</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//签名步骤一：按字典序排序数组参数</span>        <span class="token function">ksort</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">ToUrlParams</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//签名步骤二：在string后加入KEY</span>        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token variable">$string</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"&amp;key="</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">key</span><span class="token punctuation">;</span>        <span class="token comment">//签名步骤三：MD5加密</span>        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//签名步骤四：所有字符转为大写</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将参数拼接为url: key=value&amp;key=value     * @param   $params     * @return  string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">ToUrlParams</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token operator">.</span><span class="token string single-quoted-string">'='</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&amp;"</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$string</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 输出xml字符     * @param   $params     参数名称     * return   string      返回组装的xml     **/</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">data_to_xml</span><span class="token punctuation">(</span> <span class="token variable">$params</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token operator">||</span> <span class="token class-name">count</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;xml&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$params</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=&gt;</span><span class="token variable">$val</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$xml</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;"</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token operator">.</span><span class="token string double-quoted-string">"&gt;"</span><span class="token operator">.</span><span class="token variable">$val</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/"</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token operator">.</span><span class="token string double-quoted-string">"&gt;"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$xml</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;"</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token operator">.</span><span class="token string double-quoted-string">"&gt;&lt;![CDATA["</span><span class="token operator">.</span><span class="token variable">$val</span><span class="token operator">.</span><span class="token string double-quoted-string">"]]&gt;&lt;/"</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token operator">.</span><span class="token string double-quoted-string">"&gt;"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$xml</span><span class="token operator">.=</span><span class="token string double-quoted-string">"&lt;/xml&gt;"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$xml</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将xml转为array     * @param string $xml     * return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">xml_to_data</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//将XML转为array</span>        <span class="token comment">//禁止引用外部xml实体</span>        <span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'SimpleXMLElement'</span><span class="token punctuation">,</span> <span class="token constant">LIBXML_NOCDATA</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取毫秒级别的时间戳     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getMillisecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//获取毫秒的时间戳</span>        <span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">explode </span><span class="token punctuation">(</span> <span class="token string double-quoted-string">" "</span><span class="token punctuation">,</span> <span class="token function">microtime </span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$time</span> <span class="token operator">=</span> <span class="token variable">$time</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token variable">$time</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$time2</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span> <span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token variable">$time</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$time</span> <span class="token operator">=</span> <span class="token variable">$time2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$time</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 产生一个指定长度的随机字符串,并返回给用户     * @param type $len 产生字符串的长度     * @return string 随机字符串     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">genRandomString</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string double-quoted-string">"a"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"b"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"c"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"d"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"f"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"g"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"h"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"i"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"j"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"k"</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"l"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"m"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"n"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"o"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"p"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"q"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"r"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"t"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"u"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"v"</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"w"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"x"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"y"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"z"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"A"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"B"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"C"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"D"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"E"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"F"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"G"</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"H"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"I"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"J"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"K"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"L"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"M"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"N"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"O"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"P"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Q"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"R"</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"S"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"T"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"U"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"V"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"W"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"X"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Y"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"Z"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"0"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"2"</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"3"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"4"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"5"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"6"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"7"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"8"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"9"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$charsLen</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 将数组打乱</span>        <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$output</span> <span class="token operator">.=</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$charsLen</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 以post方式提交xml到对应的接口url     *     * @param string $xml  需要post的xml数据     * @param string $url  url     * @param bool $useCert 是否需要证书，默认不需要     * @param int $second   url执行超时时间，默认30s     * @throws WxPayException     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">postXmlCurl</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token variable">$useCert</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$second</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置超时</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_TIMEOUT</span><span class="token punctuation">,</span> <span class="token variable">$second</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_SSL_VERIFYPEER</span><span class="token punctuation">,</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_SSL_VERIFYHOST</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置header</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//要求结果为字符串且输出到屏幕上</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$useCert</span> <span class="token operator">==</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//设置证书</span>            <span class="token comment">//使用证书：cert 与 key 分别属于两个.pem文件</span>            <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_SSLCERTTYPE</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'PEM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//curl_setopt($ch,CURLOPT_SSLCERT, WxPayConfig::SSLCERT_PATH);</span>            <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_SSLKEYTYPE</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'PEM'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//curl_setopt($ch,CURLOPT_SSLKEY, WxPayConfig::SSLKEY_PATH);</span>        <span class="token punctuation">}</span>        <span class="token comment">//post提交方式</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_POST</span><span class="token punctuation">,</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_POSTFIELDS</span><span class="token punctuation">,</span> <span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//运行curl</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token function">curl_errno</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 错误代码     * @param  $code       服务器输出的错误代码     * return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">error_code</span><span class="token punctuation">(</span> <span class="token variable">$code</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$errList</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string single-quoted-string">'NOAUTH'</span>                <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'商户未开通此接口权限'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'NOTENOUGH'</span>             <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'用户帐号余额不足'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'ORDERNOTEXIST'</span>         <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'订单号不存在'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'ORDERPAID'</span>             <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'商户订单已支付，无需重复操作'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'ORDERCLOSED'</span>           <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'当前订单已关闭，无法支付'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'SYSTEMERROR'</span>           <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'系统错误!系统超时'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'APPID_NOT_EXIST'</span>       <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'参数中缺少APPID'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'MCHID_NOT_EXIST'</span>       <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'参数中缺少MCHID'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'APPID_MCHID_NOT_MATCH'</span> <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'appid和mch_id不匹配'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'LACK_PARAMS'</span>           <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'缺少必要的请求参数'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'OUT_TRADE_NO_USED'</span>     <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'同一笔交易不能多次提交'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'SIGNERROR'</span>             <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'参数签名结果不正确'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'XML_FORMAT_ERROR'</span>      <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'XML格式错误'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'REQUIRE_POST_METHOD'</span>   <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'未使用post传递参数 '</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'POST_DATA_EMPTY'</span>       <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'post数据不能为空'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'NOT_UTF8'</span>              <span class="token operator">=&gt;</span>  <span class="token string single-quoted-string">'未使用指定编码格式'</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">array_key_exists</span><span class="token punctuation">(</span> <span class="token variable">$code</span> <span class="token punctuation">,</span> <span class="token variable">$errList</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$errList</span><span class="token punctuation">[</span><span class="token variable">$code</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="控制器部分"><a href="#控制器部分" class="headerlink" title="控制器部分"></a>控制器部分</h4><h5 id="下单接口"><a href="#下单接口" class="headerlink" title="下单接口"></a>下单接口</h5><p>我们控制器需要提供接口给前端, 然后将微信的统一下单接口返回的参数返回给前端</p><p>首先在控制器顶部引入支付类<code>WechatAppPay.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">app<span class="token punctuation">\</span>extra<span class="token punctuation">\</span>WechatAppPay</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后新建一个接口函数供前端调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/** * 支付 * @param Request $request * @return string */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">wechat_pay</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$body</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 附加的业务参数, 会在异步通知中原样收到</span>    <span class="token variable">$order_no</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span> <span class="token comment">// 自定义订单号, 根据时间戳或者其他生成一个, 需保证唯一性</span>    <span class="token comment">// 初始化</span>    <span class="token variable">$lib_wx_pay</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WechatAppPay</span><span class="token punctuation">(</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wechat.pay.appid'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wechat.pay.mch_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wechat.pay.notify_url'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wechat.pay.key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'body'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span> <span class="token comment">// 商品描述</span>    <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$order_no</span><span class="token punctuation">;</span>   <span class="token comment">//自定义的订单号，不能重复</span>    <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'total_fee'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//订单金额 只能为整数 单位为分</span>    <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'trade_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'MWEB'</span><span class="token punctuation">;</span> <span class="token comment">//交易类型, h5支付固定填写 MWEB</span>    <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scene_info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment">// 支付场景信息</span>        <span class="token string single-quoted-string">'h5_info'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'type'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'Wap'</span><span class="token punctuation">,</span> <span class="token comment">// 固定</span>            <span class="token string single-quoted-string">'wap_url'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token comment">// 这个是调用此接口的页面url, 应该可以忽略</span>            <span class="token string single-quoted-string">'wap_name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">''</span> <span class="token comment">// 网站名字, 应该也可以忽略</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'attach'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自定义附加参数</span>    <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scene_info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'scene_info'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$lib_wx_pay</span><span class="token operator">-&gt;</span><span class="token function">unifiedOrder</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用统一下单接口, 接收返回值, 并返回给前端</span>    <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'order_no'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$order_no</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="异步接收微信支付结果接口"><a href="#异步接收微信支付结果接口" class="headerlink" title="异步接收微信支付结果接口"></a>异步接收微信支付结果接口</h5><p>这是异步接收微信支付结果的函数, 在这里处理订单状态和一些其他的支付后的业务逻辑, 并按微信规定的格式返回</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">notify_wechat</span><span class="token punctuation">(</span><span class="token class-name type-declaration">PayRecord</span> <span class="token variable">$m_pay_record</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">TestRecord</span> <span class="token variable">$m_test_record</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$lib_wx_pay</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WechatAppPay</span><span class="token punctuation">(</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wechat.pay.appid'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wechat.pay.mch_id'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wechat.pay.notify_url'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'wechat.pay.key'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$lib_wx_pay</span><span class="token operator">-&gt;</span><span class="token function">getNotifyData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 接收通知的参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$body</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'attach'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$order_no</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 自定义订单号</span>        <span class="token comment">// 下面根据业务需求处理支付成功的逻辑</span>    <span class="token punctuation">}</span>    <span class="token variable">$lib_wx_pay</span><span class="token operator">-&gt;</span><span class="token function">replyNotify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知微信服务器已处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="支付后同步跳转接口"><a href="#支付后同步跳转接口" class="headerlink" title="支付后同步跳转接口"></a>支付后同步跳转接口</h5><p>支付成功后跳转的页面, 如果需要处理些逻辑可以通过控制器, 也可以直接在前端跳转到结果页</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">return_wechat_pay</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$return_url</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span> <span class="token comment">// 跳转结果页</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: <span class="token interpolation"><span class="token variable">$return_url</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h4><p>前端这里提供的是jquery代码, 其实就一个post请求, 用啥都一样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/index.php/api/v1/pay/wechat_pay'</span><span class="token punctuation">,</span>post_data<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>return_msg <span class="token operator">===</span> <span class="token string">'OK'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// mweb_url是统一下单接口返回的链接</span>        <span class="token comment">// redirect_url就是支付成功后跳转的链接, 需要encode后拼接到mweb_url后面,</span>        <span class="token comment">// 如果不需要跳转则忽略redirect_url, 不拼接</span>        <span class="token keyword">let</span> red_url <span class="token operator">=</span> <span class="token string">'return_wechat_pay'</span><span class="token punctuation">;</span>        red_url <span class="token operator">=</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>red_url<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 这样跳转后, mweb_url就会调起微信支付</span>        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> res<span class="token punctuation">.</span>mweb_url <span class="token operator">+</span> <span class="token string">'&amp;redirect_url='</span> <span class="token operator">+</span> red_url<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li>如果使用redirect_url这个参数, 会有一个体验很不好的地方, 就是在支付过程中停留超过5s,<br>或者由于某些原因支付失败, 也会进行跳转到结果页, 所以需要在结果页由用户去手动查询支付结果,<br>可以给个弹窗提示下用户, 是否支付成功, 然后使用订单号去查询后台, 是否真的支付成功</li></ol>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付 </tag>
            
            <tag> ThinkPHP </tag>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> 微信支付 </tag>
            
            <tag> 微信H5支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue变化侦测原理</title>
      <link href="2020/10/12/vue%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B%E5%8E%9F%E7%90%86/"/>
      <url>2020/10/12/vue%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>前几天面试中遇到一个关于vue变化侦测的问题, 今天扛到一篇文章写的很清楚, 搬运一下, 文末注明了原文链接</strong></p><h1 id="深入浅出-vue变化侦测原理"><a href="#深入浅出-vue变化侦测原理" class="headerlink" title="深入浅出 - vue变化侦测原理"></a>深入浅出 - vue变化侦测原理</h1><p>其实在一年前我已经写过一篇关于 <a href="https://github.com/berwin/Blog/issues/11">vue响应式原理的文章</a>，但是最近我翻开看看发现讲的内容和我现在心里想的有些不太一样，所以我打算重新写一篇更通俗易懂的文章。</p><p>我的目标是能让读者读完我写的文章能学到知识，有一部分文章标题都以深入浅出开头，目的是把一个复杂的东西排除掉干扰学习的因素后剩下的核心原理通过很简单的描述来让读者学习到知识。</p><p>关于vue的内部原理其实有很多个重要的部分，变化侦测，模板编译，virtualDOM，整体运行流程等。</p><p>今天主要把变化侦测这部分单独拿出来讲一讲。</p><h2 id="如何侦测变化？"><a href="#如何侦测变化？" class="headerlink" title="如何侦测变化？"></a>如何侦测变化？</h2><p>关于变化侦测首先要问一个问题，在 js 中，如何侦测一个对象的变化，其实这个问题还是比较简单的，学过js的都能知道，js中有两种方法可以侦测到变化，<code>Object.defineProperty</code> 和 ES6 的<code>proxy</code>。</p><p>到目前为止vue还是用的 <code>Object.defineProperty</code>，所以我们拿 <code>Object.defineProperty</code>来举例子说明这个原理。</p><p>这里我想说的是，不管以后vue是否会用 <code>proxy</code> 重写这部分，我讲的是原理，并不是api，所以不论以后vue会怎样改，这个原理是不会变的，哪怕vue用了其他完全不同的原理实现了变化侦测，但是本篇文章讲的原理一样可以实现变化侦测，原理这个东西是不会过时的。</p><p>之前我写文章有一个毛病就是喜欢对着源码翻译，结果过了半年一年人家源码改了，我写的文章就一毛钱都不值了，而且对着源码翻译还有一个缺点是对读者的要求有点偏高，读者如果没看过源码或者看的和我不是一个版本，那根本就不知道我在说什么。</p><p>好了不说废话了，继续讲刚才的内容。</p><p>知道 <code>Object.defineProperty</code> 可以侦测到对象的变化，那么我们瞬间可以写出这样的代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> val        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            val <span class="token operator">=</span> newVal        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写一个函数封装一下 <code>Object.defineProperty</code>，毕竟 <code>Object.defineProperty</code> 的用法这么复杂，封装一下我只需要传递一个 data，和 key，val 就行了。</p><p>现在封装好了之后每当 <code>data</code> 的 <code>key</code> 读取数据 <code>get</code> 这个函数可以被触发，设置数据的时候 <code>set</code> 这个函数可以被触发，但是，，，，，，，，，，，，，，，，，，发现好像并没什么鸟用？</p><h2 id="怎么观察？"><a href="#怎么观察？" class="headerlink" title="怎么观察？"></a>怎么观察？</h2><p>现在我要问第二个问题，“怎么观察？”</p><p>思考一下，我们之所以要观察一个数据，目的是为了当数据的属性发生变化时，可以通知那些使用了这个 <code>key</code> 的地方。</p><p>举个🌰：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;{{ key }}&lt;/div&gt;  &lt;p&gt;{{ key }}&lt;/p&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>模板中有两处使用了 <code>key</code>，所以当数据发生变化时，要把这两处都通知到。</p><p>所以上面的问题，我的回答是，先收集依赖，把这些使用到 <code>key</code> 的地方先收集起来，然后等属性发生变化时，把收集好的依赖循环触发一遍就好了~</p><p>总结起来其实就一句话，<strong>getter中，收集依赖，setter中，触发依赖</strong>。</p><h2 id="依赖收集在哪？"><a href="#依赖收集在哪？" class="headerlink" title="依赖收集在哪？"></a>依赖收集在哪？</h2><p>现在我们已经有了很明确的目标，就是要在getter中收集依赖，那么我们的依赖收集到哪里去呢？？</p><p>思考一下，首先想到的是每个 <code>key</code> 都有一个数组，用来存储当前 <code>key</code> 的依赖，假设依赖是一个函数存在 <code>window.target</code> 上，先把 <code>defineReactive</code> 稍微改造一下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 新增</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token comment">// 新增</span>            <span class="token keyword">return</span> val        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>                        <span class="token comment">// 新增</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dep<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             dep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> val<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            val <span class="token operator">=</span> newVal        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>defineReactive</code> 中新增了数组 dep，用来存储被收集的依赖。</p><p>然后在触发 set 触发时，循环dep把收集到的依赖触发。</p><p>但是这样写有点耦合，我们把依赖收集这部分代码封装起来，写成下面的样子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> target<span class="token operator">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">;</span>  id<span class="token operator">:</span> number<span class="token punctuation">;</span>  subs<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Watcher<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> uid<span class="token operator">++</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token function">addSub</span> <span class="token punctuation">(</span><span class="token parameter">sub<span class="token operator">:</span> Watcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">removeSub</span> <span class="token punctuation">(</span><span class="token parameter">sub<span class="token operator">:</span> Watcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">,</span> sub<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">depend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// stabilize the subscriber list first</span>    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在改造一下 <code>defineReactive</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">defineReactive</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 修改</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 修改</span>            <span class="token keyword">return</span> val        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 新增</span>            val <span class="token operator">=</span> newVal        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一次代码看起来清晰多了，顺便回答一下上面问的问题，依赖收集到哪？收集到Dep中，Dep是专门用来存储依赖的。</p><h2 id="收集谁？"><a href="#收集谁？" class="headerlink" title="收集谁？"></a>收集谁？</h2><p>上面我们假装 <code>window.target</code> 是需要被收集的依赖，细心的同学可能已经看到，上面的代码 <code>window.target</code> 已经改成了 <code>Dep.target</code>，那 <code>Dep.target</code>是什么？我们究竟要收集谁呢？？</p><p><img src="https://user-gold-cdn.xitu.io/2018/3/19/1623c0730d86a1af?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>收集谁，换句话说是当属性发生变化后，通知谁。</p><p>我们要通知那个使用到数据的地方，而使用这个数据的地方有很多，而且类型还不一样，有可能是模板，有可能是用户写的一个 watch，所以这个时候我们需要抽象出一个能集中处理这些不同情况的类，然后我们在依赖收集的阶段只收集这个封装好的类的实例进来，通知也只通知它一个，然后它在负责通知其他地方，所以我们要抽象的这个东西需要先起一个好听的名字，嗯，就叫它watcher吧~</p><p>所以现在可以回答上面的问题，收集谁？？收集 Watcher。</p><h2 id="什么是Watcher？"><a href="#什么是Watcher？" class="headerlink" title="什么是Watcher？"></a>什么是Watcher？</h2><p>watcher 是一个中介的角色，数据发生变化通知给 watcher，然后watcher在通知给其他地方。</p><p>关于watcher我们先看一个经典的使用方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// keypath</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'a.b.c'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// do something</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码表示当 <code>data.a.b.c</code> 这个属性发生变化时，触发第二个参数这个函数。</p><p>思考一下怎么实现这个功能呢？</p><p>好像只要把这个 watcher 实例添加到 <code>data.a.b.c</code> 这个属性的 Dep 中去就行了，然后 <code>data.a.b.c</code> 触发时，会通知到watcher，然后watcher在执行参数中的这个回调函数。</p><p>好，思考完毕，开工，写出如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Watch</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">expOrFn<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 执行 this.getter() 就可以拿到 data.a.b.c</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span>        value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">undefined</span>    <span class="token punctuation">}</span>    <span class="token function">update</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码可以把自己主动 <code>push</code> 到 <code>data.a.b.c</code> 的 Dep 中去。</p><p>因为我在 <code>get</code> 这个方法中，先把 Dep.traget 设置成了 <code>this</code>，也就是当前watcher实例，然后在读一下 <code>data.a.b.c</code> 的值。</p><p>因为读了 <code>data.a.b.c</code> 的值，所以肯定会触发 <code>getter</code>。</p><p>触发了 <code>getter</code> 上面我们封装的 <code>defineReactive</code> 函数中有一段逻辑就会从 <code>Dep.target</code> 里读一个依赖 <code>push</code> 到 <code>Dep</code> 中。</p><p>所以就导致，我只要先在 Dep.target 赋一个 <code>this</code>，然后我在读一下值，去触发一下 <code>getter</code>，就可以把 <code>this</code> 主动 <code>push</code> 到 <code>keypath</code> 的依赖中，有没有很神奇~</p><p>依赖注入到 <code>Dep</code> 中去之后，当这个 <code>data.a.b.c</code> 的值发生变化，就把所有的依赖循环触发 update 方法，也就是上面代码中 update 那个方法。</p><p><code>update</code> 方法会触发参数中的回调函数，将value 和 oldValue 传到参数中。</p><p>所以其实不管是用户执行的 <code>vm.$watch('a.b.c', (value, oldValue) =&gt; {})</code> 还是模板中用到的data，都是通过 watcher 来通知自己是否需要发生变化的。</p><h2 id="递归侦测所有key"><a href="#递归侦测所有key" class="headerlink" title="递归侦测所有key"></a>递归侦测所有key</h2><p>现在其实已经可以实现变化侦测的功能了，但是我们之前写的代码只能侦测数据中的一个 key，所以我们要加工一下 <code>defineReactive</code> 这个函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 新增</span><span class="token keyword">function</span> <span class="token function">walk</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">defineReactive</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">walk</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment">// 新增</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> val        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">===</span> newVal<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            val <span class="token operator">=</span> newVal        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就可以通过执行 <code>walk(data)</code>，把 <code>data</code> 中的所有 <code>key</code> 都加工成可以被侦测的，因为是一个递归的过程，所以 <code>key</code> 中的 <code>value</code> 如果是一个对象，那这个对象的所有key也会被侦测。</p><h2 id="Array怎么进行变化侦测？"><a href="#Array怎么进行变化侦测？" class="headerlink" title="Array怎么进行变化侦测？"></a>Array怎么进行变化侦测？</h2><p>现在又发现了新的问题，<code>data</code> 中不是所有的 <code>value</code> 都是对象和基本类型，如果是一个数组怎么办？？数组是没有办法通过 <code>Object.defineProperty</code> 来侦测到行为的。</p><p>vue 中对这个数组问题的解决方案非常的简单粗暴，我说说vue是如何实现的，大体上分三步：</p><p>第一步：先把原生 <code>Array</code> 的原型方法继承下来。</p><p>第二步：对继承后的对象使用 <code>Object.defineProperty</code> 做一些拦截操作。</p><p>第三步：把加工后可以被拦截的原型，赋值到需要被拦截的 <code>Array</code> 类型的数据的原型上。</p><p><strong>vue的实现</strong></p><p>第一步：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arrayProto <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token keyword">export</span> <span class="token keyword">const</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>arrayProto<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二步：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span>  <span class="token string">'push'</span><span class="token punctuation">,</span>  <span class="token string">'pop'</span><span class="token punctuation">,</span>  <span class="token string">'shift'</span><span class="token punctuation">,</span>  <span class="token string">'unshift'</span><span class="token punctuation">,</span>  <span class="token string">'splice'</span><span class="token punctuation">,</span>  <span class="token string">'sort'</span><span class="token punctuation">,</span>  <span class="token string">'reverse'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// cache original method</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">mutator</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span> <span class="token comment">// 打印数组方法</span>      <span class="token keyword">return</span> <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    enumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在可以看到，每当被侦测的 <code>array</code> 执行方法操作数组时，我都可以知道他执行的方法是什么，并且打印到 <code>console</code> 中。</p><p>现在我要对这个数组方法类型进行判断，如果操作数组的方法是 push unshift splice （这种可以新增数组元素的方法），需要把新增的元素用上面封装的 <code>walk</code> 来进行变化检测。</p><p>并且不论操作数组的是什么方法，我都要触发消息，通知依赖列表中的依赖数据发生了变化。</p><p>那现在怎么访问依赖列表呢，可能我们需要把上面封装的 <code>walk</code> 加工一下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 工具函数</span><span class="token keyword">function</span> <span class="token function">def</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token operator">:</span> Object<span class="token punctuation">,</span> key<span class="token operator">:</span> string<span class="token punctuation">,</span> val<span class="token operator">:</span> any<span class="token punctuation">,</span> enumerable<span class="token operator">?</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    value<span class="token operator">:</span> val<span class="token punctuation">,</span>    enumerable<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>enumerable<span class="token punctuation">,</span>    writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  value<span class="token operator">:</span> any<span class="token punctuation">;</span>  dep<span class="token operator">:</span> Dep<span class="token punctuation">;</span>  vmCount<span class="token operator">:</span> number<span class="token punctuation">;</span> <span class="token comment">// number of vms that has this object as root $data</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 新增</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vmCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 新增</span>    <span class="token comment">// 新增</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * Walk through each property and convert them into   * getter/setters. This method should only be called when   * value type is Object.   */</span>  <span class="token function">walk</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">/**   * Observe a list of Array items.   */</span>  <span class="token function">observeArray</span> <span class="token punctuation">(</span><span class="token parameter">items<span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们定义了一个 <code>Observer</code>space######space类，他的职责是将 <code>data</code> 转换成可以被侦测到变化的 <code>data</code>，并且新增了对类型的判断，如果是 <code>value</code> 的类型是 <code>Array</code> 循环 Array将每一个元素丢到 Observer 中。</p><p>并且在 value 上做了一个标记 <code>__ob__</code>，这样我们就可以通过 <code>value</code> 的 <code>__ob__</code> 拿到Observer实例，然后使用 <code>__ob__</code> 上的 <code>dep.notify()</code> 就可以发送通知啦。</p><p>然后我们在改进一下Array原型的拦截器：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span>  <span class="token string">'push'</span><span class="token punctuation">,</span>  <span class="token string">'pop'</span><span class="token punctuation">,</span>  <span class="token string">'shift'</span><span class="token punctuation">,</span>  <span class="token string">'unshift'</span><span class="token punctuation">,</span>  <span class="token string">'splice'</span><span class="token punctuation">,</span>  <span class="token string">'sort'</span><span class="token punctuation">,</span>  <span class="token string">'reverse'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// cache original method</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">mutator</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">original</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__    <span class="token keyword">let</span> inserted    <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token operator">:</span>        inserted <span class="token operator">=</span> args        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token operator">:</span>        inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>    <span class="token comment">// notify change</span>    ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到写了一个 <code>switch</code> 对 <code>method</code> 进行判断，如果是 <code>push</code>，<code>unshift</code>，<code>splice</code> 这种可以新增数组元素的方法就使用 <code>ob.observeArray(inserted)</code> 把新增的元素也丢到 <code>Observer</code> 中去转换成可以被侦测到变化的数据。</p><p>在最后不论操作数组的方法是什么，都会调用 <code>ob.dep.notify()</code> 去通知 <code>watcher</code> 数据发生了改变。</p><h2 id="arrayMethods-是怎么生效的？"><a href="#arrayMethods-是怎么生效的？" class="headerlink" title="arrayMethods 是怎么生效的？"></a>arrayMethods 是怎么生效的？</h2><p>现在我们有一个 <code>arrayMenthods</code> 是被加工后的 <code>Array.prototype</code>，那么怎么让这个对象应用到<code>Array</code> 上面呢？</p><p>思考一下，我们不能直接修改 <code>Array.prototype</code>因为这样会污染全局的Array，我们希望 <code>arrayMenthods</code> 只对 <code>data</code>中的<code>Array</code> 生效。</p><p>所以我们只需要把 <code>arrayMenthods</code> 赋值给 <code>value</code> 的 <code>__proto__</code> 上就好了。</p><p>我们改造一下 <code>Observer</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vmCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      value<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> arrayMethods <span class="token comment">// 新增</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不能使用 <code>__proto__</code>，就直接循环 <code>arrayMethods</code> 把它身上的这些方法直接装到 <code>value</code> 身上好了。</p><p><strong>什么情况不能使用 <code>__proto__</code> 我也不知道，各位大佬谁知道能否给我留个言？跪谢~</strong></p><p>所以我们的代码又要改造一下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// can we use __proto__?</span><span class="token keyword">const</span> hasProto <span class="token operator">=</span> <span class="token string">'__proto__'</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 新增</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">value<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vmCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 修改</span>      <span class="token keyword">const</span> augment <span class="token operator">=</span> hasProto        <span class="token operator">?</span> protoAugment        <span class="token operator">:</span> copyAugment      <span class="token function">augment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">,</span> arrayKeys<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">protoAugment</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> src<span class="token operator">:</span> Object<span class="token punctuation">,</span> keys<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  target<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> src<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">copyAugment</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> Object<span class="token punctuation">,</span> src<span class="token operator">:</span> Object<span class="token punctuation">,</span> keys<span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token function">def</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于Array的问题"><a href="#关于Array的问题" class="headerlink" title="关于Array的问题"></a>关于Array的问题</h2><p>关于vue对Array的拦截实现上面刚说完，正因为这种实现方式，其实有些数组操作vue是拦截不到的，例如：</p><pre class="line-numbers language-none"><code class="language-none">this.list[0] = 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改数组第一个元素的值，无法侦测到数组的变化，所以并不会触发 <code>re-render</code> 或 <code>watch</code> 等。</p><p>再例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清空数组操作，无法侦测到数组的变化，所以也不会触发 <code>re-render</code> 或 <code>watch</code> 等。</p><p>因为vue的实现方式就决定了无法对上面举得两个例子做拦截，也就没有办法做到响应，ES6是有能力做到的，在ES6之前是无法做到模拟数组的原生行为的，现在 ES6 的 Proxy 可以模拟数组的原生行为，也可以通过 ES6 的继承来继承数组原生行为，从而进行拦截。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://user-gold-cdn.xitu.io/2018/3/19/1623c0730dbf228a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="img"></p><p>最后掏出vue官网上的一张图，这张图其实非常清晰，就是一个变化侦测的原理图。</p><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html">深入响应式原理-vue.js</a></p><p><code>getter</code> 到 <code>watcher</code> 有一条线，上面写着收集依赖，意思是说 <code>getter</code> 里收集 <code>watcher</code>，也就是说当数据发生 <code>get</code> 动作时开始收集 <code>watcher</code>。</p><p><code>setter</code> 到 <code>watcher</code> 有一条线，写着 <code>Notify</code> 意思是说在 <code>setter</code> 中触发消息，也就是当数据发生 <code>set</code> 动作时，通知 <code>watcher</code>。</p><p><code>Watcher</code> 到 ComponentRenderFunction 有一条线，写着 <code>Trigger re-render</code> 意思很明显了</p><blockquote><p><a href="https://juejin.im/post/6844903577450725384"><strong>原文链接: easyhappy4205, 深入浅出 - vue变化侦测原理</strong></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS Enent Loop</title>
      <link href="2020/10/07/JS-Enent-Loop/"/>
      <url>2020/10/07/JS-Enent-Loop/</url>
      
        <content type="html"><![CDATA[<p>搞懂JS的运行机制</p>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 从树形结构表中获取叶子结点数据</title>
      <link href="2020/06/20/mysql-select-leaf-node-from-tree-structure-data/"/>
      <url>2020/06/20/mysql-select-leaf-node-from-tree-structure-data/</url>
      
        <content type="html"><![CDATA[&gt; 叶子结点 就是出度为0的结点 就是没有子结点的结点<span id="more"></span><p>先记录下sql, 后面详细说明</p><p>catalogue是一张存储着书籍目录的表</p><p>主要字段包括</p><ul><li><p>id 主键, 唯一 </p></li><li><p>parent_id 父目录id</p></li><li><p>book_id 对应的书籍id</p></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select b.* from catalogue a right join catalogue b on a.parent_id = b.idwhere b.book_id = 555group by b.id having count(a.id) = 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uni-App Android Native Plugin Develop</title>
      <link href="2020/05/25/uniapp-android-native-plugin-develop/"/>
      <url>2020/05/25/uniapp-android-native-plugin-develop/</url>
      
        <content type="html"><![CDATA[这是我第一次接触原生Android开发, 第一次使用Android Studio, 感觉很吃力, 目前还有很多地方不明所以, 索性最后还是成功了, 所以先写一篇文章记录下开发uni-app android原生插件及在uni-app中集成使用的过程, 文章会结合两个具体实例来完成, 供大家参考<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>这里仅说明本文使用的开发环境, 版本不一定非要一致, 但是不知道会不会出现问题</p><ul><li><p>JDK1.8 <strong>官网推荐 jdk1.7+(最优1.8)</strong></p></li><li><p>Android SDK</p></li><li><p><a href="https://developer.android.google.cn/studio/index.html">Android Studio</a> </p><p>目前用的最新版3.6.3</p></li><li><p><a href="https://nativesupport.dcloud.net.cn/AppDocs/download/android">App离线SDK</a></p><p>建议使用最新版, 最好同时使用对应版本的HbuilderX</p></li><li><p>科学上网</p><p>想想办法</p></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>uni原生插件, 是为了补足uni-app项目的功能, 或者进一步提高APP性能, 基于开源项目<a href="https://weex.apache.org/cn/guide/index.html">weex</a>架构</p><h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><p>根据不同需求, uni原生插件可分为两个模式</p><ul><li>Module模式<ul><li>能力扩展，无嵌入窗体的UI控件。大部分插件都是属于此类，比如调用计步器API。代码写法为通过js进行require，然后调用该插件对象的方法。如涉及一些弹出框、全屏ui，也仍然属于Module模式。类似于前端里的js sdk</li></ul></li><li>Component模式<ul><li>在窗体中内嵌显示某个原生ui组件。比如窗体局部内嵌某个地图厂商的map组件，上下混排其他前端内容，就需要把这个原生地图sdk封装为Componet模式。代码写法与vue组件相同，在template里写组件标签。类似于前端里的vue组件。</li></ul></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>vue页面中仅支持使用Module类型的原生插件，且不支持调用同步方法返回数据</li><li>nvue页面中支持使用Module和Component两种类型的原生插件</li></ol><p><strong>本文仅涉及到Module模式</strong></p><h2 id="了解官方示例"><a href="#了解官方示例" class="headerlink" title="了解官方示例"></a>了解官方示例</h2><h4 id="Android离线sdk"><a href="#Android离线sdk" class="headerlink" title="Android离线sdk"></a>Android离线sdk</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><p>我这里下载的是2.6.16版本, 如果不想使用最新版, 可以在Dcloud提供的网盘下载历史版本</p><h5 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h5><p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/android_sdk_dir.jpg" alt="android_sdk"></p><ul><li><p><strong>UniPlugin-Hello-AS</strong>: </p><p>Android Studio环境离线打包带扩展插件演示应用, 本文的主角</p></li><li><p>SDK: </p><p>SDK库文件, 在libs中</p></li><li><p>HBuilder-Hello: </p><p>离线打包演示应用</p></li><li><p>HBuilder-Integrate-AS: </p><p>5+ SDK 集成和插件开发示例</p></li></ul><h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><ol><li>File-&gt;New-&gt;Import Project</li></ol><p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/import_uni_plugin.jpg" alt="import"></p><ol start="2"><li>找到离线sdk目录, 将<strong>UniPlugin-Hello-AS</strong>项目导入, 点击ok, 等待build结束</li></ol><p>   <img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/select_uni_plugin.jpg" alt="import"></p><h4 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h4><ol><li>数据线将手机连接电脑上, 开启开发者选项, 打开USB调试及允许USB安装应用, 请自行google或百度你的机型如何开启, HbuilderX中也有如何真机调试的教程</li></ol><img width="300" src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/dev_item.jpg"><ol start="2"><li>Android Studio中将项目运行到真机, 选择app, 及你的手机型号, 点击右侧绿色三角运行</li></ol><p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/1590385032.jpg" alt="image-20200525133704600"></p><ol start="3"><li>运行成功可以在你连接的手机上看到运行起来的app, 有这样三个部分, 分别对应着项目中的三个库, 也可以说是三个插件</li></ol><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/c563ebca5dc4b336408ac42482cb237.png" style="zoom:30%;"><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/1590385607.jpg" style="zoom:50%;"><h4 id="生成本地打包资源"><a href="#生成本地打包资源" class="headerlink" title="生成本地打包资源"></a>生成本地打包资源</h4><p>左上角代码视图调整到Android, 依次打开app/assets/apps/__UNI__BCEC007/www目录, 我们看到的是编译后的uni-app项目, 那么要如何编译呢?</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/1590386478.jpg" style="zoom:50%;"><p>我们将代码视图调整为Project, 看到有个名为<strong><code>uniapp示例工程源码</code></strong>的目录, 展开后看到了我们熟悉的uni-app项目结构</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/1590386524%281%29.jpg" style="zoom:50%;"><p>将其unipluginDemo项目使用HbuilderX打开, 打开manifest.json重新获取一下AppID</p><p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/1590387148.jpg" alt="image-20200525141333374"></p><p>依次点击发行-&gt;原生app本地打包, 生成本地打包app资源</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/1590387076.jpg" style="zoom:80%;"><p>等待控制台提示导出成功, 打开unpackage/resources目录可以看到app资源已经生成好了</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/image-20200525141745073.png" alt="image-20200525141745073" style="zoom:67%;"><p>将以AppID命名的目录复制, 放到上面第1步提到的<code>app/assets/apps</code>目录下, 并修改<code>app/assets/data/dcloud_control.xml</code>中的appid为你自己的appid, 点击运行, 现在运行的就是刚刚编译好的app资源, 原有的__UNI__BCEC007目录可以删掉啦</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/image-20200525144028783.png" alt="image-20200525144028783" style="zoom: 67%;"><p>app内的扩展module下的三个按钮的点击事件, 分别调用了<code>uniplugin_module\src\main\java\io\dcloud\uniplugin\TestModule.java</code>内的三个方法</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/image-20200525145104711.png" alt="image-20200525145104711" style="zoom: 67%;"><h2 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h2><p>前面使用的是官方提供的示例项目及原生插件, 现在需要自己动手开发一个插件</p><h4 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h4><p>点击Android Studio File-&gt;New-&gt;New Module</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/image-20200525150337879.png" alt="image-20200525150337879" style="zoom:80%;"><p>选择Android Library, 点击Next</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/image-20200525150521090.png" alt="image-20200525150521090" style="zoom:50%;"><p>自定义库名, 模块名, 包名, 语言选择Java, Minimum SDK选择API 19, 新手可以和图中保持一致, 避免出错, 点击Finish</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/image-20200525151005406.png" alt="image-20200525151005406" style="zoom:50%;"><p>等待Build成功, 可以看到左侧项目管理器可以看到创建的插件</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/image-20200525151357167.png" alt="image-20200525151357167" style="zoom: 67%;"><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>打开openfile的<code>build.gradle</code>, 将<code>dependencies</code>节点下内容删除, 替换成下面内容</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">dependencies <span class="token punctuation">{</span>    implementation fileTree(dir<span class="token operator">:</span> 'libs'<span class="token punctuation">,</span> include<span class="token operator">:</span> <span class="token punctuation">[</span>'*.jar'<span class="token punctuation">]</span>)        compileOnly 'com.android.support<span class="token operator">:</span>recyclerview-v7<span class="token operator">:</span><span class="token number">27.1</span>.<span class="token number">0</span>'    compileOnly 'com.android.support<span class="token operator">:</span>support-v4<span class="token operator">:</span><span class="token number">27.1</span>.<span class="token number">0</span>'    compileOnly 'com.android.support<span class="token operator">:</span>appcompat-v7<span class="token operator">:</span><span class="token number">27.1</span>.<span class="token number">0</span>'    compileOnly 'com.alibaba<span class="token operator">:</span>fastjson<span class="token operator">:</span><span class="token number">1.1</span>.<span class="token number">46</span>.android'    compileOnly fileTree(dir<span class="token operator">:</span> '../app/libs'<span class="token punctuation">,</span> include<span class="token operator">:</span> <span class="token punctuation">[</span>'uniapp-release.aar'<span class="token punctuation">]</span>)<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在dependencies同级添加<code>repositories</code>节点</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">repositories <span class="token punctuation">{</span>    flatDir <span class="token punctuation">{</span>        dirs 'libs'    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击AS右上角Sync Now, 等待同步成功</p><h4 id="创建Module类"><a href="#创建Module类" class="headerlink" title="创建Module类"></a>创建Module类</h4><p>在<code>com.bigbear.openfile</code>下新建Java Class, </p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/image-20200525153835150.png" alt="image-20200525153835150" style="zoom: 67%;"><p>填写类名, 继承WXModule, 点击OK</p><img src="https://ccliuxy-image.oss-cn-beijing.aliyuncs.com/image-20200525154358654.png" alt="image-20200525154358654" style="zoom:67%;"><p>编写一个init函数, 测试一下能否正常使用. 代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bigbear<span class="token punctuation">.</span>openfile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Log</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>weex<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JSMethod</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>weex<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span></span><span class="token class-name">JSCallback</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>weex<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">WXModule</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenFileModule</span> <span class="token keyword">extends</span> <span class="token class-name">WXModule</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> TAG <span class="token operator">=</span> <span class="token string">"BIGBEAR"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@JSMethod</span><span class="token punctuation">(</span>uiThread <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span> options<span class="token punctuation">,</span> <span class="token class-name">JSCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"testinit: "</span> <span class="token operator">+</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">JSONObject</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            callback<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注册插件"><a href="#注册插件" class="headerlink" title="注册插件"></a>注册插件</h4><p>打开<code>app/assets/dcloud_uniplugins.json</code>文件, 在<code>nativePlugins</code>节点下新增</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"hooksClass"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>   <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token punctuation">{</span>       <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>       <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"OpenFile"</span><span class="token punctuation">,</span>       <span class="token property">"class"</span><span class="token operator">:</span> <span class="token string">"com.bigbear.openfile.OpenFileModule"</span>     <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原生工程中调用插件方法进行调试"><a href="#原生工程中调用插件方法进行调试" class="headerlink" title="原生工程中调用插件方法进行调试"></a>原生工程中调用插件方法进行调试</h4><p>新建一个uni-app项目, 或者使用现有的项目, 在页面中引入插件, 并添加一个按钮触发init方法</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;view&gt;&lt;button type="primary" @click="testInit"&gt;testInit&lt;/button&gt;&lt;/view&gt;&lt;/template&gt;&lt;script&gt;// 引入 module const OpenFile = uni.requireNativePlugin("OpenFile")export default {onLoad() {},methods: {testInit() {OpenFile.init({a:1, b:2}, res=&gt; { //调用插件中刚编写的init方法console.log(res);})}}}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="#生成本地打包资源">生成本地打包APP资源</a>, 并且将其放入原生工程目录下, 可参考前面说过的步骤完成, 记得保证<code>dcloud_control.xml</code>中的appid和uniapp项目的appid一致</p><p><strong>在app的build.gradle中添加插件</strong></p><pre class="line-numbers language-none"><code class="language-none">implementation project(':openfile')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>点击RUN 按钮运行app, 点击测试按钮, 可以在logcat中看见我们打印出的传递过来的参数</p><p>logcat中的日志很乱, 筛选一下方便查看</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200601104329137.png" alt="image-20200601104329137"></p><h4 id="openfile功能"><a href="#openfile功能" class="headerlink" title="openfile功能"></a>openfile功能</h4><p>这个功能想必大部分人都用过, 就是在使用 微信, QQ打开文件的时候, 我们想使用其他应用打开, 方便我们编辑或查看文档, 那么你会见到这个弹窗 </p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200601105021393.png" alt="image-20200601105021393" style="zoom: 33%;"><p>那么, 我们要做的, 就是将你自己开发的uni-app项目, 添加到这个列表中</p><h5 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h5><p>打开openfile下的<code>AndroidManifest.xml</code>文件, 修改成下面的样子</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bigbear.openfile<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bigbear.openfile.OpenFileActivity<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@style/Theme.AppCompat.Dialog<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.VIEW<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.action.SEND<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.DEFAULT<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>android.intent.category.BROWSABLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>scheme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/plain<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--txt--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/xml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/csv<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/msword<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--doc--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/vnd.openxmlformats-officedocument.wordprocessingml.document<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--docx--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/vnd.ms-powerpoint<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--ppt--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/vnd.openxmlformats-officedocument.presentationml.presentation<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--pptx--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/vnd.ms-excel<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--xls--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--xlsx--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/json<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/pdf<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--pdf--&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/xml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name"><span class="token namespace">android:</span>mimeType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/vnd.ms-works<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--wps--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="OpenFileActivity"><a href="#OpenFileActivity" class="headerlink" title="OpenFileActivity"></a>OpenFileActivity</h5><p>在<code>com.bigbear.openfile</code>下新建<code>OpenFileActivity.java</code>, 在<code>onCreate</code>中获取其他应用打开你的应用时传递过来的文件路径, 然后通过scheme唤起你的uni-app应用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bigbear<span class="token punctuation">.</span>openfile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>content<span class="token punctuation">.</span></span><span class="token class-name">Intent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">Uri</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Bundle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Environment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenFileActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------*******************************onCreate**************************-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------*******************************openfile**************************-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Uri</span> uri <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">assert</span> uri <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> path <span class="token operator">=</span> uri<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> _uri<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> path <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/external/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//wechat</span>                path <span class="token operator">=</span> <span class="token class-name">Environment</span><span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/external"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                _uri <span class="token operator">=</span> <span class="token string">"file://"</span> <span class="token operator">+</span> path<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/external_files/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//qq</span>                path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/external_files"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                _uri <span class="token operator">=</span> <span class="token string">"file://"</span> <span class="token operator">+</span> path<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                _uri <span class="token operator">=</span> uri <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span>  <span class="token punctuation">{</span>            _uri <span class="token operator">=</span> uri <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>_uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Uri</span> open_uri <span class="token operator">=</span> <span class="token class-name">Uri</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"abc://"</span><span class="token operator">+</span> _uri<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里的abc是你给uniapp项目设置的scheme</span>        <span class="token class-name">Intent</span> _intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">Intent</span><span class="token punctuation">.</span>ACTION_VIEW<span class="token punctuation">,</span> open_uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startActivity</span><span class="token punctuation">(</span>_intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------***************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新运行, 在微信中或者qq中找一个文件, 选择用其他应用打开, 可以看到, 我们的测试app已经出现在了列表中</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200601111732541.png" alt="image-20200601111732541" style="zoom:33%;"><p>选择HBuilder-integrate-AS打开, 应用会自动打开跳转到我们在代码中写的scheme的应用中, 同时logcat中看下打印出的内容, 我们也已经获取到了文件的链接</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200601111935162.png" alt="image-20200601111935162"></p><h4 id="集成插件到uniapp"><a href="#集成插件到uniapp" class="headerlink" title="集成插件到uniapp"></a>集成插件到uniapp</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://nativesupport.dcloud.net.cn/NativePlugin/README">uni-app原生插件开发文档</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/37974829">Android SDK下载安装及配置教程</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> uni-app </category>
          
          <category> Android </category>
          
          <category> WEEX </category>
          
          <category> opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> uni-app </tag>
            
            <tag> WEEX </tag>
            
            <tag> Android </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6中的import和export使用方法</title>
      <link href="2020/04/06/ES6-import-and-export/"/>
      <url>2020/04/06/ES6-import-and-export/</url>
      
        <content type="html"><![CDATA[<ol><li><pre class="line-numbers language-none"><code class="language-none">export const obj = {};export const obj2 = {};import * as JsName from './jsName.js'; // obj和obj2均在JsName对象下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-none"><code class="language-none">export const obj = {};export const obj2 = {};import { obj } from './schedule.js';import { obj2 } from './schedule.js';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> 随手记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Composer的安装及使用</title>
      <link href="2020/01/08/Install-and-use-Composer/"/>
      <url>2020/01/08/Install-and-use-Composer/</url>
      
        <content type="html"><![CDATA[&gt; Composer 是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件<p align="center">    <a href="https://www.phpcomposer.com/" target="_blank" rel="noopener noreferrer">        <img width="400" src="https://www.phpcomposer.com//assets/img/phpcomposer.png" alt="Composer logo">    </a></p><p>或许你还没听说过Composer,  亦或听说过 <del>没听过,两万五千里</del> 而没有使用过, 没关系, 跟着我一起, 用起来</p><span id="more"></span><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ul><li><a href="https://getcomposer.org/">Composer官网</a></li><li><a href="https://www.phpcomposer.com/">Composer中文网</a></li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>PHP</li></ul><p>这是必须的吧, 啊哈哈哈, 如果还没有安装php, 我建议你先不要看下去了</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>随便打开一个上面提供的网址, 找到下载页, 或者直接点击<a href="https://getcomposer.org/Composer-Setup.exe">Composer-Setup.exe</a>开始下载exe文件</p><p>双击Composer-Setup.exe开始安装</p><ol><li>这里勾上developer mode可以自定义安装目录, 也可以不勾选, Next</li></ol><p><img src="https://user-images.githubusercontent.com/33248133/71993077-742cae80-3271-11ea-8ecb-338cc7bcb5cd.PNG" alt="composer-setup"></p><ol start="2"><li>这里会自动识别出你的php安装目录, 如果没有识别出来, 需要自己选择一下, 所以要记得你的php装在什么位置了哦 Next</li></ol><p><img src="https://user-images.githubusercontent.com/33248133/71993490-26fd0c80-3272-11ea-950c-c9a6ee791e12.PNG" alt="composer-setup"></p><ol start="3"><li>设置代理, 按需设置, 没有可以直接跳过 Next</li></ol><p><img src="https://user-images.githubusercontent.com/33248133/71993796-aab6f900-3272-11ea-86f7-e4bf17735152.PNG" alt="composer-setup"></p><ol start="4"><li>这里来检查一下安装路径, 并且会自动帮你将composer加入到环境变量中, 这样就可以在全局使用了,填写无误可以点击 Install</li></ol><p><img src="https://user-images.githubusercontent.com/33248133/71993953-e81b8680-3272-11ea-9276-7a4f29ace4ca.PNG" alt="composer-setup"></p><ol start="5"><li>耐心等待一小会, 等他安装完成, 跳出警告可以直接点击下一步, 看到下图, 就已经安装完成啦! Next-&gt;Finished</li></ol><p><img src="https://user-images.githubusercontent.com/33248133/71994302-73951780-3273-11ea-8a91-496296ad9aac.PNG" alt="composer-five"></p><ol start="6"><li>打开命令行, 输入<code>composer -V</code>, 会看到相应的版本信息. 命令行需要重新打开哦, 如果没有显示出相应信息, 则需要重启一下电脑, 至此, composer就安装完成了</li></ol><p><img src="https://user-images.githubusercontent.com/33248133/71994695-2c5b5680-3274-11ea-98e7-4a4bc1d532a4.PNG" alt="composer-v"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们先从一个空项目说起</p><p>随便在哪里新建一个空的目录</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><h4 id="从composer-json开始"><a href="#从composer-json开始" class="headerlink" title="从composer.json开始"></a>从composer.json开始</h4><h5 id="新建composer-json文件"><a href="#新建composer-json文件" class="headerlink" title="新建composer.json文件"></a>新建composer.json文件</h5><p>新建composer.json文件,输入下面内容, <a href="http://www.querylist.cc/"><code>querylist</code></a>是一个php的内容采集框架,后面我会写一篇关于它的使用方式, 这里我们使用它来演示composer</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"jaeger/querylist"</span><span class="token operator">:</span> <span class="token string">"4.0.*"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="composer-install"><a href="#composer-install" class="headerlink" title="composer install"></a>composer install</h5><p>在项目目录下执行<code>composer install</code> , composer会读取composer.json中的内容,来自动下载安装相关依赖</p><p><img src="https://user-images.githubusercontent.com/33248133/71997841-7eeb4180-3279-11ea-8356-eb892fa78d22.gif" alt="演示动图"></p><h5 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h5><p>等待安装完成后我们会在项目根目录下看到一个vendor目录, 和一个composer.lock文件</p><h4 id="从composer-require开始"><a href="#从composer-require开始" class="headerlink" title="从composer require开始"></a>从composer require开始</h4><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php">composer <span class="token keyword">require</span> jaeger<span class="token operator">/</span>querylist <span class="token number">4.0</span><span class="token operator">.</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>使用这种方式, composer会自动生成一个composer.json文件, 并将jaeger/querylist写入到其中, 然后根据composer.json下载相关依赖, 命令执行完毕后, 项目根目录下的结构, 和前面的方式是一样的</p><h4 id="锁文件composer-lock"><a href="#锁文件composer-lock" class="headerlink" title="锁文件composer.lock"></a>锁文件<code>composer.lock</code></h4><h5 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h5><p>每次安装新的依赖时, Composer会将其相关信息, 自动写入lock文件中, 包括对应版本</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>如果多人协同项目的话, 其他人在执行composer install时, 会先从lock文件中寻找该依赖和相应版本, 保证了所有人的版本一致, 可以理解为lock文件, ‘<strong>锁定</strong>‘ 了各依赖的版本</p><h5 id="更新依赖版本"><a href="#更新依赖版本" class="headerlink" title="更新依赖版本"></a>更新依赖版本</h5><p>注意, 当执行<strong><code>composer update</code></strong> 时,  composer会获取依赖的最新版本, 并更新lock文件, 如果你只想更新特定的某个包, 那么可以在命令后指明要更新的包,像这样</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">composer update jaeger/querylist # 后面可以继续添加多个<span class="token punctuation">,</span> 会一并更新<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面是lock中, 我们刚刚装好的依赖的部分信息, 你可以自己动手打开lock文件看下全部</p><p><img src="https://user-images.githubusercontent.com/33248133/72072870-c3361a80-3329-11ea-96d3-b269196385eb.PNG" alt="composer-lock中的部分依赖信息"></p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="autoload-php"><a href="#autoload-php" class="headerlink" title="autoload.php"></a>autoload.php</h4><p>vendor目录生成后, Composer会帮我们准备一个自动加载文件, <strong>autoload.php</strong>, 我们只需引入这个文件, Composer会帮我们处理一切</p><img src="https://user-images.githubusercontent.com/33248133/72047325-3ffad180-32f5-11ea-8ce3-c0c5e536275b.png" alt="autoload.php位置" style="zoom:80%;"><h4 id="普通项目引入"><a href="#普通项目引入" class="headerlink" title="普通项目引入"></a>普通项目引入</h4><h5 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h5><p>我们在刚才的项目目录下新建一个可执行php文件, 命名为Index.php,</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>写入如下代码</p><p>这段代码抓取了我的个人博客首页的文章title和链接, 后面会有专门一篇文章介绍QueryList的使用, 很方便</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'vendor/autoload.php'</span><span class="token punctuation">;</span><span class="token keyword">Use</span> <span class="token package">QL<span class="token punctuation">\</span>QueryList</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'http://blog.pulsating.cn'</span><span class="token punctuation">;</span><span class="token variable">$rules</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'.article-title'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'url'</span><span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'.article-title'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">QueryList</span><span class="token operator">::</span><span class="token function">rules</span><span class="token punctuation">(</span><span class="token variable">$rules</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行Index.php, 可以看到已经成功的使用了querylist依赖</p><p><img src="https://user-images.githubusercontent.com/33248133/72077886-ff21ad80-3332-11ea-970b-daf9b7442fe6.png" alt="执行结果"></p><h4 id="在CodeIgniter中引入"><a href="#在CodeIgniter中引入" class="headerlink" title="在CodeIgniter中引入"></a>在CodeIgniter中引入</h4><h5 id="修改config-php"><a href="#修改config-php" class="headerlink" title="修改config.php"></a>修改config.php</h5><p>将<code>$config['composer_autoload']</code>的值改为true, CI会自动在application/vendor/目录下寻找autoload.php文件并加载</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// application/config/config.php</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'composer_autoload'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者也可以这样, 将值写成具体路径</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'composer_autoload'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'vendor/autoload.php'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="controller中使用"><a href="#controller中使用" class="headerlink" title="controller中使用"></a>controller中使用</h5><p>直接在controller中的class外部use, 然后就可以使用QueryList了, 后续代码和上面相同</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">QL<span class="token punctuation">\</span>QueryList</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="结束-1"><a href="#结束-1" class="headerlink" title="结束"></a>结束</h2><ul><li>不推荐手写composer.json文件, 推荐使用require的方式下载依赖, 手写很容易出错</li></ul><ul><li><a href="https://packagist.org/">packagist</a> 是 Composer 主要的一个包信息存储库, 你可以分享自己的package到上面, 也可以在里面找其他人分享的package使用</li></ul><ul><li><a href="http://www.querylist.cc/">QueryList</a> 文中的QueryList官网</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> Composer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sphinx配置多索引</title>
      <link href="2020/01/08/Sphinx-multi-index-configuration/"/>
      <url>2020/01/08/Sphinx-multi-index-configuration/</url>
      
        <content type="html"><![CDATA[<p><strong>之前有写过sphinx的简单使用, 初次接触sphinx的同学可以先了解下, windows和linux都有</strong></p><ul><li><a href="http://blog.pulsating.cn/2019/11/12/Sphinx-Linux-install/">Linux下安装sphinx及配置</a></li><li><a href="http://pulsating.cn/2019/11/12/install-Sphinx-in-Windows-and-use-Sphinxapi-in-php/">Windows下安装sphinx及配置</a><br>本文记录以下如何在sphinx的配置文件<code>sphinx.conf</code>中, 配置多个索引, 并启动服务<span id="more"></span></li></ul><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h4 id="原配置文件"><a href="#原配置文件" class="headerlink" title="原配置文件"></a>原配置文件</h4><p>找到sphinx.conf配置文件, 假设当前已经有一个索引已经配置ok,  那么你的文件打开后应该类似这样的,其中数据源为article_source,对应文章表, 索引名称为article,对应article_source</p><pre class="line-numbers language-none"><code class="language-none">source article_source{        type                    = mysql        sql_host                = SQLHOST        sql_user                = username        sql_pass                = password        sql_db                  = DBNAME        sql_port                = 3306  # optional, default is 3306        sql_query_pre           = SET NAMES utf8        sql_query               = \        SELECT id, title, content \                FROM tablename}index article{        source                  = article_source # 对应上面source的名称        path                    = /sphinx/article_data        min_word_len            = 1        ngram_len               = 1        ngram_chars             = U+3000..U+2FA1F}indexer{        mem_limit               = 512M}searchd{        listen                  = 9312        listen                  = 9306:mysql41        log                     = /sphinx/searchd.log        query_log               = /sphinx/query.log        read_timeout            = 5        max_children            = 30        pid_file                = /sphinx/searchd.pid        seamless_rotate         = 1        preopen_indexes         = 1        unlink_old              = 1        binlog_path             = /sphinx/data}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们有一个新表, 假设为音乐表, 我们需要根据歌曲名称, 和歌词来匹配对应的歌曲, 供用户去搜索, 也需要使用sphinx, 那么我们应该如何做呢?</p><h4 id="构建新数据源"><a href="#构建新数据源" class="headerlink" title="构建新数据源"></a>构建新数据源</h4><p>打开sphinx.conf文件,  在article_source数据源的下方, 声明下新的音乐数据源</p><pre class="line-numbers language-none"><code class="language-none">source music_source{        type                    = mysql        sql_host                = SQLHOST        sql_user                = username        sql_pass                = password        sql_db                  = DBNAME        sql_port                = 3306  # optional, default is 3306        sql_query_pre           = SET NAMES utf8        sql_query               = \        SELECT id, name, lyric \                FROM music}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置index"><a href="#配置index" class="headerlink" title="配置index"></a>配置index</h4><p>在index article下方, 构建音乐数据源的索引</p><pre class="line-numbers language-none"><code class="language-none">index music{        source                  = music_source # 对应上面source的名称        path                    = /sphinx/music_data        min_word_len            = 1        ngram_len               = 1        ngram_chars             = U+3000..U+2FA1F}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里要注意一下, 两个索引的path不能在同一个目录下, 也有可能是我操作有误, 放在同一目录下面一直报错</strong></p><p>至此, 配置文件就配置好了</p><h2 id="重新构建索引"><a href="#重新构建索引" class="headerlink" title="重新构建索引"></a>重新构建索引</h2><h4 id="停止searchd服务"><a href="#停止searchd服务" class="headerlink" title="停止searchd服务"></a>停止searchd服务</h4><p>构建索引时需要停掉运行中的searchd服务, 不然会失败, 原索引如果正在使用中, 请谨慎停止, 或者研究一下<code>--rotate</code> 参数</p><p><strong><code>--rotate</code> 用于轮换索引，在不停止服务的时候（searchd运行时）增加索引；searchd运行时不加会报错。</strong></p><p><strong>停止searchd命令:</strong></p><pre class="line-numbers language-none"><code class="language-none">searchd -c source.conf --stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重建索引"><a href="#重建索引" class="headerlink" title="重建索引"></a>重建索引</h4><p><strong>命令:</strong></p><pre class="line-numbers language-none"><code class="language-none">indexer -c sphinx.conf -all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="启动searchd服务"><a href="#启动searchd服务" class="headerlink" title="启动searchd服务"></a>启动searchd服务</h4><pre class="line-numbers language-none"><code class="language-none">searchd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
          <category> Sphinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> Mysql </tag>
            
            <tag> Sphinx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用命令行执行CI控制器中的函数</title>
      <link href="2020/01/07/Run-CI-method-in-cli/"/>
      <url>2020/01/07/Run-CI-method-in-cli/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有些时候我们在执行一些长时间的任务的时候, 使用浏览器运行是很不友好的, 看不到实时输出, 时间过长浏览器还会超时, 这时候就需要在命令行中来执行</p></blockquote><span id="more"></span><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><pre class="line-numbers language-none"><code class="language-none">php index.php controller method param<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h2><ul><li>需要将php路径设置到环境变量中, 或者指定php路径</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美味的糖醋排骨, 一次成功, 超级好吃</title>
      <link href="2020/01/06/sweet-and-sour-spareribs/"/>
      <url>2020/01/06/sweet-and-sour-spareribs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每个周末, 都要想办法犒劳一下自己, 的胃, 刚好畅大人想吃糖醋排骨, 得! 那就来吧, 没想到以前一做就砸, 这次竟然成功了, 牛B, 记录一下</p></blockquote><span id="more"></span><h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><h4 id="煮"><a href="#煮" class="headerlink" title="煮"></a>煮</h4><ul><li>排骨        2根</li><li>葱段        任意</li><li>姜        4片</li><li>料酒/白酒    2勺</li></ul><h4 id="炒"><a href="#炒" class="headerlink" title="炒"></a>炒</h4><ul><li>食用油</li><li>冷水            半碗</li><li>冰糖/绵白糖    10粒/2勺        喜欢甜可以适当多放一些</li><li>香醋            1.5勺</li><li>老抽            0.5勺        千万别放多了</li><li>盐            1/3勺</li></ul><h4 id="汁"><a href="#汁" class="headerlink" title="汁"></a>汁</h4><ul><li>绵白糖            1勺</li><li>香醋            1勺</li><li>玉米淀粉        0.5勺</li><li>温水            2勺</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>排骨剁成块, 洗净 (买排骨的时候说下, 卖家会帮你剁的, 自己家里的菜刀就是个弟弟) 锅里加清水, 放入排骨, 葱段, 姜片, 白酒(不喜欢料酒的味道, 我用了白酒) 大火烧开后, 改成小火开始计时, 煮30分钟</p></li><li><p>捞出煮好的排骨, 再次用清水洗净, 控干水份(避免一会下锅的时候烫伤)</p></li><li><p>锅洗净烧热, 导入适量食用油, 油热后(凭感觉) 倒入排骨, 用中火炒至排骨变色后捞出(2分钟左右) 开大火再次将油烧热, 倒入排骨快速翻炒, 30秒后捞出, 装盘备用</p></li><li><p>另起一锅, 倒入半碗清水, 加入冰糖, 小火烧至冰糖融化, 微微变成黄色并起泡, </p></li><li><p>倒入炒好的排骨, 盐, 香醋, 加入老抽, 中火翻炒至排骨颜色均匀, </p></li><li><p>将调好的汁, 倒入锅中, 转大火迅速翻炒, 炒至颜色均匀, 并且无多于汤汁, 关火</p></li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ul><li>排骨真的贵, 两根排骨近50块</li><li>最后浇的汁, 一定要搅拌均匀, 最后出国的排骨亮亮的, 很有食欲</li><li>畅大人和我都不喜欢料酒的味道, 我就用白酒替代了 二锅头, 哈哈哈哈哈</li><li>老抽千万不要放多了, 颜色很深的, 不把握的话可以用酱油代替, 口感影响不大</li></ul><h2 id="下次见"><a href="#下次见" class="headerlink" title="下次见"></a>下次见</h2>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> 美食 </tag>
            
            <tag> 食谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决PHP CI(CodeIgniter)框架使用insert_batch()批量插入时unique列冲突导致操作失败的问题</title>
      <link href="2019/12/27/Custom-CI-insert-batch/"/>
      <url>2019/12/27/Custom-CI-insert-batch/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在CI中, 有时我们想将很多条数据, 批量插入到数据库中, 我们知道有<a href="https://codeigniter.org.cn/user_guide/database/query_builder.html">insert_batch()</a>这个函数, 但是如果insert_batch时, 遇到了mysql中的UNIQUE约束, 就会导致插入失败, 并回滚, 那么我们该如何让其跳过冲突的列, 并继续执行下面的数据呢?<br> <span id="more"></span></p></blockquote><p>既然insert_batch()满足不了我们的需求, 那我们就自己造一个, 首先我们找到insert_batch()函数的位置, 看下源码,</p><pre class="line-numbers language-none"><code class="language-none"># CI_VERSION = 3.1.11, 这个版本可以在system/core/CodeIgniter.php中查看# 位置在 system/database/DB_query_builder.php insert_batch()/** * Insert_Batch * * Compiles batch insert strings and runs the queries * * @paramstring$tableTable to insert into * @paramarray$set An associative array of insert values * @parambool$escapeWhether to escape values and identifiers * @returnintNumber of rows inserted or FALSE on failure */public function insert_batch($table, $set = NULL, $escape = NULL, $batch_size = 100){if ($set === NULL){if (empty($this-&gt;qb_set)){return ($this-&gt;db_debug) ? $this-&gt;display_error('db_must_use_set') : FALSE;}}else{if (empty($set)){return ($this-&gt;db_debug) ? $this-&gt;display_error('insert_batch() called with no data') : FALSE;}$this-&gt;set_insert_batch($set, '', $escape);}if (strlen($table) === 0){if ( ! isset($this-&gt;qb_from[0])){return ($this-&gt;db_debug) ? $this-&gt;display_error('db_must_set_table') : FALSE;}$table = $this-&gt;qb_from[0];}// Batch this baby$affected_rows = 0;for ($i = 0, $total = count($this-&gt;qb_set); $i &lt; $total; $i += $batch_size){if ($this-&gt;query($this-&gt;_insert_batch($this-&gt;protect_identifiers($table, TRUE, $escape, FALSE), $this-&gt;qb_keys, array_slice($this-&gt;qb_set, $i, $batch_size)))){$affected_rows += $this-&gt;affected_rows();}}$this-&gt;_reset_write();return $affected_rows;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到, _insert_batch函数生成了sql语句, 最终由query函数执行, 并返回影响条数, 现在我们使用<strong>IGNORE</strong>关键字, 来改写一下sql语句那里就ok了, 为了不影响源码, 我们在insert_batch()下面新写一个insert_ignore_batch函数, 前面都省略, 直接从for循环这里开始</p><pre class="line-numbers language-none"><code class="language-none">/** insert_batch() using INSERT IGNORE INTO instead of INSERT INTO* @ xyliu*/public function insert_ignore_batch($table, $set = NULL, $escape = NULL, $batch_size = 100){    // ...这里的内容直接复制过来, 保持原样就可以, 这里太占篇幅被我省略掉了    // Batch this baby;    $affected_rows = 0;    for ($i = 0, $total = count($this-&gt;qb_set); $i &lt; $total; $i = $i + 100)    {        $sql = $this-&gt;_insert_batch($this-&gt;protect_identifiers($table, TRUE, $escape, FALSE), $this-&gt;qb_keys, array_slice($this-&gt;qb_set, $i, $batch_size));        $sql = str_replace('INSERT INTO','INSERT IGNORE INTO',$sql); //忽略错误        if ($this-&gt;query($sql)) {        $affected_rows += $this-&gt;affected_rows();        }    }    $this-&gt;_reset_write();    return $affected_rows;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在使用的时候可以直接像使用insert_batch()那样使用insert_ignore_batch</p><pre class="line-numbers language-none"><code class="language-none">$this-&gt;db-&gt;insert_ignore_batch();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心血来潮,迟到的煮红酒</title>
      <link href="2019/12/27/Late-boiled-wine/"/>
      <url>2019/12/27/Late-boiled-wine/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>下班路上突然想起来圣诞节那天看到个微博热搜, 煮红酒, 突然间就好想试一下呀, 刚好家里还剩下的红酒, 说干就干, 吃过晚饭之后就到超市准备水果啦! 紧跟潮流!</strong></p></blockquote><span id="more"></span><h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><blockquote><p><strong>不用太严格, 放多少开心就好</strong></p></blockquote><ul><li>苹果1个</li><li>大白梨1个</li><li>橙子1个</li><li>柠檬1个</li><li>草莓10+,多了浪费</li><li>蓝莓10+,反正我没买到,没放</li><li>八角2粒</li><li>香叶2片</li><li>肉桂1段</li><li>冰糖,多放一些,不然会很酸,我这次放了一大把,还是很酸哈哈哈</li><li>红酒1瓶,怕喝不了可以半瓶</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><blockquote><p><strong>抱歉做的时候忘记了拍照, 哈哈哈不过影响不大</strong></p></blockquote><ol><li>苹果, 梨子, 橙子, 柠檬用半个就够了,剩下半个被我摆盘吃掉啦, 全部切片下锅</li><li>草莓, 蓝莓切开下锅</li><li>放入八角, 香叶, 肉桂, 冰糖</li><li>倒入红酒, 好奢侈, 整整用了一瓶, 就是它!</li></ol><img src="https://user-images.githubusercontent.com/33248133/71521004-dbee0b80-28f9-11ea-9ae4-68df5a8b5d70.jpg" width="300" alt="今日主角" align="center">        <p><br>5. 盖上锅, 开小火, 开始计时, 喜欢酒味15分钟就可以喝了, 不想酒味太浓, 可以再久个5分钟, 但是不要太久了, 太久了就不剩下多少了<br>6. 出锅啦, 准备好手机开始拍照哈哈哈哈哈哈哈哈哈<br>7. 晒一下美照</p><img src="https://user-images.githubusercontent.com/33248133/71521306-21f79f00-28fb-11ea-920a-1f94d966c83d.jpg" width="400" alt="成品" align="center"><blockquote><p><br><strong>买的水果很成功, 苹果超甜, 草莓超好吃, 现在坐在电脑前, 听着音乐, 喝着热乎乎的红酒, 吃着切剩下的水果, 太幸福了吧!</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> 美食 </tag>
            
            <tag> 食谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql max_allowed_packet 设置</title>
      <link href="2019/12/26/Mysql-max_allowed_packet-setting/"/>
      <url>2019/12/26/Mysql-max_allowed_packet-setting/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>max_allowed_packet</strong> 限制着你的mysql serve接收的数据包大小, 如果insert或者update时数据过大,超出max_allowed_packet的限制,mysql会抛出错误导致操作失败,那么我们来看下如何查看和设置max_allowed_packet</p></blockquote><span id="more"></span><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><pre class="line-numbers language-none"><code class="language-none">mysql&gt; show global variables like 'max_allowed_packet';+--------------------+----------+| Variable_name      | Value    |+--------------------+----------+| max_allowed_packet | 16777216 |+--------------------+----------+1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到当前max_allowed_packet设置为16M (1024 * 1024 * 16)</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ul><li><p>通过mysql命令修改(临时,重启mysql会重置为原始大小)</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; set global max_allowed_packet=32*1024*1024;ERROR 2006 (HY000): MySQL server has gone awayNo connection. Trying to reconnect...Connection id:    6Current database: mineQuery OK, 0 rows affected (0.01 sec)mysql&gt; show global variables like 'max_allowed_packet';+--------------------+----------+| Variable_name      | Value    |+--------------------+----------+| max_allowed_packet | 33554432 |+--------------------+----------+1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到现在的value值已经变为33554432,也就是32M</p></li><li><p>修改mysql配置文件(不会失效,直到再次修改配置文件)</p><ol><li>windows下,找到mysql安装目录下<strong>my.ini</strong>文件</li><li>找到这一行<strong>max_allowed_packet=16M</strong>将16M修改为你想要的大小,这里改为8M,保存</li><li>重启mysql服务,查看当前max_allowed_packet大小,发现已经成功修改为8M<pre class="line-numbers language-none"><code class="language-none">mysql&gt; show global variables like 'max_allowed_packet';ERROR 2006 (HY000): MySQL server has gone awayNo connection. Trying to reconnect...Connection id:    2Current database: mine+--------------------+---------+| Variable_name      | Value   |+--------------------+---------+| max_allowed_packet | 8388608 |+--------------------+---------+1 row in set, 1 warning (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql table import and export 快速导出导入</title>
      <link href="2019/12/20/Mysql-table-import-and-export/"/>
      <url>2019/12/20/Mysql-table-import-and-export/</url>
      
        <content type="html"><![CDATA[<h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><pre class="line-numbers language-none"><code class="language-none">mysqldump -u root -p -q -e -t  db_name table_name &gt; table_name.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>–quick，-q<br>该选项在导出大表时很有用，它强制 mysqldump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中。</p></li><li><p>–extended-insert, -e<br>使用具有多个VALUES列的INSERT语法。这样使导出文件更小，并加速导入时的速度。默认为打开状态，使用–skip-extended-insert取消选项。</p></li><li><p>-t<br>仅导出表数据，不导出表结构</p></li></ul><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><pre class="line-numbers language-none"><code class="language-none">use db_name;source table_name.sql;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS实现首字母排序</title>
      <link href="2019/11/22/First-letter-sort-use-JS/"/>
      <url>2019/11/22/First-letter-sort-use-JS/</url>
      
        <content type="html"><![CDATA[<p>一个按照姓名首字母排序的功能,支持数字,字母,符号,中文混合排序</p><span id="more"></span><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ul><li>首字为中文则转换成小写</li><li>大小写均转换成小写比较,避免任意大写字母排在任意小写字母前</li><li>大写字母 == 小写字母 &gt; 数字 &gt; 符号 (这里数字和符号可以在最前面,因为业务需要被我拿到了最后面)</li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><pre class="line-numbers language-none"><code class="language-none">// 排序前this.friends = [    {nick_name: 'cc'},    {nick_name: 'Xin'},    {nick_name: 'xiao李zi'},    {nick_name: '__大熊'},    {nick_name: 'Tian'},    {nick_name: '3day'},    {nick_name: '第一帅'},    {nick_name: '大猪蹄子'},];// 排序后this.friends = [    {nick_name: 'cc'},    {nick_name: '第一帅'},    {nick_name: '大猪蹄子'},    {nick_name: 'Tian'},    {nick_name: 'Xin'},    {nick_name: 'xiao李zi'},    {nick_name: '3day'},    {nick_name: '__大熊'},];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Library"><a href="#Library" class="headerlink" title="Library"></a>Library</h2><ul><li><a href="https://hotoo.github.io/pinyin/">hotoo/pinyin</a></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li><p>安装<strong>hotoo/pinyin</strong></p><pre class="line-numbers language-none"><code class="language-none">npm install pinyin -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>引入</p><pre class="line-numbers language-none"><code class="language-none">import pinyin from 'pinyin';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>逻辑</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 根据姓名或昵称排序, * 维护两个数组,分别存入字母开头和数字符号开头的项 * 这里如果想把数字符号开头的名字排在最前面,就只用一个w_users就可以了,排序的时候会默认在最前面 * @param  {Array} list 需要排序的数组对象,格式类似上面效果中的数据 * @return {Array} sort_list 排序后的数组对象 */</span><span class="token keyword">function</span> <span class="token function">name_sort</span><span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> w_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//字母开头</span>    <span class="token keyword">let</span> n_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//数字 or 符号</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> first_word <span class="token operator">=</span> <span class="token function">pinyin</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>nick_name<span class="token punctuation">,</span> <span class="token punctuation">{</span>            style<span class="token operator">:</span> pinyin<span class="token punctuation">.</span><span class="token constant">STYLE_FIRST_LETTER</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                first_word <span class="token operator">=</span> first_word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        first_word <span class="token operator">=</span> first_word<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                item<span class="token punctuation">.</span>nick_name_sort <span class="token operator">=</span> first_word <span class="token operator">+</span> item<span class="token punctuation">.</span>nick_name<span class="token punctuation">;</span><span class="token comment">//增加一个临时排序属性, 不然排序后还要处理原属性</span>        <span class="token keyword">let</span> regx <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">//正则匹配出字母开头的</span>        <span class="token keyword">let</span> flag <span class="token operator">=</span> regx<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>first_word<span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">&amp;&amp;</span> w_users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">||</span> n_users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据类型决定存入哪个数组</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//利用新增的nick_name_sort排序</span>    w_users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>nick_name_sort<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span>nick_name_sort<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n_users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>nick_name_sort<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">.</span>nick_name_sort<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sort_list <span class="token operator">=</span> w_users<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>n_users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sort_list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GD库实现图片合并</title>
      <link href="2019/11/15/Use-GD-library-to-implement-image-merge/"/>
      <url>2019/11/15/Use-GD-library-to-implement-image-merge/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> GD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue动态绑定ref</title>
      <link href="2019/11/13/Vue-dynamically-binds-ref/"/>
      <url>2019/11/13/Vue-dynamically-binds-ref/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下动态绑定及使用ref的方法</p></blockquote><span id="more"></span><h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><p><strong>需要在使用weex的<code>&lt;list&gt;</code>组件时,需要实现一个滚动到具体某一个<code>&lt;cell&gt;</code>的功能</strong></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="在for循环标签上动态绑定ref"><a href="#在for循环标签上动态绑定ref" class="headerlink" title="在for循环标签上动态绑定ref"></a>在for循环标签上动态绑定ref</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">:ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`item${index}`<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取ref并滚动到指定位置"><a href="#获取ref并滚动到指定位置" class="headerlink" title="获取ref并滚动到指定位置"></a>获取ref并滚动到指定位置</h3><h4 id="引入weex的dom-模块"><a href="#引入weex的dom-模块" class="headerlink" title="引入weex的dom 模块"></a>引入weex的dom 模块</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> dom <span class="token operator">=</span> weex<span class="token punctuation">.</span><span class="token function">requireModule</span><span class="token punctuation">(</span><span class="token string">'dom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="动态获取ref-并使用scrollToElement滚动到指定元素"><a href="#动态获取ref-并使用scrollToElement滚动到指定元素" class="headerlink" title="动态获取ref,并使用scrollToElement滚动到指定元素"></a>动态获取ref,并使用scrollToElement滚动到指定元素</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">message</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>dom<span class="token punctuation">.</span><span class="token function">scrollToElement</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> Vue </category>
          
          <category> uni-app </category>
          
          <category> WEEX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Js </tag>
            
            <tag> 随手记 </tag>
            
            <tag> Vue </tag>
            
            <tag> uni-app </tag>
            
            <tag> WEEX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用imagemagick实现两张或多张图片图片拼接 覆盖</title>
      <link href="2019/11/12/Using-imagemagick-to-achieve-the-splicing-of-two-or-more-pictures/"/>
      <url>2019/11/12/Using-imagemagick-to-achieve-the-splicing-of-two-or-more-pictures/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Imagemagick</code>是一个强大的图像处理库,号称命令行上的photoshop</p></blockquote><ul><li><a href="http://www.pulsating.cn/2019/11/15/Use-GD-library-to-implement-image-merge/">使用GD扩展实现和本篇文章相同的效果</a></li><li><a href="http://pulsating.cn/2019/11/12/install-imagick-extend-and-imagemagick-in-windows-php5.6/">php的imagick扩展和imagemagick的安装教程</a></li></ul><h5 id="1-问题场景"><a href="#1-问题场景" class="headerlink" title="1. 问题场景"></a>1. 问题场景</h5><p>  在进行手上的一个海报项目时,遇到了这样一个需求:<br>  如图,在用户制作一张海报后,最后保存的时候,图片主体<code>body</code>是用户制作的海报,<code>footer</code>是由左右两张二维码组成的,左边为公众号的带参数二维码,右侧是用户自定义的二维码,美工提供一张通用的footer模版,程序来负责动态将二维码替换上去,最终拼接成下面图片示例的样子</p><span id="more"></span><p><img src="https://upload-images.jianshu.io/upload_images/14618365-5507c013705956a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="海报示例"></p><h5 id="2-为什么使用imagemagick"><a href="#2-为什么使用imagemagick" class="headerlink" title="2. 为什么使用imagemagick"></a>2. 为什么使用imagemagick</h5><p>  整个项目后台使用的是PHP语言,既然涉及到图片处理,第一个想到的肯定是大名鼎鼎的<code>GD</code>库扩展,在使用gd库尝试后,因为性能的原因,可能是我使用的方式不对,合成一张图片的时间长的忍受不了,又果断放弃了,后面又想到使用<code>imagemagick</code>这个工具,试着使用iamgemagick来重写一遍,果然,速度快了许多</p><h5 id="3-实现思路"><a href="#3-实现思路" class="headerlink" title="3. 实现思路"></a>3. 实现思路</h5><p>  a. 将body和footer上下拼接起来<br>  b. 分别将获取的两个二维码图片根据坐标置入左下和右下<br><strong>注:我觉得先进行b步骤,再拼接,效率可能会高一丢丢,但是我也懒得测了,就没有改动</strong></p><h5 id="4-代码部分"><a href="#4-代码部分" class="headerlink" title="4. 代码部分"></a>4. 代码部分</h5><p>直接使用的是imagemagick的命令行指令,没有使用imagick扩展,已上线稳定使用</p><pre class="line-numbers language-none"><code class="language-none">public function merge_img($file_name, $ad_file_name, $user_qrcode,$template_id)    {        $body = $file_name;//这个是body的路径        $footer = APPPATH . '../static/img/footer.png';//footer是一张模板图        $qrcode = APPPATH . '../' . $user_qrcode;//右下角用户自定义的二维码        $param_qrcode = $this-&gt;param_qrcode($template_id);//左下角的带参数二维码,param_qrcode()方法返回其路径        $cmd = 'convert -append '.$header.' '.$footer.' '.$ad_file_name.'';//1.将body和footer拼接,因为body和footer是固定等宽的,所以直接拼接,+append为横向拼接,-append为纵向拼接        $result = exec($cmd);//执行        $cmd = 'composite -geometry +634+1093 '.$qrcode.' '.$ad_file_name.' '.$ad_file_name.'';//将用户二维码置入右下角,'+634+1093'为置入位置的坐标        $result = exec($cmd);        $cmd = 'composite -geometry +27+1093 '.$param_qrcode.' '.$ad_file_name.' '.$ad_file_name.'';//将带参数二维码置入左下角        $result = exec($cmd);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> imagick </tag>
            
            <tag> Imagemagick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5框架搭建</title>
      <link href="2019/11/12/Getting-started-with-thinkphp5/"/>
      <url>2019/11/12/Getting-started-with-thinkphp5/</url>
      
        <content type="html"><![CDATA[<p><code>thinkphp</code>基于<strong><code>MVC</code></strong>的方式来组织,MVC是一种经典的程序设计理念,此模式将你的项目分成三个部分,<code>模型层(model)</code>,<code>视图层(view)</code>,`控制层(controller),MVC为这三个三次的首字母缩写</p><ol><li>下载ThinkPHP框架<br>官网下载:<a href="http://www.thinkphp.cn/">http://www.thinkphp.cn/</a><br>thinkphp有核心包和完整包之分,我这里选择的是最新版5.0.21的完整版<br><strong>* 核心包</strong>:仅包含thinkphp运行的最主要文件,不包含扩展类,示例,文档<br><strong>* 完整包</strong>:核心包的基础上增加了扩展类,示例及文档</li></ol><p>下载后将文件解压到你的localhost根目录下,我的路径是:<code>D:\phpStudy\WWW</code>,然后重命名目录名为myphpstudy,方便我们使用<br><img src="https://upload-images.jianshu.io/upload_images/14618365-5ed1a4c8d854e68b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重命名"><br>接下来在浏览器地址栏输入:<code>http://localhost/mythinkphp/public/</code>,显示出如下内容,说明你的thinkphp框架可以正常使用了.</p><p>2.目录结构</p><pre class="line-numbers language-none"><code class="language-none">project  应用部署目录├─application           应用目录（可设置）│  ├─common             公共模块目录（可更改）│  ├─index              模块目录(可更改)│  │  ├─config.php      模块配置文件│  │  ├─common.php      模块函数文件│  │  ├─controller      控制器目录│  │  ├─model           模型目录│  │  ├─view            视图目录│  │  └─ ...            更多类库目录│  ├─command.php        命令行工具配置文件│  ├─common.php         应用公共（函数）文件│  ├─config.php         应用（公共）配置文件│  ├─database.php       数据库配置文件│  ├─tags.php           应用行为扩展定义文件│  └─route.php          路由配置文件├─extend                扩展类库目录（可定义）├─public                WEB 部署目录（对外访问目录）│  ├─static             静态资源存放目录(css,js,image)│  ├─index.php          应用入口文件│  ├─router.php         快速测试文件│  └─.htaccess          用于 apache 的重写├─runtime               应用的运行时目录（可写，可设置）├─vendor                第三方类库目录（Composer）├─thinkphp              框架系统目录│  ├─lang               语言包目录│  ├─library            框架核心类库目录│  │  ├─think           Think 类库包目录│  │  └─traits          系统 Traits 目录│  ├─tpl                系统模板目录│  ├─.htaccess          用于 apache 的重写│  ├─.travis.yml        CI 定义文件│  ├─base.php           基础定义文件│  ├─composer.json      composer 定义文件│  ├─console.php        控制台入口文件│  ├─convention.php     惯例配置文件│  ├─helper.php         助手函数文件（可选）│  ├─LICENSE.txt        授权说明文件│  ├─phpunit.xml        单元测试配置文件│  ├─README.md          README 文件│  └─start.php          框架引导文件├─build.php             自动生成定义文件（参考）├─composer.json         composer 定义文件├─LICENSE.txt           授权说明文件├─README.md             README 文件├─think                 命令行入口文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>Hello World<br>这时你可以将框架目录导入到你的IDE中了,方便我们编辑代码,下面我们来试着输出Hello World 吧!<br>找到并打开如图所示的文件位置,将其中代码进行修改<br><img src="https://upload-images.jianshu.io/upload_images/14618365-5505dd971cf24493.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="入口"></li></ol><p>修改后的代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace app\index\controller;class Index{    public function index()    {        return "Hello World";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时我们去浏览器地址栏输入<code>http://localhost/mythinkphp/public/</code>就可以看到我们改动后的内容了,是不是很简单呢!<br><img src="https://upload-images.jianshu.io/upload_images/14618365-4d4be39dc00c9209.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Hello World"></p>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> ThinkPHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 单色位图取模</title>
      <link href="2019/11/12/PHP-monochrome-bitmap-module/"/>
      <url>2019/11/12/PHP-monochrome-bitmap-module/</url>
      
        <content type="html"><![CDATA[<p><strong>2018-11-27日更新:</strong><br>  由于没有找到生成<code>.bmp</code>格式图片的好办法,改为使用<code>.wbmp</code>格式,转换和读取都改为<code>.wbmp</code>格式,原来的<code>bmp2hex</code>函数逻辑没有变化,改名为<code>wbmp2hex</code>,并不再使用<code>ImageCreateFromBMP</code>函数,可以收藏一下这个函数还是有用的,最新的代码我也提供了下载在文章末尾</p><span id="more"></span><h4 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段:"></a>准备阶段:</h4><ul><li><p><strong>pctoLCD2002</strong><br>网上找到的一款取模软件,可以读取<code>.bmp</code>图片并生成字模,当然我们还是要用代码来完成,这个只是起到了一个对照作用,我将它放在了我的网盘下供大家下载<br>链接：<a href="https://pan.baidu.com/s/12X9Jbctz7wp8_wOWJCmYdw">点我下载pctoLCD2002</a> 密码：<code>2lyl</code></p></li><li><p><strong>PHP GD扩展</strong><br>强大的PHP图像生成和处理扩展</p></li><li><p><strong>Windows自带画图工具</strong><br>主要用来生成<code>.bpm</code>格式的图片,目前我还没有找到好的用PHP将<code>.jpg</code>和<code>.png</code>图片转为单色<code>.bmp</code>格式图片的办法,暂时只好用画图工具来生成</p></li></ul><h4 id="操作步骤分解演示"><a href="#操作步骤分解演示" class="headerlink" title="操作步骤分解演示"></a>操作步骤分解演示</h4><h5 id="一-使用画图工具获得-bmp格式图片"><a href="#一-使用画图工具获得-bmp格式图片" class="headerlink" title="一. 使用画图工具获得.bmp格式图片"></a>一. 使用画图工具获得.bmp格式图片</h5><ol><li>使用画图工具打开一张事先准备好的图片,另存为<code>.bmp</code><strong>单色位图</strong>,这样我们就得到了一张<code>.bmp</code>格式的图片,白色背景,只有黑色</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14618365-b6d0e5ed3d0f89b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开图片"></p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-036a928b957300bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="另存为"></p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-675d730990fe5b64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=".bmp格式"></p><ol start="2"><li>或者我们自己动手来画一张,打开画图工具,调整画布大小为你需要的尺寸,示例为100*70像素,取消勾选保持纵横比,调整好后点击确定,然后我们可以用刷子随便画些什么在画布上,你喜欢就好,然后重复前面的<strong>另存为.bmp单色位图</strong>步骤</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14618365-58921a2bee3a6c6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="3"><li>pctoLCD2002也可以新建一幅.bmp图片,并且非常简单</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/14618365-d9a0e2dae4a0f54b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pctoLCD2002新建bmp文件"></p><h5 id="二-使用pctoLCD2002取模"><a href="#二-使用pctoLCD2002取模" class="headerlink" title="二. 使用pctoLCD2002取模"></a>二. 使用<strong><code>pctoLCD2002</code></strong>取模</h5><p>找到PCtoLCD2002.exe并双击打开</p><h6 id="1-规则解析-及本文配置项参考"><a href="#1-规则解析-及本文配置项参考" class="headerlink" title="1. 规则解析,及本文配置项参考"></a>1. 规则解析,及本文配置项参考</h6><p>在取字模之前我们先来说下PCtoLCD2002设置项和取模规则</p><ul><li><strong>配置信息:</strong></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14618365-3e9e397592bf5c44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pctoLCD2002设置项"></p><ul><li><p><strong>取模说明:</strong><br>a. 逐行式逐列式:顾名思义就是读取每张图片时取点时是逐行还是逐列的<br>b. 取模走向:<br><strong>逆向</strong>:从低位到高位<br><strong>顺向</strong>:从高位到低位<br>举例:<br><code>*</code>星号代表图中非空白的像素点,<code>_</code>代表空白的像素点,取八位为一个字节<br><code>* _ _ _ _ _ _ _</code>代表一个字节(为了方便查看,每个符号键我加入了一个空格,实际是没有的)<br>逆向即是从后往前写,表示为00000001<br>顺向即是从前往后写,表示为10000000<br>c. 输出数制:<br>这里选择十六进制,因需选择,不够我需要的是十六进制,后面的代码也只有十六进制的</p></li><li><p><strong>本文取模规则:</strong><br><code>逐行式</code> <code>顺向</code> <code>十六进制</code><br>从第一行开始,每行每隔8个像素点为一个字节,每行结尾最后不足8位,用0补满</p></li></ul><h6 id="2-生成字模"><a href="#2-生成字模" class="headerlink" title="2. 生成字模"></a>2. 生成字模</h6><p>设置好规则后,打开之前制作的.bmp图片,点击生成字模,这时下方会生成出十六进制串,如图:</p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-949d42ff637fec24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>但是这还不是我最后想要的格式,需要处理一下:</p><ul><li>去掉开始处和结束处的文件路径</li><li>去掉所有的标点符号<code>,</code>和<code>'{' '}'</code></li><li>去掉十六进制的标识部分,所有的<code>0x</code></li></ul><p>最后得到一串连贯的字符串,类似:</p><pre class="line-numbers language-none"><code class="language-none">0000000000000007F8000000000000000000000000003FFC00000000000000000000000000000003FF80000000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就是我们最终需要的部分了!下面我们用代码来实现这个功能:</p><h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决:"></a>问题解决:</h4><h5 id="一-实现过程及思路"><a href="#一-实现过程及思路" class="headerlink" title="一. 实现过程及思路"></a>一. 实现过程及思路</h5><h6 id="0-生成单色位图"><a href="#0-生成单色位图" class="headerlink" title="0. 生成单色位图"></a>0. 生成单色位图</h6><p>卡在这里好久,钻进了死胡同,其实.wbmp的图片完全符合我的要求:<br>GD库就可以将<code>jpg/png</code>转换成<code>wbmp</code>格式,使用时可以调节<code>threshold</code>参数,解释如下,我理解为精度不知道准不准确,也没有查到阀值到底是什么意思…</p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-a133d36f74a84e72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="threshold"></p><p>生成<code>.wbmp</code>格式图片代码示例:</p><pre class="line-numbers language-none"><code class="language-none">$filename = 'static/img/1.jpg';$path = 'static/img/11.wbmp';$image = getimagesize($filename);jpeg2wbmp($filename, $path, $image[1], $image[0], 5);//threshold == 5时,和给的软件转换后结果完全一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>图片样式:</p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-1db851391b978ca4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=".wbmp格式"></p><h6 id="1-读取-wbmp格式图片-原读取-bmp格式"><a href="#1-读取-wbmp格式图片-原读取-bmp格式" class="headerlink" title="1. 读取.wbmp格式图片(原读取.bmp格式)"></a>1. 读取.wbmp格式图片(原读取.bmp格式)</h6><p>使用gd库的imagecreatefromwbmp函数:</p><pre class="line-numbers language-none"><code class="language-none">$filename = 'static/img/11.wbmp';$im = imagecreatefromwbmp($filename);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装好GD库扩展后,我发现gd库只能读取.wbmp文件,并不支持.bmp文件,我的gd库版本信息如下<code>gd_info()</code>,经过一番google,找到了一个可以使用的读取.bmp的函数<code>ImageCreateFromBMP()</code>,感谢前辈</p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-e4ddf9d0efeb1393.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="gd_info()"></p><h6 id="2-逐个像素读取"><a href="#2-逐个像素读取" class="headerlink" title="2. 逐个像素读取"></a>2. 逐个像素读取</h6><p>可以读取.wbmp格式了,我们该如何能得出每个像素的颜色值呢?<br>通过查看gd库文档过程,我发现一个函数<code>imagecolorat()</code>,可以根据传入的位置,获取每个像素的索引值<br>使用示例:</p><pre class="line-numbers language-none"><code class="language-none">// 取得一点的颜色$file_name = '';//wbmp图片路径$im = imagecreatefromwbmp($file_name);//读取wbmp格式$start_x = 5;//行,从0开始$start_y = 10;//列,从0开始$color_index = imagecolorat($im, $start_x, $start_y);print_r($color_index);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-获取图片宽高"><a href="#3-获取图片宽高" class="headerlink" title="3. 获取图片宽高"></a>3. 获取图片宽高</h6><p>第2步中可以获取每个像素中的值了,但是我们总不能每个点都手动传入,这时我们就需要获取图片的宽高了</p><p>gd库中有获取图片宽高的函数<code>imagesx()</code>和<code>imagesy()</code>,代码示例:</p><pre class="line-numbers language-none"><code class="language-none">$im = imagecreatefromwbmp($file_name);//读取bmp格式,非gd库$width = imagesx($im);$height = imagesy($im);echo $width.'*'.$height;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>到这里,最主要的部分都已经可以获取到了,后面就是逻辑部分了(代码中可以看到具体实现方式):</p><ul><li>根据图片的宽高,逐行逐点读取每个像素的值,每8位组合成1个字节,然后取模,再转为16进制</li><li>检测每一行的最后是否满足8个像素,不足则用0补满</li><li>最终将每一行组合到一起,组成16进制字符串</li></ul><h5 id="二-源码"><a href="#二-源码" class="headerlink" title="二. 源码"></a>二. 源码</h5><p><strong>整个过程可以大概分为三步完成,你可以根据自己的需求参考或者直接copy使用,如果对你有帮助,希望可以点个赞,转载请注明本篇文章链接地址及作者,谢谢!</strong></p><ul><li>将普通<code>jpg/png</code>格式转为<code>.wbmp</code><pre class="line-numbers language-none"><code class="language-none">$filename = 'static/img/1.jpg';$path = 'static/img/11.wbmp';$image = getimagesize($filename);jpeg2wbmp($filename, $path, $image[1], $image[0], 5);//threshold == 5时,和给的软件转换后结果完全一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>读取<code>.wbmp</code>格式图片<pre class="line-numbers language-none"><code class="language-none">$filename = 'static/img/11.wbmp';$im = imagecreatefromwbmp($filename);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>将<code>.wbmp</code>转为<code>hex_str</code><pre class="line-numbers language-none"><code class="language-none">/**     * @param $im     * @return string     * Commented by liu     */    public function wbmp2hex($im)    {        $width = imagesx($im);        $height = imagesy($im);        $num = $width % 8;        $hex_str = '';        for ($start_y = 0; $start_y &lt; $height; $start_y++) {            $binary_str = '';            for ($start_x = 0; $start_x &lt; $width; $start_x++) {                $color_index = imagecolorat($im, $start_x, $start_y);//指定像素的索引值                $binary_str .= $color_index == 1 ? 1 : 0;                if ((1 + $start_x) % 8 == 0 &amp;&amp; $start_x != 0) {//每隔8位转换1次                    $hex = (string)dechex(bindec($binary_str));                    $hex = strlen($hex) == 1 ? '0' . $hex : $hex;//补0                    $hex_str .= $hex;                    $binary_str = '';                }            }            //这时如果$binary_str不为空,说明需要向后补0            if ($num) {                for ($i = 0; $i &lt; 8 - $num; $i++) {                    $binary_str .= 0;                }                $hex = (string)dechex(bindec($binary_str));                $hex = strlen($hex) == 1 ? '0' . $hex : $hex;//补0                $hex_str .= $hex;            }        }        $hex_str = strtoupper($hex_str);//转为大写        return $hex_str;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>最后附上读取<code>.bmp</code>格式图片的函数:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php/** * Commented by liu * Create on 2018/11/23 17:51 * Class Image_api */class Image_api{    function __construct (){    }    /**     * ImageCreateFromBMP函数,读取bmp格式图片     * 注:phpGD扩展中没有ImageCreateFromBMP函数,只有ImageCreateFromWBMP     * @param $filename     * @return bool|resource     * Commented by liu     */    function ImageCreateFromBMP($filename)    {        //Ouverture du fichier en mode binaire        if (!$f1 = fopen($filename, "rb"))            return FALSE;        //1 : Chargement des ent�tes FICHIER        $FILE = unpack("vfile_type/Vfile_size/Vreserved/Vbitmap_offset", fread($f1, 14));        if ($FILE['file_type'] != 19778)            return FALSE;        //2 : Chargement des ent�tes BMP        $BMP = unpack('Vheader_size/Vwidth/Vheight/vplanes/vbits_per_pixel' .            '/Vcompression/Vsize_bitmap/Vhoriz_resolution' .            '/Vvert_resolution/Vcolors_used/Vcolors_important', fread($f1, 40));        $BMP['colors'] = pow(2, $BMP['bits_per_pixel']);        if ($BMP['size_bitmap'] == 0)            $BMP['size_bitmap'] = $FILE['file_size'] - $FILE['bitmap_offset'];        $BMP['bytes_per_pixel'] = $BMP['bits_per_pixel'] / 8;        $BMP['bytes_per_pixel2'] = ceil($BMP['bytes_per_pixel']);        $BMP['decal'] = ($BMP['width'] * $BMP['bytes_per_pixel'] / 4);        $BMP['decal'] -= floor($BMP['width'] * $BMP['bytes_per_pixel'] / 4);        $BMP['decal'] = 4 - (4 * $BMP['decal']);        if ($BMP['decal'] == 4)            $BMP['decal'] = 0;        //3 : Chargement des couleurs de la palette        $PALETTE = array();        if ($BMP['colors'] &lt; 16777216) {            $PALETTE = unpack('V' . $BMP['colors'], fread($f1, $BMP['colors'] * 4));        }        //4 : Cr�ation de l'image        $IMG = fread($f1, $BMP['size_bitmap']);        $VIDE = chr(0);        $res = imagecreatetruecolor($BMP['width'], $BMP['height']);        $P = 0;        $Y = $BMP['height'] - 1;        while ($Y &gt;= 0) {            $X = 0;            while ($X &lt; $BMP['width']) {                if ($BMP['bits_per_pixel'] == 24)                    $COLOR = unpack("V", substr($IMG, $P, 3) . $VIDE);                elseif ($BMP['bits_per_pixel'] == 16) {                    $COLOR = unpack("n", substr($IMG, $P, 2));                    $COLOR[1] = $PALETTE[$COLOR[1] + 1];                } elseif ($BMP['bits_per_pixel'] == 8) {                    $COLOR = unpack("n", $VIDE . substr($IMG, $P, 1));                    $COLOR[1] = $PALETTE[$COLOR[1] + 1];                } elseif ($BMP['bits_per_pixel'] == 4) {                    $COLOR = unpack("n", $VIDE . substr($IMG, floor($P), 1));                    if (($P * 2) % 2 == 0)                        $COLOR[1] = ($COLOR[1] &gt;&gt; 4);                    else                        $COLOR[1] = ($COLOR[1] &amp; 0x0F);                    $COLOR[1] = $PALETTE[$COLOR[1] + 1];                } elseif ($BMP['bits_per_pixel'] == 1) {                    $COLOR = unpack("n", $VIDE . substr($IMG, floor($P), 1));                    if (($P * 8) % 8 == 0)                        $COLOR[1] = $COLOR[1] &gt;&gt; 7;                    elseif (($P * 8) % 8 == 1)                        $COLOR[1] = ($COLOR[1] &amp; 0x40) &gt;&gt; 6;                    elseif (($P * 8) % 8 == 2)                        $COLOR[1] = ($COLOR[1] &amp; 0x20) &gt;&gt; 5;                    elseif (($P * 8) % 8 == 3)                        $COLOR[1] = ($COLOR[1] &amp; 0x10) &gt;&gt; 4;                    elseif (($P * 8) % 8 == 4)                        $COLOR[1] = ($COLOR[1] &amp; 0x8) &gt;&gt; 3;                    elseif (($P * 8) % 8 == 5)                        $COLOR[1] = ($COLOR[1] &amp; 0x4) &gt;&gt; 2;                    elseif (($P * 8) % 8 == 6)                        $COLOR[1] = ($COLOR[1] &amp; 0x2) &gt;&gt; 1;                    elseif (($P * 8) % 8 == 7)                        $COLOR[1] = ($COLOR[1] &amp; 0x1);                    $COLOR[1] = $PALETTE[$COLOR[1] + 1];                } else                    return FALSE;                imagesetpixel($res, $X, $Y, $COLOR[1]);                $X++;                $P += $BMP['bytes_per_pixel'];            }            $Y--;            $P += $BMP['decal'];        }        //Fermeture du fichier        fclose($f1);        return $res;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> GD </category>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> GD </tag>
            
            <tag> pctoLCD2002 </tag>
            
            <tag> bmp </tag>
            
            <tag> 位图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sphinx Linux 下安装过程</title>
      <link href="2019/11/12/Sphinx-Linux-install/"/>
      <url>2019/11/12/Sphinx-Linux-install/</url>
      
        <content type="html"><![CDATA[<p>  之前记录过一篇<a href="https://www.jianshu.com/p/1be12635ccbb">Sphinx在Windows上的安装步骤</a>,这篇当然就是Linux系统的安装步骤啦</p><span id="more"></span><p><strong>1. 下载sphinx包</strong><br>下载的是当前最新版3.1.1,我将压缩包存在了<code>/usr/local/src/</code>目录下<br><code>wget -q http://sphinxsearch.com/files/sphinx-3.1.1-612d99f-linux-amd64.tar.gz</code> 下载时间可能比较长需要耐心等待一会</p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-404c0f04014aa56d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="压缩包名称"></p><p><strong>2. 解压</strong><br><code>tar zxf sphinx-3.1.1-612d99f-linux-amd64.tar.gz</code>解压<br><code>mv sphinx-3.1.1 sphinx</code> 重命名一下,方便操作吧<br><code>cd sphinx</code> 进入看下目录列表,其中var是需要后面创建的,请继续往下看<br><img src="https://upload-images.jianshu.io/upload_images/14618365-33d59a1897fe1350.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解压后的目录"></p><p><strong>3. 编辑配置文件</strong><br>配置文件在<code>etc</code>目录下,有两个配置文件示例,其中<code>sphinx.conf</code>是完整版的配置项,并且有英文注释,有兴趣的可以了解一下,我们这里使用下面的<code>sphinx.conf.dist</code>简洁版<br>复制一份<code>sphinx.conf.dist</code>到<code>bin</code>目录下,重命名为<code>sphinx.conf</code><br><code>vi sphinx.conf</code> 打开编辑配置文件,这里我直接贴出我自己的配置内容,可以正常跑起来的,关于其他配置项可以看我的另外一篇<a href="https://www.jianshu.com/p/be12aa194f15">Sphinx 配置文件sphinx.conf配置项全解析</a></p><pre class="line-numbers language-none"><code class="language-none">//数据源配置,也就是数据来源source item{        type                    = mysql        sql_host                = HOST //数据库        sql_user                = USER //用户名        sql_pass                = PASS //数据库密码        sql_db                  = poster 数据库名称        sql_port                = 3306  # optional, default is 3306        sql_query_pre           = SET NAMES utf8         sql_query               = \                SELECT id,name,UNIX_TIMESTAMP(ctime) \                FROM item        sql_attr_timestamp  = ctime}//索引配置index item{        source                  = item //数据源        path                    = /usr/local/src/sphinx/var/data 索引存放目录        min_word_len            = 1         ngram_len               = 1        ngram_chars             = U+3000..U+2FA1F}indexer{        mem_limit               = 128M}//搜索服务searchd{        listen                  = 9312        listen                  = 9306:mysql41        log                     = /usr/local/src/sphinx/var/log/searchd.log        query_log               = /usr/local/src/sphinx/var/log/query.log        read_timeout            = 5        max_children            = 30        pid_file                = /usr/local/src/sphinx/var/log/searchd.pid        seamless_rotate         = 1        preopen_indexes         = 1        unlink_old              = 1        binlog_path             = /usr/local/src/sphinx/var/data}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件中需要配置几个目录.分别是<strong>log</strong>,<strong>query_log</strong>,<strong>pid_file</strong>,<strong>binlog_path</strong>,我们回到sphinx下,新建一个目录var,然后进入再新建一个data目录和一个log目录<br><code>mkdir var</code><br><code>cd var</code><br><code>mkdir data</code><br><code>mkdir log</code><br>如图:<br><img src="https://upload-images.jianshu.io/upload_images/14618365-252597381f2da18b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="var目录"></p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-87dec842ab8e3fc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="4"><li>建立索引<br>首先进入到<code>bin</code>目录下,执行下面的指令<br><code>./indexer -c sphinx.conf item</code> <strong>item</strong>为刚才在配置文件中建立的索引名称</li></ol><blockquote><p>这里有个大坑,耽误了好久时间,我用的是ubuntu的系统,当我在执行<code>./indexer -c sphinx.conf item</code>时,出现了一个错误:<strong><em>sql_connect: failed to load libmysqlclient (or libmariadb)</em></strong>,加载libmysqlclient失败,然后我在/usr/lib/x86_64-linux-gnu/目录下发现了我的libmysqlclient,并不是没有安装的<br><img src="https://upload-images.jianshu.io/upload_images/14618365-05c1f3a9443d1e3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="libmysqlclient"><br>然后我通过google试着找出问题的答案,然而只有两个相关结果,解决方式是建立软链接,并且将libmysqlclient所在的目录加入到环境变量,我照做了之后发现问题并没有顺利解决,最后,我试着下载所有的依赖<br><code>apt-get install libmysqlclient18 libmysqlclient-dev libmysqlcppconn7 libmysqlcppconn-dev</code><br>等待完成,然后忽略error,执行<br><code>apt-get update</code><br>等待结束后,再执行建立索引命令,解决了这个问题</p></blockquote><p><strong>5. 开启搜索服务</strong><br><code>./searchd</code></p>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> Mysql </category>
          
          <category> Sphinx </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> Mysql </tag>
            
            <tag> Sphinx </tag>
            
            <tag> Linux </tag>
            
            <tag> Sphinxapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sphinx 配置文件sphinx.conf配置项全解析</title>
      <link href="2019/11/12/Sphinx-sphinx.conf-analysis/"/>
      <url>2019/11/12/Sphinx-sphinx.conf-analysis/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>source</strong>：数据源，数据是从什么地方来的。</li><li><strong>index</strong>：索引，当有数据源之后，从数据源处构建索引。索引实际上就是相当于一个字典检索。有了整本字典内容以后，才会有字典检索。</li><li><strong>searchd</strong>：提供搜索查询服务。它一般是以deamon的形式运行在后台的。</li><li><strong>indexer</strong>：构建索引的服务。当要重新构建索引的时候，就是调用indexer这个命令。</li></ul><span id="more"></span><pre class="line-numbers language-none"><code class="language-none">// 数据源src1source src1{    // 说明数据源的类型。数据源的类型可以是：mysql，pgsql，mssql，xmlpipe，odbc，python    // 有人会奇怪，python是一种语言怎么可以成为数据源呢？    // python作为一种语言，可以操作任意其他的数据来源来获取数据，更多数据请看：（http://www.coreseek.cn/products-install/python/）    type            = mysql        // 下面是sql数据库特有的端口，用户名，密码，数据库名等。    sql_host        = localhost    sql_user        = test    sql_pass        =    sql_db          = test    sql_port        = 3306    // 如果是使用unix sock连接可以使用这个。    # sql_sock      = /tmp/mysql.sock    // indexer和mysql之间的交互，需要考虑到效率和安全性。    // 比如考虑到效率，他们两者之间的交互需要使用压缩协议；考虑到安全，他们两者之间的传输需要使用ssl    // 那么这个参数就代表这个意思，0/32/2048/32768  无/使用压缩协议/握手后切换到ssl/Mysql 4.1版本身份认证。    # mysql_connect_flags   = 32    // 当mysql_connect_flags设置为2048（ssl）的时候，下面几个就代表ssl连接所需要使用的几个参数。    # mysql_ssl_cert        = /etc/ssl/client-cert.pem    # mysql_ssl_key     = /etc/ssl/client-key.pem    # mysql_ssl_ca      = /etc/ssl/cacert.pem    // mssql特有，是否使用windows登陆    # mssql_winauth     = 1    // mssql特有，是使用unicode还是单字节数据。    # mssql_unicode     = 1 # request Unicode data from server    // odbc的dsn串    # odbc_dsn      = DBQ=C:\data;DefaultDir=C:\data;Driver={Microsoft Text Driver (*.txt; *.csv)};        // sql某一列的缓冲大小，一般是针对字符串来说的。    // 为什么要有这么一种缓冲呢？    // 有的字符串，虽然长度很长，但是实际上并没有使用那么长的字符，所以在Sphinx并不会收录所有的字符，而是给每个属性一个缓存作为长度限制。    // 默认情况下非字符类型的属性是1KB，字符类型的属性是1MB。    // 而如果想要配置这个buffer的话，就可以在这里进行配置了。    # sql_column_buffers    = content=12M, comments=1M    // indexer的sql执行前需要执行的操作。    # sql_query_pre     = SET NAMES utf8    # sql_query_pre     = SET SESSION query_cache_type=OFF    // indexer的sql执行语句    sql_query       = \        SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content \        FROM documents    // 有的时候有多个表，我们想要查询的字段在其他表中。这个时候就需要对sql_query进行join操作。    // 而这个join操作可能非常慢，导致建立索引的时候特别慢，那么这个时候，就可以考虑在sphinx端进行join操作了。    // sql_joined_field是增加一个字段，这个字段是从其他表查询中查询出来的。    // 这里封号后面的查询语句是有要求的，如果是query，则返回id和查询字段，如果是payload-query，则返回id，查询字段和权重。    // 并且这里的后一个查询需要按照id进行升序排列。    # sql_joined_field  = tags from query; SELECT docid, CONCAT('tag',tagid) FROM tags ORDER BY docid ASC    # sql_joined_field  = wtags from payload-query; SELECT docid, tag, tagweight FROM tags ORDER BY docid ASC    // 外部文件字段，意思就是一个表中，有一个字段存的是外部文件地址，但是实际的字段内容在文件中。比如这个字段叫做content_file_path。    // 当indexer建立索引的时候，查到这个字段，就读取这个文件地址，然后加载，并进行分词和索引建立等操作。    # sql_file_field        = content_file_path    // 当数据源数据太大的时候，一个sql语句查询下来往往很有可能锁表等操作。    // 那么我么就可以使用多次查询，那么这个多次查询就需要有个范围和步长，sql_query_range和sql_range_step就是做这个使用的。    // 获取最大和最小的id，然后根据步长来获取数据。比如下面的例子，如果有4500条数据，这个表建立索引的时候就会进行5次sql查询。     // 而5次sql查询每次的间隔时间是使用sql_ranged_rhrottle来进行设置的。单位是毫秒。    # sql_query_range       = SELECT MIN(id),MAX(id) FROM documents    # sql_range_step        = 1000    # sql_ranged_throttle   = 0    // 下面都是些不同属性的数据了    // 先要了解属性的概念：属性是存在索引中的，它不进行全文索引，但是可以用于过滤和排序。    // uint无符号整型属性    sql_attr_uint       = group_id        // bool属性    # sql_attr_bool     = is_deleted        // 长整型属性    # sql_attr_bigint       = my_bigint_id        // 时间戳属性，经常被用于做排序    sql_attr_timestamp  = date_added    // 字符串排序属性。一般我们按照字符串排序的话，我们会将这个字符串存下来进入到索引中，然后在查询的时候比较索引中得字符大小进行排序。    // 但是这个时候索引就会很大，于是我们就想到了一个方法，我们在建立索引的时候，先将字符串值从数据库中取出，暂存，排序。    // 然后给排序后的数组分配一个序号，然后在建立索引的时候，就将这个序号存入到索引中去。这样在查询的时候也就能完成字符串排序的操作。    // 这，就是这个字段的意义。    # sql_attr_str2ordinal  = author_name    // 浮点数属性，经常在查询地理经纬度的时候会用到。    # sql_attr_float        = lat_radians    # sql_attr_float        = long_radians    // 多值属性（MVA）    // 试想一下，有一个文章系统，每篇文章都有多个标签，这个文章就叫做多值属性。    // 我要对某个标签进行查询过滤，那么在建立查询的时候就应该把这个标签的值放入到索引中。    // 这个字段，sql_attr_multi就是用来做这个事情的。    # sql_attr_multi        = uint tag from query; SELECT docid, tagid FROM tags    # sql_attr_multi        = uint tag from ranged-query; \    #   SELECT docid, tagid FROM tags WHERE id&gt;=$start AND id&lt;=$end; \    #   SELECT MIN(docid), MAX(docid) FROM tags    // 字符串属性。    # sql_attr_string       = stitle    // 文档词汇数记录属性。比如下面就是在索引建立的时候增加一个词汇数的字段    # sql_attr_str2wordcount    = stitle    // 字符串字段，可全文搜索，可返回原始文本信息。    # sql_field_string  = author    // 文档词汇数记录字段，可全文搜索，可返回原始信息    # sql_field_str2wordcount   = title    // 取后查询，在sql_query执行后立即操作。    // 它和sql_query_post_index的区别就是执行时间不同    // sql_query_post是在sql_query执行后执行，而sql_query_post_index是在索引建立完成后才执行。    // 所以如果要记录最后索引执行时间，那么应该在sql_query_post_index中执行。    # sql_query_post        =    // 参考sql_query_post的说明。    # sql_query_post_index  = REPLACE INTO counters ( id, val ) \    #   VALUES ( 'max_indexed_id', $maxid )    // 命令行获取信息查询。    // 什么意思呢？    // 我们进行索引一般只会返回主键id，而不会返回表中的所有字段。    // 但是在调试的时候，我们一般需要返回表中的字段，那这个时候，就需要使用sql_query_info。    // 同时这个字段只在控制台有效，在api中是无效的。    sql_query_info      = SELECT * FROM documents WHERE id=$id    // 比如有两个索引，一个索引比较旧，一个索引比较新，那么旧索引中就会有数据是旧的。    // 当我要对两个索引进行搜索的时候，哪些数据要按照新的索引来进行查询呢。    // 这个时候就使用到了这个字段了。    // 这里的例子（http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html#conf-sql-query-killlist）给的非常清晰了。    # sql_query_killlist    = SELECT id FROM documents WHERE edited&gt;=@last_reindex    // 下面几个压缩解压的配置都是为了一个目的：让索引重建的时候不要影响数据库的性能表现。    // SQL数据源解压字段设置    # unpack_zlib       = zlib_column    // MySQL数据源解压字段设置    # unpack_mysqlcompress  = compressed_column    # unpack_mysqlcompress  = compressed_column_2    // MySQL数据源解压缓冲区设置    # unpack_mysqlcompress_maxsize  = 16M    // xmlpipe的数据源就是一个xml文档    # type          = xmlpipe    // 读取数据源的命令    # xmlpipe_command       = cat /home/yejianfeng/instance/coreseek/var/test.xml    // 字段    # xmlpipe_field     = subject    # xmlpipe_field     = content    // 属性    # xmlpipe_attr_timestamp    = published    # xmlpipe_attr_uint = author_id    // UTF-8修复设置    // 只适用xmlpipe2数据源，数据源中有可能有非utf-8的字符，这个时候解析就有可能出现问题    // 如果设置了这个字段，非utf-8序列就会全部被替换为空格。    # xmlpipe_fixup_utf8    = 1}// sphinx的source是有继承这么一种属性的，意思就是除了父source之外，这个source还有这个特性source src1throttled : src1{    sql_ranged_throttle = 100}// 索引test1index test1{    // 索引类型，包括有plain，distributed和rt。分别是普通索引/分布式索引/增量索引。默认是plain。    # type          = plain    // 索引数据源    source          = src1    // 索引文件存放路径    path            = /home/yejianfeng/instance/coreseek/var/data/test1    // 文档信息的存储模式，包括有none,extern,inline。默认是extern。    // docinfo指的就是数据的所有属性（field）构成的一个集合。    // 首先文档id是存储在一个文件中的（spa）    // 当使用inline的时候，文档的属性和文件的id都是存放在spa中的，所以进行查询过滤的时候，不需要进行额外操作。    // 当使用extern的时候，文档的属性是存放在另外一个文件（spd）中的，但是当启动searchd的时候，会把这个文件加载到内存中。    // extern就意味着每次做查询过滤的时候，除了查找文档id之外，还需要去内存中根据属性进行过滤。    // 但是即使这样，extern由于文件大小小，效率也不低。所以不是有特殊要求，一般都是使用extern    docinfo         = extern    // 缓冲内存锁定。    // searchd会讲spa和spi预读取到内存中。但是如果这部分内存数据长时间没有访问，则它会被交换到磁盘上。    // 设置了mlock就不会出现这个问题，这部分数据会一直存放在内存中的。    mlock           = 0    // 词形处理器    // 词形处理是什么意思呢？比如在英语中，dogs是dog的复数，所以dog是dogs的词干，这两个实际上是同一个词。    // 所以英语的词形处理器会讲dogs当做dog来进行处理。    morphology      = none    // 词形处理有的时候会有问题，比如将gps处理成gp，这个设置可以允许根据词的长度来决定是否要使用词形处理器。    # min_stemming_len  = 1    // 词形处理后是否还要检索原词？    # index_exact_words = 1    // 停止词，停止词是不被索引的词。    # stopwords     = /home/yejianfeng/instance/coreseek/var/data/stopwords.txt    // 自定义词形字典    # wordforms     = /home/yejianfeng/instance/coreseek/var/data/wordforms.txt    // 词汇特殊处理。    // 有的一些特殊词我们希望把它当成另外一个词来处理。比如，c++ =&gt; cplusplus来处理。    # exceptions        = /home/yejianfeng/instance/coreseek/var/data/exceptions.txt    // 最小索引词长度，小于这个长度的词不会被索引。    min_word_len        = 1    // 字符集编码类型，可以为sbcs,utf-8。对于Coreseek，还可以有zh_cn.utf-8,zh_ch.gbk,zh_ch.big5    charset_type        = sbcs    // 字符表和大小写转换规则。对于Coreseek，这个字段无效。    # 'sbcs' default value is    # charset_table     = 0..9, A..Z-&gt;a..z, _, a..z, U+A8-&gt;U+B8, U+B8, U+C0..U+DF-&gt;U+E0..U+FF, U+E0..U+FF    #    # 'utf-8' default value is    # charset_table     = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F    // 忽略字符表。在忽略字符表中的前后词会被连起来当做一个单独关键词处理。    # ignore_chars      = U+00AD    // 是否启用通配符，默认为0，不启用    # enable_star       = 1    // min_prefix_len,min_infix_len,prefix_fields,infix_fields都是在enable_star开启的时候才有效果。    // 最小前缀索引长度    // 为什么要有这个配置项呢？    // 首先这个是当启用通配符配置启用的前提下说的，前缀索引使得一个关键词产生了多个索引项，导致索引文件体积和搜索时间增加巨大。    // 那么我们就有必要限制下前缀索引的前缀长度，比如example，当前缀索引长度设置为5的时候，它只会分解为exampl，example了。    # min_prefix_len        = 0    // 最小索引中缀长度。理解同上。    # min_infix_len     = 0    // 前缀索引和中缀索引字段列表。并不是所有的字段都需要进行前缀和中缀索引。    # prefix_fields     = filename    # infix_fields      = url, domain    // 词汇展开    // 是否尽可能展开关键字的精确格式或者型号形式    # expand_keywords       = 1    // N-Gram索引的分词技术    // N-Gram是指不按照词典，而是按照字长来分词，这个主要是针对非英文体系的一些语言来做的（中文、韩文、日文）    // 对coreseek来说，这两个配置项可以忽略。    # ngram_len     = 1    # ngram_chars       = U+3000..U+2FA1F    // 词组边界符列表和步长    // 哪些字符被看做分隔不同词组的边界。    # phrase_boundary       = ., ?, !, U+2026 # horizontal ellipsis    # phrase_boundary_step  = 100    // 混合字符列表    # blend_chars       = +, &amp;, U+23    # blend_mode        = trim_tail, skip_pure    // html标记清理，是否从输出全文数据中去除HTML标记。    html_strip      = 0    // HTML标记属性索引设置。    # html_index_attrs  = img=alt,title; a=title;    // 需要清理的html元素    # html_remove_elements  = style, script    // searchd是预先打开全部索引还是每次查询再打开索引。    # preopen           = 1    // 字典文件是保持在磁盘上还是将他预先缓冲在内存中。    # ondisk_dict       = 1    // 由于在索引建立的时候，需要建立临时文件和和副本，还有旧的索引    // 这个时候磁盘使用量会暴增，于是有个方法是临时文件重复利用    // 这个配置会极大减少建立索引时候的磁盘压力，代价是索引建立速度变慢。    # inplace_enable        = 1    # inplace_hit_gap       = 0 # preallocated hitlist gap size    # inplace_docinfo_gap   = 0 # preallocated docinfo gap size    # inplace_reloc_factor  = 0.1 # relocation buffer size within arena    # inplace_write_factor  = 0.1 # write buffer size within arena    // 在经过过短的位置后增加位置值    # overshort_step        = 1    // 在经过 停用词 处后增加位置值    # stopword_step     = 1    // 位置忽略词汇列表    # hitless_words     = all    # hitless_words     = hitless.txt    // 是否检测并索引句子和段落边界    # index_sp          = 1    // 字段内需要索引的HTML/XML区域的标签列表    # index_zones       = title, h*, th}index test1stemmed : test1{    path            = /home/yejianfeng/instance/coreseek/var/data/test1stemmed    morphology      = stem_en}index dist1{    type            = distributed    local           = test1    local           = test1stemmed    // 分布式索引（distributed index）中的远程代理和索引声明    agent           = localhost:9313:remote1    agent           = localhost:9314:remote2,remote3    # agent         = /var/run/searchd.sock:remote4    // 分布式索引（ distributed index）中声明远程黑洞代理    # agent_blackhole       = testbox:9312:testindex1,testindex2    // 远程代理的连接超时时间    agent_connect_timeout   = 1000    // 远程查询超时时间    agent_query_timeout = 3000}index rt{    type            = rt    path            = /home/yejianfeng/instance/coreseek/var/data/rt    // RT索引内存限制    # rt_mem_limit      = 512M    // 全文字段定义    rt_field        = title    rt_field        = content    // 无符号整数属性定义    rt_attr_uint        = gid    // 各种属性定义    # rt_attr_bigint        = guid    # rt_attr_float     = gpa    # rt_attr_timestamp = ts_added    # rt_attr_string        = author}indexer{    // 建立索引的时候，索引内存限制    mem_limit       = 32M    // 每秒最大I/O操作次数，用于限制I/O操作    # max_iops      = 40    // 最大允许的I/O操作大小，以字节为单位，用于I/O节流    # max_iosize        = 1048576    // 对于XMLLpipe2数据源允许的最大的字段大小，以字节为单位    # max_xmlpipe2_field    = 4M    // 写缓冲区的大小，单位是字节    # write_buffer      = 1M    // 文件字段可用的最大缓冲区大小，字节为单位    # max_file_field_buffer = 32M}// 搜索服务配置searchd{    # listen            = 127.0.0.1    # listen            = 192.168.0.1:9312    # listen            = 9312    # listen            = /var/run/searchd.sock    // 监听端口    listen          = 9312    listen          = 9306:mysql41    // 监听日志    log         = /home/yejianfeng/instance/coreseek/var/log/searchd.log    // 查询日志    query_log       = /home/yejianfeng/instance/coreseek/var/log/query.log    // 客户端读超时时间     read_timeout        = 5    // 客户端持久连接超时时间，即客户端读一次以后，持久连接，然后再读一次。中间这个持久连接的时间。    client_timeout      = 300    // 并行执行搜索的数目    max_children        = 30    // 进程id文件    pid_file        = /home/yejianfeng/instance/coreseek/var/log/searchd.pid    // 守护进程在内存中为每个索引所保持并返回给客户端的匹配数目的最大值    max_matches     = 1000    // 无缝轮转。防止 searchd 轮换在需要预取大量数据的索引时停止响应    // 当进行索引轮换的时候，可能需要消耗大量的时间在轮换索引上。    // 但是启动了无缝轮转，就以消耗内存为代价减少轮转的时间    seamless_rotate     = 1    // 索引预开启，是否强制重新打开所有索引文件    preopen_indexes     = 1    // 索引轮换成功之后，是否删除以.old为扩展名的索引拷贝    unlink_old      = 1    // 属性刷新周期    // 就是使用UpdateAttributes()更新的文档属性每隔多少时间写回到磁盘中。    # attr_flush_period = 900    // 索引字典存储方式    # ondisk_dict_default   = 1    // 用于多值属性MVA更新的存储空间的内存共享池大小    mva_updates_pool    = 1M    // 网络通讯时允许的最大的包的大小    max_packet_size     = 8M    // 崩溃日志文件    # crash_log_path        = /home/yejianfeng/instance/coreseek/var/log/crash    // 每次查询允许设置的过滤器的最大个数    max_filters     = 256    // 单个过滤器允许的值的最大个数    max_filter_values   = 4096    // TCP监听待处理队列长度    # listen_backlog        = 5    // 每个关键字的读缓冲区的大小    # read_buffer       = 256K    // 无匹配时读操作的大小    # read_unhinted     = 32K    // 每次批量查询的查询数限制    max_batch_queries   = 32    // 每个查询的公共子树文档缓存大小    # subtree_docs_cache    = 4M    // 每个查询的公共子树命中缓存大小    # subtree_hits_cache    = 8M    // 多处理模式（MPM）。 可选项；可用值为none、fork、prefork，以及threads。 默认在Unix类系统为form，Windows系统为threads。    workers         = threads # for RT to work    // 并发查询线程数    # dist_threads      = 4    // 二进制日志路径    # binlog_path       = # disable logging    # binlog_path       = /home/yejianfeng/instance/coreseek/var/data # binlog.001 etc will be created there    // 二进制日志刷新    # binlog_flush      = 2    // 二进制日志大小限制    # binlog_max_log_size   = 256M    // 线程堆栈    # thread_stack          = 128K    // 关键字展开限制    # expansion_limit       = 1000    // RT索引刷新周期     # rt_flush_period       = 900    // 查询日志格式    // 可选项，可用值为plain、sphinxql，默认为plain。     # query_log_format      = sphinxql    // MySQL版本设置    # mysql_version_string  = 5.0.37    // 插件目录    # plugin_dir            = /usr/local/sphinx/lib    // 服务端默认字符集    # collation_server      = utf8_general_ci    // 服务端libc字符集    # collation_libc_locale = ru_RU.UTF-8    // 线程服务看守    # watchdog              = 1    // 兼容模式    # compat_sphinxql_magics    = 1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br> </p><h5 id="转载自-轩脉刃de刀光剑影"><a href="#转载自-轩脉刃de刀光剑影" class="headerlink" title="转载自:  轩脉刃de刀光剑影"></a>转载自:  <a href="http://www.cnblogs.com/yjf512/p/3598332.html">轩脉刃de刀光剑影</a></h5>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
          <category> Sphinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> Mysql </tag>
            
            <tag> Sphinx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1,Sphinx Windows本地安装及PHP使用Sphinxapi示例</title>
      <link href="2019/11/12/install-Sphinx-in-Windows-and-use-Sphinxapi-in-php/"/>
      <url>2019/11/12/install-Sphinx-in-Windows-and-use-Sphinxapi-in-php/</url>
      
        <content type="html"><![CDATA[<p>  最近一个项目需要实现这样一个需求:mysql数据库一张表中存了百万张菜品图片,需要根据菜品名称或描述,模糊匹配出符合条件的菜品图片,并展示出来</p><pre class="line-numbers language-none"><code class="language-none">select * from table_name where column like '%鱼香肉丝%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  如果像上面那样,直接使用mysql like查询的话,会进行全表扫描,不走索引,大大的影响查询效率,所以开始学习使用<strong>Sphinx全文搜索引擎</strong>,下面记录下第一次配置使用的过程,以及过程中遇到的问题和疑问,望指正.</p><span id="more"></span><h6 id="1-下载sphinx源码压缩包点击下载"><a href="#1-下载sphinx源码压缩包点击下载" class="headerlink" title="1. 下载sphinx源码压缩包点击下载"></a>1. 下载sphinx源码压缩包<a href="http://sphinxsearch.com/downloads/current/">点击下载</a></h6><p>按照自己的需求,下载对应的版本,我这里下载的是Windows x64 binaries 3.1.1 版本</p><h6 id="2-下载后的sphinx源码目录"><a href="#2-下载后的sphinx源码目录" class="headerlink" title="2. 下载后的sphinx源码目录"></a>2. 下载后的sphinx源码目录</h6><p><img src="https://upload-images.jianshu.io/upload_images/14618365-57bc4bf34fe6ce13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sphinx源码目录结构"></p><h6 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h6><p>打开etc目录,里面有三个文件,example,sql是创建测试表的脚本,我们稍后会用到,sphinx.conf.dist是完整版默认配置,这里我选择了sphinx-min.conf.dist简化版,暂时可以满足需求,复制一份到bin目录下,并且重命名为sphinx.conf.<br><img src="https://upload-images.jianshu.io/upload_images/14618365-eeada956c4180e1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="etc目录"></p><h6 id="4-sphinx-config文件配置"><a href="#4-sphinx-config文件配置" class="headerlink" title="4. sphinx.config文件配置"></a>4. sphinx.config文件配置</h6><p>配置文件的几个组成部分:</p><ul><li>source 数据源,这里配置你要进行全文检索的数据的来源</li><li>index 索引,从上面的数据源处构建索引,相当于字典检索,要有整本字典内容后才会有索引</li><li>indexer 构建索引,需要重新构建索引时,其实就是调用indexer这个命令</li><li>searchd 提供搜索查询的服务,后台运行<pre class="line-numbers language-none"><code class="language-none">source src1 ## src1为数据源命名的名称,可以根据数据源的属性更改{    type            = mysql ## 数据源,本项目使用mysql    sql_host        = localhost ## 数据库服务器,这里因为是测试,使用的是本地数据库    sql_user        = root # 数据库用户名    sql_pass        = root # 数据库密码    sql_db          = hongbao ## 数据库名称,替换成你自己的数据库名称    sql_port        = 3306 ## 数据库端口,默认3306    sql_query_pre   = SET NAMES utf8 ## 如果你的数据库不是uft8编码的,注释掉本行    sql_query       = \ ## 主查询,查询出所有在检索范围的数据        SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content \        FROM documents    sql_attr_uint       = group_id ## 属性    sql_attr_timestamp  = date_added ## 属性,可用来排序}index test1 ## 索引名称,自行命名{    source          = src1 ## 基于这个数据源构建索引    path            = D:/sphinx/data/ ## 存放索引的目录,自己创建    charset_table = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F  ##  指定utf-8的编码表    mlock           = 0    morphology      = none ## 词形处理器,如果检索中文用不到,dogs&lt;==&gt;dog    min_word_len        = 1 ## 最小索引词长度,小于这个长度的词不会被索引    ngram_len       = 1 ## 简单分词,只支持0和1,如果要搜索中文,请指定为1    ngram_chars     = U+3000..U+2FA1F ## 需要分词的字符,如果要搜索中文,请放开这行    html_strip      = 0 ## html标记清理,是否从输出全文数据中去除HTML标记}indexer{    # memory limit, in bytes, kiloytes (16384K) or megabytes (256M)    # optional, default is 128M, max is 2047M, recommended is 256M to 1024M    mem_limit       = 128M ## 建立索引的时候,索引内存限制}searchd{    listen          = 9312 ## 监听端口    listen          = 9306:mysql41    log         = D:/sphinx/log/searchd.log ## 监听日志    query_log       = D:/sphinx/log/query.log ## 查询日志    pid_file        = D:/sphinx/log/searchd.pid ## ## 进程id文件    read_timeout        = 5 ## 客户端读超时时间    client_timeout      = 300 ## 客户端持久连接超时时间,即客户端读一次以后,持久连接,然后再读一次,中间这个持久连接的时间    max_children        = 30 ## 并行执行搜索的数目    persistent_connections_limit    = 30    preopen_indexes     = 1 ## 索引预开启，是否强制重新打开所有索引文件    unlink_old      = 1 ## 索引轮换成功之后，是否删除以.old为扩展名的索引拷贝    max_packet_size     = 8M ## 网络通讯时允许的最大的包的大小    max_filters     = 256 ## 每次查询允许设置的过滤器的最大个数    max_filter_values   = 4096 ## 单个过滤器允许的值的最大个数    max_batch_queries   = 32 ## 每次批量查询的查询数限制    workers         = threads # for RT to work     多处理模式（MPM）。 可选项；可用值为none、fork、prefork，以及threads。 默认在Unix类系统为form，Windows系统为threads。}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>__注:配置文件更改完成之后,回到根目录新建配置文件中使用到的data和log两个目录__</li></ul><p>导入源码里提供的示例数据,执行etc目录下的example.sql脚本:<br><img src="https://upload-images.jianshu.io/upload_images/14618365-f72b58fee6c8b94f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入测试数据"></p><p>或者使用mysql图形处理界面工具:<br><img src="https://upload-images.jianshu.io/upload_images/14618365-5e7913e3b77827cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入测试数据.png"></p><h6 id="5-根据sphinx-conf创建索引"><a href="#5-根据sphinx-conf创建索引" class="headerlink" title="5. 根据sphinx.conf创建索引"></a>5. 根据sphinx.conf创建索引</h6><pre class="line-numbers language-none"><code class="language-none">## 构建索引语法:indexer -c 配置文件 索引名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>打开windows 命令提示行工具,进入到sphinx/bin目录下</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14618365-b051e3066904d801.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="根据sphinx.conf创建索引"></p><ul><li>启动sphinx检索服务,后台常驻</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14618365-4f8b1e2d6cc27b6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动"></p><ul><li>查看索引创建情况<br>重新打开一个命令行窗口,</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14618365-71ee147c00cedb1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="索引建立情况"></p><h6 id="6-Sphinxapi-php使用-或者安装php扩展"><a href="#6-Sphinxapi-php使用-或者安装php扩展" class="headerlink" title="6. Sphinxapi.php使用(或者安装php扩展)"></a>6. Sphinxapi.php使用(或者安装php扩展)</h6><p>sphinx提供了各种语言的代码,php使用sphinx,只需要引入sphinxapi.php,打开根目录下的api目录,将sphinxapi.php文件复制到你的项目目录下,方便调用</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php/** * Demo.php * Create on 2018/8/29 10:42 * Create by liu * Administrator */class Demo extends CI_Controller{    private $sphinx;    public function __construct()    {        parent::__construct();        require_once APPPATH . 'libraries/Sphinxapi.php';        $this-&gt;sphinx = new SphinxClient();    }    public function sphinx()    {        //设置操作哪个sphinx服务器        $this-&gt;sphinx-&gt;setServer('localhost',9312);        $keyword = "银行";//要搜索的关键字        $index = 'bank';//索引名称        //查询出关键字所在的主键id        $this-&gt;sphinx-&gt;_limit = 2000;        $res = $this-&gt;sphinx-&gt;Query($keyword,$index);        echo '&lt;pre&gt;';        if (isset($res['matches'])){            $ids = array_keys($res['matches']);            $ids = implode(',',$ids);        }else{            print_r("内容不存在");            return;        }        //获取匹配到的主键id        $mysql_con = mysqli_connect('localhost','root','','hongbao');//本地数据库        mysqli_query($mysql_con,'set name utf8');        mysqli_query($mysql_con,'use hongbao');        $sql = "select * from bank where id in ($ids)";                $res = mysqli_query($mysql_con,$sql);        while ($row = mysqli_fetch_assoc($res)){            $data[] = $row;        }        foreach ($data as $key =&gt; $v){            $v = str_replace($keyword,"&lt;font color='red'&gt;{$keyword}&lt;/font&gt;",$v);            $data[$key] = $v;        }        print_r($data);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码运行结果<br><img src="https://upload-images.jianshu.io/upload_images/14618365-4ce186161f4e1689.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> Mysql </category>
          
          <category> Sphinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> Mysql </tag>
            
            <tag> Sphinx </tag>
            
            <tag> Sphinxapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows+PHP5.6环境下安装imagick扩展和imagemagick</title>
      <link href="2019/11/12/install-imagick-extend-and-imagemagick-in-windows-php5.6/"/>
      <url>2019/11/12/install-imagick-extend-and-imagemagick-in-windows-php5.6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>其实回过头看,安装过程中最容易出错的反而是下载阶段,一定要将imagemagick和imagick的版本和<code>phpinfo</code>的信息对应好!<br>下图中几点需要注意,每个人的信息可能不同,根据你自己的phpinfo来选择接下来的下载的程序及扩展版本:</p></blockquote><ul><li>PHP Version: <strong>PHP版本</strong> </li><li>compiler: <strong>MSVC11</strong></li><li>Architecture: <strong>x86</strong></li><li>Thread Safety: <strong>disabled</strong> 非线程安全,也就是<strong>NTS</strong>,相反的则是线程安全<strong>TS</strong></li></ul><span id="more"></span><p><img src="https://upload-images.jianshu.io/upload_images/14618365-bc2658ebe00f81fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>正文部分</strong></p><hr><h4 id="一-Imagemagick部分"><a href="#一-Imagemagick部分" class="headerlink" title="一. Imagemagick部分"></a>一. Imagemagick部分</h4><h5 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h5><ul><li>下载<code>Imagemagick</code>程序<br>下载地址:<a href="http://windows.php.net/downloads/pecl/deps/">Imagemagick程序下载地址</a><br>打开链接,找到Imagemagick的下载区域,根据phpinfo我应该选择vc11,32位的下载链接,也就是下图中圈出的部分<br><img src="https://upload-images.jianshu.io/upload_images/14618365-1fa2dc2e9309896b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h5><ul><li><p><strong>解压缩</strong> 将下载后的压缩包,直接解压到你想放置的目录下,不要有中文和特殊字符,我把它放在了<code>D:\install_dir\imagemagick</code>下,并且记住不要忘记这个路径</p></li><li><p><strong>环境变量配置</strong> 为了更方便,全局都可以使用,我们需要配置下环境变量,进入刚才解压缩的目录,再进入/bin目录下,复制当前路径,我的路径为<code>D:\install_dir\imagemagick\bin</code>,右击我的电脑(计算机),按照下图依次打开环境变量配置位置,将路径粘贴进去(<strong>注意:Path中可能有多个路径,多个路径间用<code>;</code>分号分割就好</strong>)<br><img src="https://upload-images.jianshu.io/upload_images/14618365-b9d3e46e19449641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p><strong>导入DLL文件</strong> 进入<code>imagemagick</code>的<code>bin</code>目录下,复制所有<code>.dll</code>后缀的文件到你的<code>php</code>根目录下(我使用的是Phpstudy建的环境,我的<code>php</code>路径为:<code>D:\phpStudy\php\php-5.6.27-nts</code>)我的版本有147个文件,这里有个小技巧,在文件管理器右上角搜索<code>.dll</code>,然后全选复制,会方便一点<br><img src="https://upload-images.jianshu.io/upload_images/14618365-845b64c7cb6228f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li></ul><h4 id="二-Imagick扩展部分"><a href="#二-Imagick扩展部分" class="headerlink" title="二. Imagick扩展部分"></a>二. Imagick扩展部分</h4><p>  首先<code>imagick</code>一个<code>php</code>扩展,可以使用<code>php</code>控制<code>imagemagick</code>程序</p><h5 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1. 下载"></a>1. 下载</h5><ul><li><strong>下载imagick</strong> <a href="https://windows.php.net/downloads/pecl/releases/imagick/">下载地址</a> 仍然是根据你的phpinfo选择对应的版本,根据文章开始的图片,我应该选择<a href="https://windows.php.net/downloads/pecl/releases/imagick/3.4.3/php_imagick-3.4.3-5.6-ts-vc11-x86.zip">php_imagick-3.4.3-5.6-ts-vc11-x86.zip</a></li></ul><h5 id="2-安装-1"><a href="#2-安装-1" class="headerlink" title="2. 安装"></a>2. 安装</h5><ul><li><strong>php_imagick.dll</strong> 找到刚下载的压缩包,解压后,找到<code>php_imagick.dll</code>文件,将其复制粘贴到<code>php</code>根目录下的<code>ext</code>目录下</li><li><strong>其他<code>.DLL</code>文件</strong> 将解压后的<code>imagick</code>目录下的其他<code>.dll</code>后缀的文件全部复制粘贴到<code>php</code>根目录下</li><li><strong>php.ini</strong> 找到php.ini文件并打开编辑,加入<code>extension=php_imagick.dll</code>这一行</li></ul><h4 id="三-重启"><a href="#三-重启" class="headerlink" title="三. 重启"></a>三. 重启</h4><p>到这里基本上可以成功安装了,<code>imagemagick</code>需要重启电脑后才会生效,重启电脑后,查看phpinfo,如果成功安装了,会看到下图中的部分<br><img src="https://upload-images.jianshu.io/upload_images/14618365-e71f02e2d9ef466b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> PHP </category>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> PHP </tag>
            
            <tag> imagick </tag>
            
            <tag> Imagemagick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Review 之引擎</title>
      <link href="2019/11/12/Mysql-Review-engine/"/>
      <url>2019/11/12/Mysql-Review-engine/</url>
      
        <content type="html"><![CDATA[<p><strong>1. Mysql具有多个引擎,都隐藏在Mysql服务器内,全都可以执行CERATE TABLE 和SELECT等命令</strong><br><strong>2. 不同的引擎有不同的功能和灵活性,下面列出几个必须要知道的引擎:</strong></p><ul><li><strong>InnoDB</strong> 是一个可靠的事务处理引擎,不支持全文本搜索.__</li><li><strong>MEMORY</strong> 功能上等于MyISAM,但由于数据存储在内存(不是磁盘),速度很快,特别适用于临时表.</li><li><strong>MyISAM</strong> 性能极高,支持全文本搜索.但是支持事务处理.</li></ul><p><strong>3. 引擎类型可以混用</strong></p><blockquote><p>注:外键不可以跨引擎,即使用一个引擎的表不能引用具有不用引擎的表的外键,这也是混用引擎的一大缺陷</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
          <category> Mysql基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> Mysql </tag>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Review 之表联结入门篇</title>
      <link href="2019/11/12/Mysql-Review-JOIN/"/>
      <url>2019/11/12/Mysql-Review-JOIN/</url>
      
        <content type="html"><![CDATA[<h4 id="1-为什么要使用联结"><a href="#1-为什么要使用联结" class="headerlink" title="1. 为什么要使用联结?"></a>1. 为什么要使用联结?</h4><pre><code>联结可以利用一条SELECT语句检索出存储在多个关系表上的数据,也就是联结多个表返回一组数据.</code></pre><h4 id="2-一个创建联结的简单例子"><a href="#2-一个创建联结的简单例子" class="headerlink" title="2. 一个创建联结的简单例子"></a>2. 一个创建联结的简单例子</h4><pre class="line-numbers language-none"><code class="language-none">SELECT vend_name,prod_name,prod_price //检索出这三列数据FROM vendors,products //从这两个表中WHERE vendors.vend_id = product.vend_id //条件是两个表中的vend_id相等ORDER BY vend_name,prod_name; //通过vend_name,prod_name排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建联结语句时,一定要注意的WHERE子句,如果没有WHERE子句,第一个表中的每一行都i将于第二个表中的行配对,从而产生大量不希望检索出的结果,也就是<strong>笛卡儿积</strong>(没有联结条件的表关系返回的结果)</p><p><strong><em>应该保证所有联结都有WHERE子句,并且保证WHERE子句的正确性</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
          <category> Mysql基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> Mysql </tag>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Review 之函数篇</title>
      <link href="2019/11/12/Mysql-Review-function/"/>
      <url>2019/11/12/Mysql-Review-function/</url>
      
        <content type="html"><![CDATA[<h4 id="数据处理函数"><a href="#数据处理函数" class="headerlink" title="数据处理函数"></a>数据处理函数</h4><blockquote><p>Mqsql 和其他大多数计算机语言一样,支持利用函数处理数据,大多数SQL都支持以下类型的函数.</p></blockquote><ul><li><p>处理文本串的文本函数</p></li><li><p>数值数据上进行算术操作的数值函数</p></li><li><p>处理日期和时间值并从这些值中提取特定成分的日期和时间函数</p></li><li><p>返回DBMS正使用的特殊信息的系统函数</p></li></ul><p><strong>1. 文本处理函数</strong><br>常用的文本处理函数一览 </p><table><thead><tr><th>函数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>Left() or Right()</td><td>返回字符串左 or 右边的字符</td><td></td></tr><tr><td>Length()</td><td>返回字符串的长度</td><td></td></tr><tr><td>Locate()</td><td>找出字符串的一个子串</td><td></td></tr><tr><td>Lower() or Upper()</td><td>将字符串转换为小 or 大写</td><td></td></tr><tr><td>LTrim() or RTrim()</td><td>去掉字符串左 or 右边的空格</td><td></td></tr><tr><td>Substring()</td><td>截取字符串的子字符串</td><td></td></tr></tbody></table><p><strong>2. 日期处理函数</strong><br>常用的日期和时间处理函数    </p><table><thead><tr><th>函数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>AddDate() or AddTime()</td><td>增加一个日期 or 时间</td><td></td></tr><tr><td>CurDate() or CurTime()</td><td>返回当前日期 or 时间</td><td></td></tr><tr><td>Date()</td><td>返回日期部分</td><td></td></tr><tr><td>DateDiff()</td><td>计算两个日期之差</td><td></td></tr><tr><td>Date_Format()</td><td>返回一个格式化的日期或时间串</td><td></td></tr><tr><td>DayOfWeek()</td><td>返回一个日期,对应的是星期几</td><td></td></tr></tbody></table><p><strong>3. 数值处理函数</strong><br>常用的数值处理函数</p><table><thead><tr><th>函数</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>ABS()</td><td>返回绝对值</td><td></td></tr><tr><td>Mod()</td><td>返回除操作的余数</td><td></td></tr><tr><td>Rand()</td><td>返回一个随机数</td><td></td></tr><tr><td>Sqrt()</td><td>返回一个数的平方根</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
          <category> Mysql基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> Mysql </tag>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Review 之常用词汇 术语</title>
      <link href="2019/11/12/Mysql-Review-terminology/"/>
      <url>2019/11/12/Mysql-Review-terminology/</url>
      
        <content type="html"><![CDATA[<p><strong>1. database</strong> 数据库</p><p><strong>2. DBMS</strong> 数据库管理系统</p><p><strong>3. table</strong> 表 (结构化文件,存储某种特定类型的数据)</p><p><strong>4. schema</strong> 模式(包括数据库及表间关系)</p><p><strong>5. column</strong> 列(表由列组成,表中的一个字段,代表一列)</p><p><strong>6. datatype</strong> 数据类型(int varchar等,每个字段都有相应的数据类型,限制存入的数据种类,例如int类型不能存字符值)</p><p><strong>7. row</strong> 行(一行也就是一条数据库记录,但从技术上说,行才是正确的术语)</p><p><strong>8. primary key</strong> 主键</p><p><strong>9. sql</strong> Structured Query Language 结构化查询语言(与数据库通讯的语言)</p><p><strong>10. field</strong> 字段 基本上与column意思相同</p><p><strong>11. concatenate</strong> 拼接 将值连结到一起构成单个值</p><p><strong>12. join</strong> 联结</p><p><strong>13. foreign key</strong> 外键</p><p><strong>14. scale</strong> 可伸缩性 能够适应不断增加的工作量而不失败,设计良好的数据库或应用程序称之为可伸缩性好(scale well)</p><p><strong>15. view</strong> 视图</p><p><strong>16. variable</strong> 变量</p>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
          <category> Mysql基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> Mysql </tag>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql Review 之常用sql语句</title>
      <link href="2019/11/12/Mysql-Review-common-sql/"/>
      <url>2019/11/12/Mysql-Review-common-sql/</url>
      
        <content type="html"><![CDATA[<h3 id="一-综合"><a href="#一-综合" class="headerlink" title="一. 综合"></a>一. 综合</h3><ol><li>使用<strong>.sql</strong>脚本 <code>SOURCE + 脚本路径;</code></li><li>打开数据库 <code>USE database;</code></li><li>显示所有数据库名称 <code>SHOW databases;</code> </li><li>显示所有表名称 <code>SHOW tables;</code></li><li>显示表中的列及属性 <code>SHOW column FROM table_name;</code></li></ol><h3 id="二-检索-查询语句"><a href="#二-检索-查询语句" class="headerlink" title="二. 检索/查询语句"></a>二. 检索/查询语句</h3><h5 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h5><ol><li>检索某一列 <code>SELECT column_name FROM table_name;</code></li><li>检索所有列,使用 * 通配符 <code>SELECT * FROM table_name;</code><h5 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h5></li><li>检索结果去重 <code>SELECT DISTINCT column_name FROM TABLE_NAME</code><h5 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h5></li><li>限制检索结果行数</li></ol><ul><li><code>SELECT column FROM table_name LIMIT 5 ## 结果不超过5行</code></li><li><code>SELECT column FROM table_name 5,5 ## 返回从行5开始的5行</code></li><li><code>SELECT column FROM table_name 5 OFFSET 4 ## limit m,n的替代语法,返回5行,从行4开始</code>  <h5 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h5></li></ul><ol start="5"><li>检索结果排序</li></ol><ul><li><code>SELECT * FROM table_name ORDER BY id DESC 降序/倒序</code></li><li><code>SELECT * FROM table_name ORDER BY id ASC ## 升序/正序</code> </li></ul><ol start="6"><li>按多个列排序<code>SELECT * FROM table_name order by column1,column2;## 先按column1 排序,如果column1有2个或多个值相同,则再按照column2排序</code></li></ol><h5 id="WHERE子句"><a href="#WHERE子句" class="headerlink" title="WHERE子句"></a>WHERE子句</h5><ol start="7"><li><p><code>SELECT * FROM table_name WHERE price = 2.5;## 检索出价格为2.5的产品</code></p></li><li><p>WHERE 子句操作符</p></li></ol><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>BETWEEN m AND n</td><td>指定的两个值之间</td></tr></tbody></table><ol start="9"><li><p>空值检查 <code>WHERE column  IS NULL; ## 特殊的where 子句</code></p></li><li><p>逻辑操作符(operator)</p></li></ol><ul><li>and  <code>WHERE age = 19 AND score &gt; 80 ;</code></li><li>or <code>WHERE user_id = 1 or user_id = 2;</code>  </li><li>in <code>WHERE user_id in (1,2,3,4);</code></li><li>not 否定后跟条件的关键字</li></ul><p>11.使用通配符进行过滤<br>通配符(wildcard) 用来匹配值的一部分的特殊字符.<br>搜索模式(search pattern) 由字面值,通配符,或两者组合构成的搜索条件.</p><ul><li>百分号%通配符,可以在搜索模式的任意位置使用任意个通配符,<pre class="line-numbers language-none"><code class="language-none">SELECT * FROM table_name WHERE username LIKE 'rise%'; ##检索以rise开头的用户名 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>下划线_通配符,用途和%一样,但是只能匹配单个字符而不是多个<pre class="line-numbers language-none"><code class="language-none">SELECT * FROM table_name WHERE price LIKE '_000'; ##检索出价格为1000,2000等的商品 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>不要过度使用通配符,并且尽量不要在搜索模式的开始出使用,搜索速度巨慢!</p><ol start="11"><li>Mysql使用正则表达式<pre class="line-numbers language-none"><code class="language-none">SELECT * FROM table_name WHERE prod_name REGEXP '正则表达式'; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h5><ol start="12"><li><strong>Concat()</strong>拼接两个列   </li></ol><pre class="line-numbers language-none"><code class="language-none">## 将两个列拼接起来,变成一个新字段vend-title,类似  '值name(location) '的形式,同时去掉两个字段右侧的空格.## RTrim(),LTrim(),Trim()## AS 用as赋予别名 (又叫导出列)SELECT Concat(RTrim(vend_name) , ' (', RTrim(vend_country), ') ') AS vend_title FROM vendorsORDER BY vend_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="13"><li>执行算术计算<pre class="line-numbers language-none"><code class="language-none">##通过单价和数量两个列运算出商品总价并形成一个新字段 expanded_priceSELECT prod_id,       quantity,       item_price,       quantity * item_price AS expanded_priceFROM orderitemsWHERE order_num = 20005;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>测试计算</li></ol><pre class="line-numbers language-none"><code class="language-none">SELECT 3 * 2;SELECT Trim('abc');SELECT Now();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Mysql </category>
          
          <category> Mysql基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> Mysql </tag>
            
            <tag> Mysql基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 通过User-Agent判断用户使用的设备 或平台</title>
      <link href="2019/11/12/Determine-the-device-or-platform-used-by-UserAgent/"/>
      <url>2019/11/12/Determine-the-device-or-platform-used-by-UserAgent/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;    var browser = {        versions: function() {            var u = navigator.userAgent,                app = navigator.appVersion;            return {                trident: u.indexOf('Trident') &gt; -1, //IE内核                presto: u.indexOf('Presto') &gt; -1, //opera内核                webKit: u.indexOf('AppleWebKit') &gt; -1, //苹果、谷歌内核                gecko: u.indexOf('Gecko') &gt; -1 &amp;&amp; u.indexOf('KHTML') == -1, //火狐内核                mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端                ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端                android: u.indexOf('Android') &gt; -1 || u.indexOf('Adr') &gt; -1, //android终端                iPhone: u.indexOf('iPhone') &gt; -1, //是否为iPhone或者QQHD浏览器                iPad: u.indexOf('iPad') &gt; -1, //是否iPad                webApp: u.indexOf('Safari') == -1, //是否web应该程序，没有头部与底部                weixin: u.indexOf('MicroMessenger') &gt; -1, //是否微信 （2015-01-22新增）                qq: u.match(/\sQQ/i) == " qq", //是否QQ                eleme: u.indexOf('Needle') &gt; -1//是否饿了么            };        }(),        language: (navigator.browserLanguage || navigator.language).toLowerCase()    };    console.log(browser['versions']['eleme']);    if (browser['versions']['eleme']){        show();    }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片懒加载 滚动加载 点击图片预览实现过程</title>
      <link href="2019/11/12/image-lazy-load-and-preview/"/>
      <url>2019/11/12/image-lazy-load-and-preview/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者是个前端菜鸟,只能靠着东拼西凑才能生存下来这样子</p></blockquote><p>上次写了一个实现<strong>搜索框自动补全</strong>的小功能的文章,今天这个在其基础上,加入了几个新功能,两者卡可以结合使用,也可以分开独自使用,没有影响的,想了解的同学,可以先去了解一下,<strong><a href="https://www.jianshu.com/p/18047be090f4">[传送门]</a></strong>,下面开始实现标题的功能</p><h4 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h4><ul><li><p><strong>WEUI</strong>: WEUI是一套同微信原生视觉体验一致的基础样式库,由微信官方设计团队为微信内网页和小程序量身定制,令用户感知更加统一,<a href="https://weui.io/">点击进行在线体验</a>.</p></li><li><p><strong>Jquery WEUI</strong>:JQuery WeUI 是专为微信公众账号开发而设计的一个简洁而强大的UI库，包含全部WeUI官方的CSS组件，并且额外提供了大量的拓展组件，丰富的组件库可以极大减少前端开发时间,<a href="http://jqweui.com/">JQuery WeUI官网</a>.</p></li><li><p><strong>ECHO JS</strong>:ECHO JS 是一个纯javascript轻量级延迟加载插件,用来实现懒加载部分</p></li></ul><span id="more"></span><h4 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2. 实现思路"></a>2. 实现思路</h4><ul><li><p><strong>监听键盘</strong>:监听键盘的搜索动作(也就是Enter键), 接收到后台的数据后,循环append到img容器中,这里使用的是<code>WEUI</code>的九宫格,将三列调成了两列,将图片展示出来</p></li><li><p><strong>点击预览</strong> 监听用户的鼠标点击动作,当用户点击某一张图片时,调用<a href="http://jqweui.com/extends#photos">Photo Browser</a>,并使用<code>pb.open();</code>打开预览图</p></li><li><p><strong>懒加载</strong> 将需要懒加载的img标签添加<code>data-echo</code>属性,并且将原src改为一张透明的loading gif图,echojs就会自动实现懒加载了,使用起来非常简单</p></li><li><p><strong>滚动加载</strong> 滚动加载使用的是JQuery WEUI的<a href="http://jqweui.com/extends#infinite">infinite</a>,当滑动到最下面时,触发加载动作,向后台发起ajax请求,同时记录当前页数</p></li></ul><h4 id="3-不多B-上代码"><a href="#3-不多B-上代码" class="headerlink" title="3. 不多B,上代码"></a>3. 不多B,上代码</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="utf-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;    &lt;title&gt;图片搜索&lt;/title&gt;    &lt;link rel="stylesheet" href="/static/jquery-weui-build/dist/lib/weui.min.css"&gt;    &lt;link rel="stylesheet" href="/static/jquery-weui-build/dist/css/jquery-weui.css"&gt;    &lt;link rel="stylesheet" href="/static/jquery-weui-build/demos/css/demos.css"&gt;    &lt;link rel="stylesheet" href="/static/jquery-ui/jquery-ui.css"&gt;    &lt;script src="/static/js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;    &lt;script src="/static/jquery-weui-build/dist/js/jquery-weui.js"&gt;&lt;/script&gt;    &lt;script type='text/javascript' src='/static/jquery-weui-build/dist/js/swiper.js' charset='utf-8'&gt;&lt;/script&gt;    &lt;script src="/static/jquery-ui/jquery-ui.js"&gt;&lt;/script&gt;    &lt;script src="/static/waterfall/js/echo.min.js"&gt;&lt;/script&gt;    &lt;script&gt;        echo.init({//初始化echo.js            offset: 0,            throttle: 0        });    &lt;/script&gt;    &lt;style&gt;        body {            background: #efeff4;        }        img {            width: 100%;            height: 100%;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="body"&gt;    &lt;div class="ui-widget"&gt;        &lt;div class="weui-search-bar" id="searchBar"&gt;            &lt;form class="weui-search-bar__form" action="#"&gt;                &lt;div class="weui-search-bar__box"&gt;                    &lt;i class="weui-icon-search"&gt;&lt;/i&gt;                    &lt;input type="search" class="weui-search-bar__input" id="tags" placeholder="搜索" required=""&gt;                    &lt;a href="javascript:" class="weui-icon-clear" id="searchClear"&gt;&lt;/a&gt;                &lt;/div&gt;                &lt;label class="weui-search-bar__label" id="searchText"                       style="transform-origin: 0px 0px 0px; opacity: 1; transform: scale(1, 1);"&gt;                    &lt;i class="weui-icon-search"&gt;&lt;/i&gt;                    &lt;span&gt;搜索&lt;/span&gt;                &lt;/label&gt;            &lt;/form&gt;            &lt;a href="javascript:" class="weui-search-bar__cancel-btn" id="searchCancel"&gt;取消&lt;/a&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class="weui-grids" id="item"&gt;&lt;/div&gt;    &lt;div class="weui-loadmore"&gt;        &lt;i class="weui-loading"&gt;&lt;/i&gt;        &lt;span class="weui-loadmore__tips"&gt;正在加载&lt;/span&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    var availableTags = [];//数据源    var keyword = '';//搜索关键字    var page = 1;//当前页数    //先初始化自动补全功能    $("#tags").autocomplete({        source: availableTags //数据源    });    if (!$('#item').html()){        $('.weui-loadmore').html('&lt;div class="weui-loadmore weui-loadmore_line"&gt; &lt;span class="weui-loadmore__tips"&gt;暂无数据&lt;/span&gt; &lt;/div&gt;');//样式需要调整    }    //去掉字符串中任意位置的空格    function Trim(str, is_global) {        var result;        result = str.replace(/(^\s+)|(\s+$)/g, "");        if (is_global.toLowerCase() == "g") {            result = result.replace(/\s/g, "");        }        return result;    }    //判断字符串是否全是中文    function isChn(str) {        var reg = /^[\u4E00-\u9FA5]+$/;        if (!reg.test(str)) {            return false;        } else {            return true;        }    }    //请求后端获取数据源    function get_source(word = null) {        var url = "&lt;?php echo base_url('Picture/source');?&gt;?keyword=" + word;        $.get({            type: 'GET',            url: url,            async: false,//改为同步            dataType: 'json',            success: function (response) {                availableTags = response;            }        });    }    //搜索和自动补全结合    $('#tags').keyup(function () {        keyword = $('#tags').val();        if (event.which == '13') {            $('#item').empty();//初始化图片列表            page = 1;//初始化当前页            call();            return;        }        if (isChn(Trim(keyword, 'g'))) {            get_source(keyword);            $("#tags").autocomplete({                source: availableTags //数据源            });        }    });    //向后台请求数据    function call() {        var pay_url = "&lt;?php echo base_url('Picture/search');?&gt;";        $.ajax({            type: 'GET',            url: pay_url + '?keyword=' + keyword + '&amp;page=' + page, //搜索            dataType: 'json',            success: function (data) {                if (data['errno'] == 40001){                    no_data_style();                    return;                }                $('.weui-loadmore').html('&lt;i class="weui-loading"&gt;&lt;/i&gt; &lt;span class="weui-loadmore__tips"&gt;正在加载&lt;/span&gt;');                $.each(data, function (index, item) {                    $('#item').append('&lt;a href="javascript:void(0)" class="weui-grid" style="width: 50%;" onclick=big_img("'+item.img+'","'+Trim(item.name, 'g')+'")&gt; &lt;img src="/static/img/index_32.png" data-echo="'+item.img+'" alt="'+item.name+'"&gt; &lt;p style="text-align: center;font-size: 12px;color: black;margin-top: 10px"&gt;'+item.name+'&lt;/p&gt;&lt;/a&gt;');                    if (data.length &lt;= 8 &amp;&amp; page == 1){                        no_data_style();                    }                });                echo.init({//获得数据后初始化echojs                    offset: 0,                    throttle: 0                });            }        })    }    function no_data_style() {        $('.weui-loadmore').empty();        $('.weui-loadmore').append('&lt;div class="weui-loadmore weui-loadmore_line"&gt; &lt;span class="weui-loadmore__tips"&gt;暂无更多&lt;/span&gt; &lt;/div&gt;');//样式需要调整    }&lt;/script&gt;&lt;!--点击预览全图--&gt;&lt;script&gt;    function big_img(img,name) {        var imgs = [{'image':img,'caption':name}];        var pb = $.photoBrowser({            items: imgs,        });        pb.open();    }&lt;/script&gt;&lt;!--滚动加载--&gt;&lt;script&gt;    //滚动加载    var loading = false;    $(document.body).infinite().on("infinite", function () {        if (loading) return;        loading = true;        setTimeout(function () {            page++;            call();            loading = false;            echo.init({                offset: 0,                throttle: 0            });        }, 1000);    });&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> WeUI </tag>
            
            <tag> Jquery WEUI </tag>
            
            <tag> ECHO JS </tag>
            
            <tag> 懒加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索框自动补全(模糊匹配)功能实现</title>
      <link href="2019/11/12/searchinput-auto-complated/"/>
      <url>2019/11/12/searchinput-auto-complated/</url>
      
        <content type="html"><![CDATA[<p>  本地实现了一个搜索框自动补全的小功能,在JQuery UI的autocomplete插件的基础上,加入了自己的业务代码,贴出来回顾一下,同时可以给大家一个参考</p><span id="more"></span><p>  首先贴出的是JQuery Ui 的自动补全插件部分的代码,后面的功能都是在其基础上追加的,直接拷贝到你的本地就可以直观的看到运行效果,也可以到官网上面体验和查看,为了方便,我这里是直接引入的JS链接<a href="https://jqueryui.com/download/">点击下载JQuery UI的源码</a></p><pre class="line-numbers language-none"><code class="language-none">&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="utf-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;  &lt;title&gt;jQuery UI Autocomplete - Default functionality&lt;/title&gt;  &lt;link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"&gt;  &lt;link rel="stylesheet" href="/resources/demos/style.css"&gt;  &lt;script src="https://code.jquery.com/jquery-1.12.4.js"&gt;&lt;/script&gt;  &lt;script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"&gt;&lt;/script&gt;  &lt;script&gt;  $( function() {    var availableTags = [//这里要改成根据用户的输入,自动更换词库的形式      "ActionScript",      "AppleScript",      "Asp",      "BASIC",      "C",      "C++",      "Clojure",      "COBOL",      "ColdFusion",      "Erlang",      "Fortran",      "Groovy",      "Haskell",      "Java",      "JavaScript",      "Lisp",      "Perl",      "PHP",      "Python",      "Ruby",      "Scala",      "Scheme"    ];    $( "#tags" ).autocomplete({//调用补全功能      source: availableTags    });  } );  &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="ui-widget"&gt;  &lt;label for="tags"&gt;Tags: &lt;/label&gt;  &lt;input id="tags"&gt;&lt;/div&gt;  &lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行截图</p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-228044e216af0634.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jquery-ui的自动补全功能截图"></p><p><strong>下面说下我追加的部分功能及实现思路,有可以改进的地方还请指教:</strong></p><ol><li><p>首先,数据源要根据用户输入的内容实时更新.<br>输入框的值随着用户的输入会一直变动.所以,输入框下方的推荐补全的内容要输入的值进行变动,这里使用onkeyup属性来监听键盘动作,并传递此时input的value值到js函数中.</p><pre class="line-numbers language-none"><code class="language-none">//html&lt;input type="search" class="" id="tags" placeholder="搜索" required="" onkeyup="catch_keyword(this.value)"&gt;//js代码function catch_keyword(word) {//这里接受并log出value    console.log(word);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第2步,考虑到数据库中需要模糊检索的字段都是中文的菜品名称.所以,当用户输入字母的时候,进行了一下过滤,当输入的内容中存在字母时,不提交给后台处理</p><pre class="line-numbers language-none"><code class="language-none">//字符串判断函数//判断一个字符串是否混有字母,全中文返回truefunction isChn(str) {    var reg = /^[\u4E00-\u9FA5]+$/;    if (!reg.test(str)) {        return false;    } else {        return true;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发现当字符串中含有空格的时候,上面的字符串判断函数,返回的内容不符合预期,然后加入了一个去除字符串中所有空格的功能</p><pre class="line-numbers language-none"><code class="language-none">//去掉字符串中任意位置的空格,返回去除空格后的字符串function Trim(str, is_global) {    var result;    result = str.replace(/(^\s+)|(\s+$)/g, "");    if (is_global.toLowerCase() == "g") {        result = result.replace(/\s/g, "");    }    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>处理结束用户的输入后,就是提交到后台,然后返回数据源了,也就是availableTags;这里我把availableTags声明为全局变量.并且用同步的Ajax方式取回数据,然后赋值给availableTags,然后在监听键盘的函数中,使用返回的数据调用自动补全功能.</p><pre class="line-numbers language-none"><code class="language-none">//请求后端获取数据源function get_source(word = null) {    var url = "&lt;?php echo base_url('admin/Demo/source');?&gt;?keyword=" + word;    $.get({        type: 'GET',        url: url,        async: false,//改为同步        dataType: 'json',        success: function (response) {            console.log('1');            availableTags = response;        }    });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p> 这里更新下最开始的接收监听键盘后的value值的函数</p><pre class="line-numbers language-none"><code class="language-none">//捕捉键入的关键字function catch_keyword(word = null) {    if (isChn(Trim(word, 'g'))) {//去掉空格后检查字符串,如果符合,继续请求后台        get_source(word);        $("#tags").autocomplete({            source: availableTags //数据源        });    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>到这里,这个功能已经基本结束了,在测试过程中发现了一个小问题,<strong>每次第一次获取用户输入的时候,自动补全功能没有触发,在用户继续输入后,才触发成功</strong>,经过调试,我在页面加载完成后,初始化一下自动补全插件,解决了这个问题</li></ol><p><strong>附: 完整代码</strong><br>不知道如何在markdown中添加下载链接,只好把完整代码放上来啦!</p><pre class="line-numbers language-none"><code class="language-none">&lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="utf-8"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;    &lt;title&gt;&lt;/title&gt;    &lt;link rel="stylesheet" href="/jquery-weui-build/dist/lib/weui.min.css"&gt;    &lt;link rel="stylesheet" href="/jquery-weui-build/dist/css/jquery-weui.css"&gt;    &lt;link rel="stylesheet" href="/jquery-weui-build/demos/css/demos.css"&gt;    &lt;link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"&gt;    &lt;script src="https://code.jquery.com/jquery-1.12.4.js"&gt;&lt;/script&gt;    &lt;script src="/static/jquery-weui-build/dist/lib/fastclick.js"&gt;&lt;/script&gt;    &lt;script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"&gt;&lt;/script&gt;    &lt;script&gt;        $(function () {            FastClick.attach(document.body);        });    &lt;/script&gt;    &lt;script src="/jquery-weui-build/dist/js/jquery-weui.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="ui-widget"&gt;    &lt;div class="weui-search-bar" id="searchBar"&gt;        &lt;form class="weui-search-bar__form" action="#"&gt;            &lt;div class="weui-search-bar__box"&gt;                &lt;i class="weui-icon-search"&gt;&lt;/i&gt;                &lt;input type="search" class="weui-search-bar__input" id="tags" placeholder="搜索" required=""                       onkeyup="catch_keyword(this.value)"&gt;                &lt;a href="javascript:" class="weui-icon-clear" id="searchClear"&gt;&lt;/a&gt;            &lt;/div&gt;            &lt;label class="weui-search-bar__label" id="searchText"                   style="transform-origin: 0px 0px 0px; opacity: 1; transform: scale(1, 1);"&gt;                &lt;i class="weui-icon-search"&gt;&lt;/i&gt;                &lt;span&gt;搜索&lt;/span&gt;            &lt;/label&gt;        &lt;/form&gt;        &lt;a href="javascript:" class="weui-search-bar__cancel-btn" id="searchCancel"&gt;取消&lt;/a&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    var availableTags = [];//数据源    //先初始化自动补全功能    $("#tags").autocomplete({        source: availableTags //数据源    });    //去掉字符串中任意位置的空格    function Trim(str, is_global) {        var result;        result = str.replace(/(^\s+)|(\s+$)/g, "");        if (is_global.toLowerCase() == "g") {            result = result.replace(/\s/g, "");        }        return result;    }    //判断字符串是否全是中文    function isChn(str) {        var reg = /^[\u4E00-\u9FA5]+$/;        if (!reg.test(str)) {            return false;        } else {            return true;        }    }    //捕捉键入的关键字    function catch_keyword(word = null) {        if (isChn(Trim(word, 'g'))) {            get_source(word);            $("#tags").autocomplete({                source: availableTags //数据源            });        }    }    //请求后端获取数据源    function get_source(word = null) {        var url = "&lt;?php echo base_url('admin/Demo/source');?&gt;?keyword=" + word;        $.get({            type: 'GET',            url: url,            async: false,//改为同步            dataType: 'json',            success: function (response) {                console.log('1');                availableTags = response;            }        });    }&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> JQuery UI </category>
          
          <category> autocomplete </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看Andriod手机实时刷新率</title>
      <link href="2019/11/12/Check-android-mobile-refresh-rate-in-real-time/"/>
      <url>2019/11/12/Check-android-mobile-refresh-rate-in-real-time/</url>
      
        <content type="html"><![CDATA[<h4 id="1-下载ADB"><a href="#1-下载ADB" class="headerlink" title="1. 下载ADB"></a>1. 下载ADB</h4><h4 id="2-adb-shell-quot-dumpsys-window-grep-mCurrentFocus-获取app包名"><a href="#2-adb-shell-quot-dumpsys-window-grep-mCurrentFocus-获取app包名" class="headerlink" title="2. adb shell &quot;dumpsys window|grep mCurrentFocus  获取app包名"></a>2. <code>adb shell "dumpsys window|grep mCurrentFocus</code>  获取app包名</h4><h4 id="3-操作需测试的app"><a href="#3-操作需测试的app" class="headerlink" title="3. 操作需测试的app"></a>3. 操作需测试的app</h4><h4 id="4-adb-shell-dumpsys-gfxinfo-‘app的包名’-gt-FPS-txt-输出日志"><a href="#4-adb-shell-dumpsys-gfxinfo-‘app的包名’-gt-FPS-txt-输出日志" class="headerlink" title="4. adb shell dumpsys gfxinfo ‘app的包名’  >FPS.txt  输出日志"></a>4. adb shell dumpsys gfxinfo ‘app的包名’  &gt;FPS.txt  输出日志</h4><h4 id="5-打开查看Profile-data-in-ms下的内容"><a href="#5-打开查看Profile-data-in-ms下的内容" class="headerlink" title="5. 打开查看Profile data in ms下的内容:"></a>5. 打开查看<code>Profile data in ms</code>下的内容:</h4><p><code>FPS = 1000/Draw + Prepare + Process + Execute</code></p><p><img src="https://upload-images.jianshu.io/upload_images/14618365-1b54255c3ec7b157.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1551852181(1).jpg"></p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> 杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> adb </tag>
            
            <tag> Andriod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建个人博客</title>
      <link href="2019/11/12/create-personal-blog-use-hexo/"/>
      <url>2019/11/12/create-personal-blog-use-hexo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 大熊BIGBEAR </category>
          
          <category> Blog </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大熊BIGBEAR </tag>
            
            <tag> article </tag>
            
            <tag> 建站 </tag>
            
            <tag> SPA </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
