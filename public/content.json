{"meta":{"title":"大熊的个人博客","subtitle":"","description":"","author":"xy","url":"http://www.pulsating.cn","root":"/"},"pages":[{"title":"关于","date":"2019-11-22T08:50:58.775Z","updated":"2019-11-22T08:50:58.775Z","comments":false,"path":"about/index.html","permalink":"http://www.pulsating.cn/about/index.html","excerpt":"","text":"联系我 mail:liuxiaoyu0810@qq.com tel:16605123405 pages:https://liuxiaoyucc.github.io/cv/ gitee:https://gitee.com/yuxiaoliu 教育经历哈尔滨师范大学 HARBIN COMMON UNIVERSITY 2013.9 - 2017.6 计算机科学与技术专业 学士学位 关于我 2年工作经验 2017.6 - 现在 php工程师 2017.9 - 现在 工作经历无锡NTT-DATA数据有限公司 2017.3 - 2017.7实习生 JUnit单元测试(日语相关) Zend FrameWork框架开发库存管理系统(熟悉Zend框架) perl基础 苏州小宇宙信息科技有限公司 2017.9 - 现在php工程师 云打印开放平台开发及维护,Api+后台 对接第三方支付接口,包括不限于达达,蜂鸟 外卖大优惠等功能型服务号开发,用户数50w+,PV在8k左右 * 外卖海报(饿了么商户平台+微信公众号+小程序) Sphinx全文检索 印题宝 前端页面交互 + 后端Api + 后台 * 开源项目 图片转单色位图 (bitmap) github地址 仿微信朋友圈 (uni-app) github地址 技能 编程语言:PHP JavaScript Java 框架:Zend Framework CI VueJs uni-app JQ 数据库:MYSQL Redis 系统:LINUX 版本控制:Git SVN IDE:PhpStrom HbuilderX"},{"title":"Repositories","date":"2019-11-22T08:50:58.778Z","updated":"2019-11-22T08:50:58.778Z","comments":false,"path":"repository/index.html","permalink":"http://www.pulsating.cn/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-11-22T08:50:58.775Z","updated":"2019-11-22T08:50:58.775Z","comments":false,"path":"categories/index.html","permalink":"http://www.pulsating.cn/categories/index.html","excerpt":"","text":""},{"title":"links","date":"2019-11-12T02:57:13.000Z","updated":"2019-11-22T08:50:58.778Z","comments":true,"path":"links/index.html","permalink":"http://www.pulsating.cn/links/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2019-11-15T15:04:30.000Z","updated":"2019-11-22T08:50:58.776Z","comments":true,"path":"charitable/index.html","permalink":"http://www.pulsating.cn/charitable/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-22T08:50:58.779Z","updated":"2019-11-22T08:50:58.779Z","comments":false,"path":"tags/index.html","permalink":"http://www.pulsating.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Composer的安装及使用","slug":"Install-and-use-Composer","date":"2020-01-08T15:00:03.000Z","updated":"2020-01-10T01:10:21.861Z","comments":true,"path":"2020/01/08/Install-and-use-Composer/","link":"","permalink":"http://www.pulsating.cn/2020/01/08/Install-and-use-Composer/","excerpt":"Composer 是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件 或许你还没听说过Composer, 亦或听说过 没听过,两万五千里 而没有使用过, 没关系, 跟着我一起, 用起来","text":"Composer 是 PHP 用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件 或许你还没听说过Composer, 亦或听说过 没听过,两万五千里 而没有使用过, 没关系, 跟着我一起, 用起来 网站 Composer官网 Composer中文网 环境 PHP 这是必须的吧, 啊哈哈哈, 如果还没有安装php, 我建议你先不要看下去了 安装随便打开一个上面提供的网址, 找到下载页, 或者直接点击Composer-Setup.exe开始下载exe文件 双击Composer-Setup.exe开始安装 这里勾上developer mode可以自定义安装目录, 也可以不勾选, Next 这里会自动识别出你的php安装目录, 如果没有识别出来, 需要自己选择一下, 所以要记得你的php装在什么位置了哦 Next 设置代理, 按需设置, 没有可以直接跳过 Next 这里来检查一下安装路径, 并且会自动帮你将composer加入到环境变量中, 这样就可以在全局使用了,填写无误可以点击 Install 耐心等待一小会, 等他安装完成, 跳出警告可以直接点击下一步, 看到下图, 就已经安装完成啦! Next-&gt;Finished 打开命令行, 输入composer -V, 会看到相应的版本信息. 命令行需要重新打开哦, 如果没有显示出相应信息, 则需要重启一下电脑, 至此, composer就安装完成了 使用我们先从一个空项目说起 随便在哪里新建一个空的目录 安装依赖从composer.json开始新建composer.json文件新建composer.json文件,输入下面内容, querylist是一个php的内容采集框架,后面我会写一篇关于它的使用方式, 这里我们使用它来演示composer 12345&#123; \"require\": &#123; \"jaeger/querylist\": \"4.0.*\" &#125;&#125; composer install在项目目录下执行composer install , composer会读取composer.json中的内容,来自动下载安装相关依赖 结束等待安装完成后我们会在项目根目录下看到一个vendor目录, 和一个composer.lock文件 从composer require开始命令1composer require jaeger/querylist 4.0.* 说明使用这种方式, composer会自动生成一个composer.json文件, 并将jaeger/querylist写入到其中, 然后根据composer.json下载相关依赖, 命令执行完毕后, 项目根目录下的结构, 和前面的方式是一样的 锁文件composer.lock生成每次安装新的依赖时, Composer会将其相关信息, 自动写入lock文件中, 包括对应版本 作用如果多人协同项目的话, 其他人在执行composer install时, 会先从lock文件中寻找该依赖和相应版本, 保证了所有人的版本一致, 可以理解为lock文件, ‘锁定‘ 了各依赖的版本 更新依赖版本注意, 当执行composer update 时, composer会获取依赖的最新版本, 并更新lock文件, 如果你只想更新特定的某个包, 那么可以在命令后指明要更新的包,像这样 1composer update jaeger/querylist # 后面可以继续添加多个, 会一并更新 下面是lock中, 我们刚刚装好的依赖的部分信息, 你可以自己动手打开lock文件看下全部 引入autoload.phpvendor目录生成后, Composer会帮我们准备一个自动加载文件, autoload.php, 我们只需引入这个文件, Composer会帮我们处理一切 普通项目引入入口文件我们在刚才的项目目录下新建一个可执行php文件, 命名为Index.php, 代码实现写入如下代码 这段代码抓取了我的个人博客首页的文章title和链接, 后面会有专门一篇文章介绍QueryList的使用, 很方便 12345678910111213&lt;?phprequire 'vendor/autoload.php';Use QL\\QueryList;$url = 'http://blog.pulsating.cn';$rules = [ 'title'=&gt; ['.article-title', 'text'], 'url'=&gt; ['.article-title', 'href']];$result = QueryList::rules($rules)-&gt;get($url)-&gt;queryData();print_r($result); 执行Index.php, 可以看到已经成功的使用了querylist依赖 在CodeIgniter中引入修改config.php将$config[&#39;composer_autoload&#39;]的值改为true, CI会自动在application/vendor/目录下寻找autoload.php文件并加载 123// application/config/config.php$config['composer_autoload'] = TRUE; 或者也可以这样, 将值写成具体路径 1$config['composer_autoload'] = 'vendor/autoload.php'; controller中使用直接在controller中的class外部use, 然后就可以使用QueryList了, 后续代码和上面相同 1use QL\\QueryList; 结束 不推荐手写composer.json文件, 推荐使用require的方式下载依赖, 手写很容易出错 packagist 是 Composer 主要的一个包信息存储库, 你可以分享自己的package到上面, 也可以在里面找其他人分享的package使用 QueryList 文中的QueryList官网","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"Composer","slug":"大熊BIGBEAR/PHP/Composer","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/Composer/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"Composer","slug":"Composer","permalink":"http://www.pulsating.cn/tags/Composer/"}]},{"title":"sphinx配置多索引","slug":"Sphinx-multi-index-configuration","date":"2020-01-08T09:50:52.000Z","updated":"2020-01-08T10:51:57.282Z","comments":true,"path":"2020/01/08/Sphinx-multi-index-configuration/","link":"","permalink":"http://www.pulsating.cn/2020/01/08/Sphinx-multi-index-configuration/","excerpt":"之前有写过sphinx的简单使用, 初次接触sphinx的同学可以先了解下, windows和linux都有 Linux下安装sphinx及配置 Windows下安装sphinx及配置本文记录以下如何在sphinx的配置文件sphinx.conf中, 配置多个索引, 并启动服务","text":"之前有写过sphinx的简单使用, 初次接触sphinx的同学可以先了解下, windows和linux都有 Linux下安装sphinx及配置 Windows下安装sphinx及配置本文记录以下如何在sphinx的配置文件sphinx.conf中, 配置多个索引, 并启动服务 修改配置文件原配置文件找到sphinx.conf配置文件, 假设当前已经有一个索引已经配置ok, 那么你的文件打开后应该类似这样的,其中数据源为article_source,对应文章表, 索引名称为article,对应article_source 12345678910111213141516171819202122232425262728293031323334353637383940414243source article_source&#123; type = mysql sql_host = SQLHOST sql_user = username sql_pass = password sql_db = DBNAME sql_port = 3306 # optional, default is 3306 sql_query_pre = SET NAMES utf8 sql_query = \\ SELECT id, title, content \\ FROM tablename&#125;index article&#123; source = article_source # 对应上面source的名称 path = /sphinx/article_data min_word_len = 1 ngram_len = 1 ngram_chars = U+3000..U+2FA1F&#125;indexer&#123; mem_limit = 512M&#125;searchd&#123; listen = 9312 listen = 9306:mysql41 log = /sphinx/searchd.log query_log = /sphinx/query.log read_timeout = 5 max_children = 30 pid_file = /sphinx/searchd.pid seamless_rotate = 1 preopen_indexes = 1 unlink_old = 1 binlog_path = /sphinx/data&#125; 现在我们有一个新表, 假设为音乐表, 我们需要根据歌曲名称, 和歌词来匹配对应的歌曲, 供用户去搜索, 也需要使用sphinx, 那么我们应该如何做呢? 构建新数据源打开sphinx.conf文件, 在article_source数据源的下方, 声明下新的音乐数据源 12345678910111213source music_source&#123; type = mysql sql_host = SQLHOST sql_user = username sql_pass = password sql_db = DBNAME sql_port = 3306 # optional, default is 3306 sql_query_pre = SET NAMES utf8 sql_query = \\ SELECT id, name, lyric \\ FROM music&#125; 配置index在index article下方, 构建音乐数据源的索引 12345678index music&#123; source = music_source # 对应上面source的名称 path = /sphinx/music_data min_word_len = 1 ngram_len = 1 ngram_chars = U+3000..U+2FA1F&#125; 这里要注意一下, 两个索引的path不能在同一个目录下, 也有可能是我操作有误, 放在同一目录下面一直报错 至此, 配置文件就配置好了 重新构建索引停止searchd服务构建索引时需要停掉运行中的searchd服务, 不然会失败, 原索引如果正在使用中, 请谨慎停止, 或者研究一下--rotate 参数 --rotate 用于轮换索引，在不停止服务的时候（searchd运行时）增加索引；searchd运行时不加会报错。 停止searchd命令: 1searchd -c source.conf --stop 重建索引命令: 1indexer -c sphinx.conf -all 启动searchd服务1searchd","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"},{"name":"Sphinx","slug":"大熊BIGBEAR/Mysql/Sphinx","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/Sphinx/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"},{"name":"Sphinx","slug":"Sphinx","permalink":"http://www.pulsating.cn/tags/Sphinx/"}]},{"title":"使用命令行执行CI控制器中的函数","slug":"Run-CI-method-in-cli","date":"2020-01-07T15:29:56.000Z","updated":"2020-01-08T03:25:56.016Z","comments":true,"path":"2020/01/07/Run-CI-method-in-cli/","link":"","permalink":"http://www.pulsating.cn/2020/01/07/Run-CI-method-in-cli/","excerpt":"有些时候我们在执行一些长时间的任务的时候, 使用浏览器运行是很不友好的, 看不到实时输出, 时间过长浏览器还会超时, 这时候就需要在命令行中来执行","text":"有些时候我们在执行一些长时间的任务的时候, 使用浏览器运行是很不友好的, 看不到实时输出, 时间过长浏览器还会超时, 这时候就需要在命令行中来执行 调用方式1php index.php controller method param tips: 需要将php路径设置到环境变量中, 或者指定php路径","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"CI","slug":"大熊BIGBEAR/PHP/CI","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/CI/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"CI","slug":"CI","permalink":"http://www.pulsating.cn/tags/CI/"}]},{"title":"美味的糖醋排骨, 一次成功, 超级好吃","slug":"sweet-and-sour-spareribs","date":"2020-01-06T13:38:12.000Z","updated":"2020-01-08T03:25:56.023Z","comments":true,"path":"2020/01/06/sweet-and-sour-spareribs/","link":"","permalink":"http://www.pulsating.cn/2020/01/06/sweet-and-sour-spareribs/","excerpt":"每个周末, 都要想办法犒劳一下自己, 的胃, 刚好畅大人想吃糖醋排骨, 得! 那就来吧, 没想到以前一做就砸, 这次竟然成功了, 牛B, 记录一下","text":"每个周末, 都要想办法犒劳一下自己, 的胃, 刚好畅大人想吃糖醋排骨, 得! 那就来吧, 没想到以前一做就砸, 这次竟然成功了, 牛B, 记录一下 食材煮 排骨 2根 葱段 任意 姜 4片 料酒/白酒 2勺 炒 食用油 冷水 半碗 冰糖/绵白糖 10粒/2勺 喜欢甜可以适当多放一些 香醋 1.5勺 老抽 0.5勺 千万别放多了 盐 1/3勺 汁 绵白糖 1勺 香醋 1勺 玉米淀粉 0.5勺 温水 2勺 步骤 排骨剁成块, 洗净 (买排骨的时候说下, 卖家会帮你剁的, 自己家里的菜刀就是个弟弟) 锅里加清水, 放入排骨, 葱段, 姜片, 白酒(不喜欢料酒的味道, 我用了白酒) 大火烧开后, 改成小火开始计时, 煮30分钟 捞出煮好的排骨, 再次用清水洗净, 控干水份(避免一会下锅的时候烫伤) 锅洗净烧热, 导入适量食用油, 油热后(凭感觉) 倒入排骨, 用中火炒至排骨变色后捞出(2分钟左右) 开大火再次将油烧热, 倒入排骨快速翻炒, 30秒后捞出, 装盘备用 另起一锅, 倒入半碗清水, 加入冰糖, 小火烧至冰糖融化, 微微变成黄色并起泡, 倒入炒好的排骨, 盐, 香醋, 加入老抽, 中火翻炒至排骨颜色均匀, 将调好的汁, 倒入锅中, 转大火迅速翻炒, 炒至颜色均匀, 并且无多于汤汁, 关火 Tips 排骨真的贵, 两根排骨近50块 最后浇的汁, 一定要搅拌均匀, 最后出国的排骨亮亮的, 很有食欲 畅大人和我都不喜欢料酒的味道, 我就用白酒替代了 二锅头, 哈哈哈哈哈 老抽千万不要放多了, 颜色很深的, 不把握的话可以用酱油代替, 口感影响不大 下次见","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"日常","slug":"大熊BIGBEAR/日常","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"美食","slug":"美食","permalink":"http://www.pulsating.cn/tags/%E7%BE%8E%E9%A3%9F/"},{"name":"食谱","slug":"食谱","permalink":"http://www.pulsating.cn/tags/%E9%A3%9F%E8%B0%B1/"}]},{"title":"解决PHP CI(CodeIgniter)框架使用insert_batch()批量插入时unique列冲突导致操作失败的问题","slug":"Custom-CI-insert-batch","date":"2019-12-27T15:32:39.000Z","updated":"2020-01-08T03:25:56.011Z","comments":true,"path":"2019/12/27/Custom-CI-insert-batch/","link":"","permalink":"http://www.pulsating.cn/2019/12/27/Custom-CI-insert-batch/","excerpt":"在CI中, 有时我们想将很多条数据, 批量插入到数据库中, 我们知道有insert_batch()这个函数, 但是如果insert_batch时, 遇到了mysql中的UNIQUE约束, 就会导致插入失败, 并回滚, 那么我们该如何让其跳过冲突的列, 并继续执行下面的数据呢?","text":"在CI中, 有时我们想将很多条数据, 批量插入到数据库中, 我们知道有insert_batch()这个函数, 但是如果insert_batch时, 遇到了mysql中的UNIQUE约束, 就会导致插入失败, 并回滚, 那么我们该如何让其跳过冲突的列, 并继续执行下面的数据呢? 既然insert_batch()满足不了我们的需求, 那我们就自己造一个, 首先我们找到insert_batch()函数的位置, 看下源码, 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# CI_VERSION = 3.1.11, 这个版本可以在system/core/CodeIgniter.php中查看# 位置在 system/database/DB_query_builder.php insert_batch()/** * Insert_Batch * * Compiles batch insert strings and runs the queries * * @param string $table Table to insert into * @param array $set An associative array of insert values * @param bool $escape Whether to escape values and identifiers * @return int Number of rows inserted or FALSE on failure */public function insert_batch($table, $set = NULL, $escape = NULL, $batch_size = 100)&#123; if ($set === NULL) &#123; if (empty($this-&gt;qb_set)) &#123; return ($this-&gt;db_debug) ? $this-&gt;display_error('db_must_use_set') : FALSE; &#125; &#125; else &#123; if (empty($set)) &#123; return ($this-&gt;db_debug) ? $this-&gt;display_error('insert_batch() called with no data') : FALSE; &#125; $this-&gt;set_insert_batch($set, '', $escape); &#125; if (strlen($table) === 0) &#123; if ( ! isset($this-&gt;qb_from[0])) &#123; return ($this-&gt;db_debug) ? $this-&gt;display_error('db_must_set_table') : FALSE; &#125; $table = $this-&gt;qb_from[0]; &#125; // Batch this baby $affected_rows = 0; for ($i = 0, $total = count($this-&gt;qb_set); $i &lt; $total; $i += $batch_size) &#123; if ($this-&gt;query($this-&gt;_insert_batch($this-&gt;protect_identifiers($table, TRUE, $escape, FALSE), $this-&gt;qb_keys, array_slice($this-&gt;qb_set, $i, $batch_size)))) &#123; $affected_rows += $this-&gt;affected_rows(); &#125; &#125; $this-&gt;_reset_write(); return $affected_rows;&#125; 可以看到, _insert_batch函数生成了sql语句, 最终由query函数执行, 并返回影响条数, 现在我们使用IGNORE关键字, 来改写一下sql语句那里就ok了, 为了不影响源码, 我们在insert_batch()下面新写一个insert_ignore_batch函数, 前面都省略, 直接从for循环这里开始 12345678910111213141516171819202122/** insert_batch() using INSERT IGNORE INTO instead of INSERT INTO* @ xyliu*/public function insert_ignore_batch($table, $set = NULL, $escape = NULL, $batch_size = 100)&#123; // ...这里的内容直接复制过来, 保持原样就可以, 这里太占篇幅被我省略掉了 // Batch this baby; $affected_rows = 0; for ($i = 0, $total = count($this-&gt;qb_set); $i &lt; $total; $i = $i + 100) &#123; $sql = $this-&gt;_insert_batch($this-&gt;protect_identifiers($table, TRUE, $escape, FALSE), $this-&gt;qb_keys, array_slice($this-&gt;qb_set, $i, $batch_size)); $sql = str_replace('INSERT INTO','INSERT IGNORE INTO',$sql); //忽略错误 if ($this-&gt;query($sql)) &#123; $affected_rows += $this-&gt;affected_rows(); &#125; &#125; $this-&gt;_reset_write(); return $affected_rows;;&#125; 我们在使用的时候可以直接像使用insert_batch()那样使用insert_ignore_batch 1$this-&gt;db-&gt;insert_ignore_batch();","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"CI","slug":"大熊BIGBEAR/PHP/CI","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/CI/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"CI","slug":"CI","permalink":"http://www.pulsating.cn/tags/CI/"}]},{"title":"心血来潮,迟到的煮红酒","slug":"Late-boiled-wine","date":"2019-12-27T14:13:14.000Z","updated":"2020-01-08T03:25:56.013Z","comments":true,"path":"2019/12/27/Late-boiled-wine/","link":"","permalink":"http://www.pulsating.cn/2019/12/27/Late-boiled-wine/","excerpt":"下班路上突然想起来圣诞节那天看到个微博热搜, 煮红酒, 突然间就好想试一下呀, 刚好家里还剩下的红酒, 说干就干, 吃过晚饭之后就到超市准备水果啦! 紧跟潮流!","text":"下班路上突然想起来圣诞节那天看到个微博热搜, 煮红酒, 突然间就好想试一下呀, 刚好家里还剩下的红酒, 说干就干, 吃过晚饭之后就到超市准备水果啦! 紧跟潮流! 食材 不用太严格, 放多少开心就好 苹果1个 大白梨1个 橙子1个 柠檬1个 草莓10+,多了浪费 蓝莓10+,反正我没买到,没放 八角2粒 香叶2片 肉桂1段 冰糖,多放一些,不然会很酸,我这次放了一大把,还是很酸哈哈哈 红酒1瓶,怕喝不了可以半瓶 步骤 抱歉做的时候忘记了拍照, 哈哈哈不过影响不大 苹果, 梨子, 橙子, 柠檬用半个就够了,剩下半个被我摆盘吃掉啦, 全部切片下锅 草莓, 蓝莓切开下锅 放入八角, 香叶, 肉桂, 冰糖 倒入红酒, 好奢侈, 整整用了一瓶, 就是它! 5. 盖上锅, 开小火, 开始计时, 喜欢酒味15分钟就可以喝了, 不想酒味太浓, 可以再久个5分钟, 但是不要太久了, 太久了就不剩下多少了6. 出锅啦, 准备好手机开始拍照哈哈哈哈哈哈哈哈哈7. 晒一下美照 买的水果很成功, 苹果超甜, 草莓超好吃, 现在坐在电脑前, 听着音乐, 喝着热乎乎的红酒, 吃着切剩下的水果, 太幸福了吧!","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"日常","slug":"大熊BIGBEAR/日常","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E6%97%A5%E5%B8%B8/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"美食","slug":"美食","permalink":"http://www.pulsating.cn/tags/%E7%BE%8E%E9%A3%9F/"},{"name":"食谱","slug":"食谱","permalink":"http://www.pulsating.cn/tags/%E9%A3%9F%E8%B0%B1/"}]},{"title":"Mysql max_allowed_packet 设置","slug":"Mysql-max_allowed_packet-setting","date":"2019-12-26T14:05:48.000Z","updated":"2020-01-08T03:25:56.015Z","comments":true,"path":"2019/12/26/Mysql-max_allowed_packet-setting/","link":"","permalink":"http://www.pulsating.cn/2019/12/26/Mysql-max_allowed_packet-setting/","excerpt":"max_allowed_packet 限制着你的mysql serve接收的数据包大小, 如果insert或者update时数据过大,超出max_allowed_packet的限制,mysql会抛出错误导致操作失败,那么我们来看下如何查看和设置max_allowed_packet","text":"max_allowed_packet 限制着你的mysql serve接收的数据包大小, 如果insert或者update时数据过大,超出max_allowed_packet的限制,mysql会抛出错误导致操作失败,那么我们来看下如何查看和设置max_allowed_packet 查看1234567mysql&gt; show global variables like 'max_allowed_packet';+--------------------+----------+| Variable_name | Value |+--------------------+----------+| max_allowed_packet | 16777216 |+--------------------+----------+1 row in set, 1 warning (0.00 sec) 可以看到当前max_allowed_packet设置为16M (1024 * 1024 * 16) 修改 通过mysql命令修改(临时,重启mysql会重置为原始大小) 123456789101112131415mysql&gt; set global max_allowed_packet=32*1024*1024;ERROR 2006 (HY000): MySQL server has gone awayNo connection. Trying to reconnect...Connection id: 6Current database: mineQuery OK, 0 rows affected (0.01 sec)mysql&gt; show global variables like 'max_allowed_packet';+--------------------+----------+| Variable_name | Value |+--------------------+----------+| max_allowed_packet | 33554432 |+--------------------+----------+1 row in set, 1 warning (0.00 sec) 可以看到现在的value值已经变为33554432,也就是32M 修改mysql配置文件(不会失效,直到再次修改配置文件) windows下,找到mysql安装目录下my.ini文件 找到这一行max_allowed_packet=16M将16M修改为你想要的大小,这里改为8M,保存 重启mysql服务,查看当前max_allowed_packet大小,发现已经成功修改为8M123456789101112mysql&gt; show global variables like 'max_allowed_packet';ERROR 2006 (HY000): MySQL server has gone awayNo connection. Trying to reconnect...Connection id: 2Current database: mine+--------------------+---------+| Variable_name | Value |+--------------------+---------+| max_allowed_packet | 8388608 |+--------------------+---------+1 row in set, 1 warning (0.01 sec)","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"}]},{"title":"Mysql table import and export 快速导出导入","slug":"Mysql-table-import-and-export","date":"2019-12-20T13:44:13.000Z","updated":"2020-01-03T03:45:27.006Z","comments":true,"path":"2019/12/20/Mysql-table-import-and-export/","link":"","permalink":"http://www.pulsating.cn/2019/12/20/Mysql-table-import-and-export/","excerpt":"","text":"导出1mysqldump -u root -p -q -e -t db_name table_name &gt; table_name.sql –quick，-q该选项在导出大表时很有用，它强制 mysqldump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中。 –extended-insert, -e使用具有多个VALUES列的INSERT语法。这样使导出文件更小，并加速导入时的速度。默认为打开状态，使用–skip-extended-insert取消选项。 -t仅导出表数据，不导出表结构 导入12use db_name;source table_name.sql;","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"}]},{"title":"JS实现首字母排序","slug":"First-letter-sort-use-JS","date":"2019-11-22T08:56:10.000Z","updated":"2020-01-08T03:25:56.012Z","comments":true,"path":"2019/11/22/First-letter-sort-use-JS/","link":"","permalink":"http://www.pulsating.cn/2019/11/22/First-letter-sort-use-JS/","excerpt":"一个按照姓名首字母排序的功能,支持数字,字母,符号,中文混合排序","text":"一个按照姓名首字母排序的功能,支持数字,字母,符号,中文混合排序 规则 首字为中文则转换成小写 大小写均转换成小写比较,避免任意大写字母排在任意小写字母前 大写字母 == 小写字母 &gt; 数字 &gt; 符号 (这里数字和符号可以在最前面,因为业务需要被我拿到了最后面) 效果12345678910111213141516171819202122// 排序前this.friends = [ &#123;nick_name: 'cc'&#125;, &#123;nick_name: 'Xin'&#125;, &#123;nick_name: 'xiao李zi'&#125;, &#123;nick_name: '__大熊'&#125;, &#123;nick_name: 'Tian'&#125;, &#123;nick_name: '3day'&#125;, &#123;nick_name: '第一帅'&#125;, &#123;nick_name: '大猪蹄子'&#125;,];// 排序后this.friends = [ &#123;nick_name: 'cc'&#125;, &#123;nick_name: '第一帅'&#125;, &#123;nick_name: '大猪蹄子'&#125;, &#123;nick_name: 'Tian'&#125;, &#123;nick_name: 'Xin'&#125;, &#123;nick_name: 'xiao李zi'&#125;, &#123;nick_name: '3day'&#125;, &#123;nick_name: '__大熊'&#125;,]; Library hotoo/pinyin 实现 安装hotoo/pinyin 1npm install pinyin -S 引入 1import pinyin from 'pinyin'; 逻辑 1234567891011121314151617181920212223242526272829303132/** * 根据姓名或昵称排序, * 维护两个数组,分别存入字母开头和数字符号开头的项 * 这里如果想把数字符号开头的名字排在最前面,就只用一个w_users就可以了,排序的时候会默认在最前面 * @param &#123;Array&#125; list 需要排序的数组对象,格式类似上面效果中的数据 * @return &#123;Array&#125; sort_list 排序后的数组对象 */function name_sort(list) &#123; let w_users = []; //字母开头 let n_users = []; //数字 or 符号 list.forEach(item =&gt; &#123; let first_word = pinyin(item.nick_name, &#123; style: pinyin.STYLE_FIRST_LETTER &#125;); first_word = first_word[0][0]; first_word = first_word.substr(0, 1); item.nick_name_sort = first_word + item.nick_name;//增加一个临时排序属性, 不然排序后还要处理原属性 let regx = /^[A-Za-z]*$/; //正则匹配出字母开头的 let flag = regx.test(first_word); flag &amp;&amp; w_users.push(item) || n_users.push(item); //根据类型决定存入哪个数组 &#125;) //利用新增的nick_name_sort排序 w_users.sort((a,b) =&gt; a.nick_name_sort.substr(0, 1).toLowerCase().charCodeAt(0) - b.nick_name_sort.substr(0, 1).toLowerCase().charCodeAt(0)); n_users.sort((a,b) =&gt; a.nick_name_sort.substr(0, 1).toLowerCase().charCodeAt(0) - b.nick_name_sort.substr(0, 1).toLowerCase().charCodeAt(0)); let sort_list = w_users.concat(n_users); return sort_list;&#125;","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"前端","slug":"大熊BIGBEAR/前端","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"大熊BIGBEAR/前端/JavaScript","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Vue","slug":"大熊BIGBEAR/前端/JavaScript/Vue","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/Vue/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://www.pulsating.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.pulsating.cn/tags/JavaScript/"},{"name":"Vue","slug":"Vue","permalink":"http://www.pulsating.cn/tags/Vue/"},{"name":"排序","slug":"排序","permalink":"http://www.pulsating.cn/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"GD库实现图片合并","slug":"Use-GD-library-to-implement-image-merge","date":"2019-11-15T15:24:42.000Z","updated":"2020-01-07T07:31:12.307Z","comments":true,"path":"2019/11/15/Use-GD-library-to-implement-image-merge/","link":"","permalink":"http://www.pulsating.cn/2019/11/15/Use-GD-library-to-implement-image-merge/","excerpt":"","text":"","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"图像处理","slug":"大熊BIGBEAR/图像处理","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"GD","slug":"GD","permalink":"http://www.pulsating.cn/tags/GD/"}]},{"title":"Vue动态绑定ref","slug":"Vue-dynamically-binds-ref","date":"2019-11-13T01:54:18.000Z","updated":"2020-01-08T03:25:56.019Z","comments":true,"path":"2019/11/13/Vue-dynamically-binds-ref/","link":"","permalink":"http://www.pulsating.cn/2019/11/13/Vue-dynamically-binds-ref/","excerpt":"记录一下动态绑定及使用ref的方法","text":"记录一下动态绑定及使用ref的方法 情景需要在使用weex的&lt;list&gt;组件时,需要实现一个滚动到具体某一个&lt;cell&gt;的功能 实现在for循环标签上动态绑定ref1&lt;div v-for=\"(item, index) in list\" :key=\"index\" :ref=\"`item$&#123;index&#125;`\"&gt;&lt;/div&gt; 获取ref并滚动到指定位置引入weex的dom 模块1const dom = weex.requireModule('dom'); 动态获取ref,并使用scrollToElement滚动到指定元素12const el = this.$refs[`message$&#123;length-1&#125;`][0];dom.scrollToElement(el, &#123;&#125;);","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"前端","slug":"大熊BIGBEAR/前端","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"大熊BIGBEAR/前端/JavaScript","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"Vue","slug":"大熊BIGBEAR/前端/JavaScript/Vue","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/Vue/"},{"name":"uni-app","slug":"大熊BIGBEAR/前端/JavaScript/Vue/uni-app","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/Vue/uni-app/"},{"name":"WEEX","slug":"大熊BIGBEAR/前端/JavaScript/Vue/WEEX","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/Vue/WEEX/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://www.pulsating.cn/tags/Vue/"},{"name":"Js","slug":"Js","permalink":"http://www.pulsating.cn/tags/Js/"},{"name":"uni-app","slug":"uni-app","permalink":"http://www.pulsating.cn/tags/uni-app/"},{"name":"WEEX","slug":"WEEX","permalink":"http://www.pulsating.cn/tags/WEEX/"},{"name":"随手记","slug":"随手记","permalink":"http://www.pulsating.cn/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"}]},{"title":"使用imagemagick实现两张或多张图片图片拼接 覆盖","slug":"Using-imagemagick-to-achieve-the-splicing-of-two-or-more-pictures","date":"2019-11-12T15:40:50.000Z","updated":"2020-01-08T03:25:56.018Z","comments":true,"path":"2019/11/12/Using-imagemagick-to-achieve-the-splicing-of-two-or-more-pictures/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Using-imagemagick-to-achieve-the-splicing-of-two-or-more-pictures/","excerpt":"Imagemagick是一个强大的图像处理库,号称命令行上的photoshop 使用GD扩展实现和本篇文章相同的效果 php的imagick扩展和imagemagick的安装教程 1. 问题场景&emsp;&emsp;在进行手上的一个海报项目时,遇到了这样一个需求:&emsp;&emsp;如图,在用户制作一张海报后,最后保存的时候,图片主体body是用户制作的海报,footer是由左右两张二维码组成的,左边为公众号的带参数二维码,右侧是用户自定义的二维码,美工提供一张通用的footer模版,程序来负责动态将二维码替换上去,最终拼接成下面图片示例的样子","text":"Imagemagick是一个强大的图像处理库,号称命令行上的photoshop 使用GD扩展实现和本篇文章相同的效果 php的imagick扩展和imagemagick的安装教程 1. 问题场景&emsp;&emsp;在进行手上的一个海报项目时,遇到了这样一个需求:&emsp;&emsp;如图,在用户制作一张海报后,最后保存的时候,图片主体body是用户制作的海报,footer是由左右两张二维码组成的,左边为公众号的带参数二维码,右侧是用户自定义的二维码,美工提供一张通用的footer模版,程序来负责动态将二维码替换上去,最终拼接成下面图片示例的样子 2. 为什么使用imagemagick&emsp;&emsp;整个项目后台使用的是PHP语言,既然涉及到图片处理,第一个想到的肯定是大名鼎鼎的GD库扩展,在使用gd库尝试后,因为性能的原因,可能是我使用的方式不对,合成一张图片的时间长的忍受不了,又果断放弃了,后面又想到使用imagemagick这个工具,试着使用iamgemagick来重写一遍,果然,速度快了许多 3. 实现思路&emsp;&emsp;a. 将body和footer上下拼接起来&emsp;&emsp;b. 分别将获取的两个二维码图片根据坐标置入左下和右下注:我觉得先进行b步骤,再拼接,效率可能会高一丢丢,但是我也懒得测了,就没有改动 4. 代码部分直接使用的是imagemagick的命令行指令,没有使用imagick扩展,已上线稳定使用 12345678910111213141516public function merge_img($file_name, $ad_file_name, $user_qrcode,$template_id) &#123; $body = $file_name;//这个是body的路径 $footer = APPPATH . '../static/img/footer.png';//footer是一张模板图 $qrcode = APPPATH . '../' . $user_qrcode;//右下角用户自定义的二维码 $param_qrcode = $this-&gt;param_qrcode($template_id);//左下角的带参数二维码,param_qrcode()方法返回其路径 $cmd = 'convert -append '.$header.' '.$footer.' '.$ad_file_name.'';//1.将body和footer拼接,因为body和footer是固定等宽的,所以直接拼接,+append为横向拼接,-append为纵向拼接 $result = exec($cmd);//执行 $cmd = 'composite -geometry +634+1093 '.$qrcode.' '.$ad_file_name.' '.$ad_file_name.'';//将用户二维码置入右下角,'+634+1093'为置入位置的坐标 $result = exec($cmd); $cmd = 'composite -geometry +27+1093 '.$param_qrcode.' '.$ad_file_name.' '.$ad_file_name.'';//将带参数二维码置入左下角 $result = exec($cmd); &#125;","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"图像处理","slug":"大熊BIGBEAR/图像处理","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"imagick","slug":"imagick","permalink":"http://www.pulsating.cn/tags/imagick/"},{"name":"Imagemagick","slug":"Imagemagick","permalink":"http://www.pulsating.cn/tags/Imagemagick/"}]},{"title":"ThinkPHP5框架搭建","slug":"Getting-started-with-thinkphp5","date":"2019-11-12T15:38:23.000Z","updated":"2020-01-08T03:25:56.013Z","comments":true,"path":"2019/11/12/Getting-started-with-thinkphp5/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Getting-started-with-thinkphp5/","excerpt":"","text":"thinkphp基于MVC的方式来组织,MVC是一种经典的程序设计理念,此模式将你的项目分成三个部分,模型层(model),视图层(view),`控制层(controller),MVC为这三个三次的首字母缩写 下载ThinkPHP框架官网下载:http://www.thinkphp.cn/thinkphp有核心包和完整包之分,我这里选择的是最新版5.0.21的完整版* 核心包:仅包含thinkphp运行的最主要文件,不包含扩展类,示例,文档* 完整包:核心包的基础上增加了扩展类,示例及文档 下载后将文件解压到你的localhost根目录下,我的路径是:D:\\phpStudy\\WWW,然后重命名目录名为myphpstudy,方便我们使用接下来在浏览器地址栏输入:http://localhost/mythinkphp/public/,显示出如下内容,说明你的thinkphp框架可以正常使用了. 2.目录结构 12345678910111213141516171819202122232425262728293031323334353637383940414243444546project 应用部署目录├─application 应用目录（可设置）│ ├─common 公共模块目录（可更改）│ ├─index 模块目录(可更改)│ │ ├─config.php 模块配置文件│ │ ├─common.php 模块函数文件│ │ ├─controller 控制器目录│ │ ├─model 模型目录│ │ ├─view 视图目录│ │ └─ ... 更多类库目录│ ├─command.php 命令行工具配置文件│ ├─common.php 应用公共（函数）文件│ ├─config.php 应用（公共）配置文件│ ├─database.php 数据库配置文件│ ├─tags.php 应用行为扩展定义文件│ └─route.php 路由配置文件├─extend 扩展类库目录（可定义）├─public WEB 部署目录（对外访问目录）│ ├─static 静态资源存放目录(css,js,image)│ ├─index.php 应用入口文件│ ├─router.php 快速测试文件│ └─.htaccess 用于 apache 的重写├─runtime 应用的运行时目录（可写，可设置）├─vendor 第三方类库目录（Composer）├─thinkphp 框架系统目录│ ├─lang 语言包目录│ ├─library 框架核心类库目录│ │ ├─think Think 类库包目录│ │ └─traits 系统 Traits 目录│ ├─tpl 系统模板目录│ ├─.htaccess 用于 apache 的重写│ ├─.travis.yml CI 定义文件│ ├─base.php 基础定义文件│ ├─composer.json composer 定义文件│ ├─console.php 控制台入口文件│ ├─convention.php 惯例配置文件│ ├─helper.php 助手函数文件（可选）│ ├─LICENSE.txt 授权说明文件│ ├─phpunit.xml 单元测试配置文件│ ├─README.md README 文件│ └─start.php 框架引导文件├─build.php 自动生成定义文件（参考）├─composer.json composer 定义文件├─LICENSE.txt 授权说明文件├─README.md README 文件├─think 命令行入口文件 Hello World这时你可以将框架目录导入到你的IDE中了,方便我们编辑代码,下面我们来试着输出Hello World 吧!找到并打开如图所示的文件位置,将其中代码进行修改 修改后的代码 12345678910&lt;?phpnamespace app\\index\\controller;class Index&#123; public function index() &#123; return \"Hello World\"; &#125;&#125; 这时我们去浏览器地址栏输入http://localhost/mythinkphp/public/就可以看到我们改动后的内容了,是不是很简单呢!","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"ThinkPHP","slug":"大熊BIGBEAR/PHP/ThinkPHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/ThinkPHP/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"ThinkPHP","slug":"ThinkPHP","permalink":"http://www.pulsating.cn/tags/ThinkPHP/"}]},{"title":"PHP 单色位图取模","slug":"PHP-monochrome-bitmap-module","date":"2019-11-12T15:24:09.000Z","updated":"2020-01-08T03:25:56.016Z","comments":true,"path":"2019/11/12/PHP-monochrome-bitmap-module/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/PHP-monochrome-bitmap-module/","excerpt":"2018-11-27日更新:&emsp;&emsp;由于没有找到生成.bmp格式图片的好办法,改为使用.wbmp格式,转换和读取都改为.wbmp格式,原来的bmp2hex函数逻辑没有变化,改名为wbmp2hex,并不再使用ImageCreateFromBMP函数,可以收藏一下这个函数还是有用的,最新的代码我也提供了下载在文章末尾","text":"2018-11-27日更新:&emsp;&emsp;由于没有找到生成.bmp格式图片的好办法,改为使用.wbmp格式,转换和读取都改为.wbmp格式,原来的bmp2hex函数逻辑没有变化,改名为wbmp2hex,并不再使用ImageCreateFromBMP函数,可以收藏一下这个函数还是有用的,最新的代码我也提供了下载在文章末尾 准备阶段: pctoLCD2002网上找到的一款取模软件,可以读取.bmp图片并生成字模,当然我们还是要用代码来完成,这个只是起到了一个对照作用,我将它放在了我的网盘下供大家下载链接：点我下载pctoLCD2002 密码：2lyl PHP GD扩展强大的PHP图像生成和处理扩展 Windows自带画图工具主要用来生成.bpm格式的图片,目前我还没有找到好的用PHP将.jpg和.png图片转为单色.bmp格式图片的办法,暂时只好用画图工具来生成 操作步骤分解演示一. 使用画图工具获得.bmp格式图片 使用画图工具打开一张事先准备好的图片,另存为.bmp单色位图,这样我们就得到了一张.bmp格式的图片,白色背景,只有黑色 或者我们自己动手来画一张,打开画图工具,调整画布大小为你需要的尺寸,示例为100*70像素,取消勾选保持纵横比,调整好后点击确定,然后我们可以用刷子随便画些什么在画布上,你喜欢就好,然后重复前面的另存为.bmp单色位图步骤 pctoLCD2002也可以新建一幅.bmp图片,并且非常简单 二. 使用pctoLCD2002取模找到PCtoLCD2002.exe并双击打开 1. 规则解析,及本文配置项参考在取字模之前我们先来说下PCtoLCD2002设置项和取模规则 配置信息: 取模说明:a. 逐行式逐列式:顾名思义就是读取每张图片时取点时是逐行还是逐列的b. 取模走向:逆向:从低位到高位顺向:从高位到低位举例:*星号代表图中非空白的像素点,_代表空白的像素点,取八位为一个字节* _ _ _ _ _ _ _代表一个字节(为了方便查看,每个符号键我加入了一个空格,实际是没有的)逆向即是从后往前写,表示为00000001顺向即是从前往后写,表示为10000000c. 输出数制:这里选择十六进制,因需选择,不够我需要的是十六进制,后面的代码也只有十六进制的 本文取模规则:逐行式 顺向 十六进制从第一行开始,每行每隔8个像素点为一个字节,每行结尾最后不足8位,用0补满 2. 生成字模设置好规则后,打开之前制作的.bmp图片,点击生成字模,这时下方会生成出十六进制串,如图: 但是这还不是我最后想要的格式,需要处理一下: 去掉开始处和结束处的文件路径 去掉所有的标点符号,和&#39;{&#39; &#39;}&#39; 去掉十六进制的标识部分,所有的0x 最后得到一串连贯的字符串,类似: 10000000000000007F8000000000000000000000000003FFC00000000000000000000000000000003FF80000000 这就是我们最终需要的部分了!下面我们用代码来实现这个功能: 问题解决:一. 实现过程及思路0. 生成单色位图卡在这里好久,钻进了死胡同,其实.wbmp的图片完全符合我的要求:GD库就可以将jpg/png转换成wbmp格式,使用时可以调节threshold参数,解释如下,我理解为精度不知道准不准确,也没有查到阀值到底是什么意思… 生成.wbmp格式图片代码示例: 1234$filename = 'static/img/1.jpg';$path = 'static/img/11.wbmp';$image = getimagesize($filename);jpeg2wbmp($filename, $path, $image[1], $image[0], 5);//threshold == 5时,和给的软件转换后结果完全一致 图片样式: 1. 读取.wbmp格式图片(原读取.bmp格式)使用gd库的imagecreatefromwbmp函数: 12$filename = 'static/img/11.wbmp';$im = imagecreatefromwbmp($filename); 安装好GD库扩展后,我发现gd库只能读取.wbmp文件,并不支持.bmp文件,我的gd库版本信息如下gd_info(),经过一番google,找到了一个可以使用的读取.bmp的函数ImageCreateFromBMP(),感谢前辈 2. 逐个像素读取可以读取.wbmp格式了,我们该如何能得出每个像素的颜色值呢?通过查看gd库文档过程,我发现一个函数imagecolorat(),可以根据传入的位置,获取每个像素的索引值使用示例: 1234567// 取得一点的颜色$file_name = '';//wbmp图片路径$im = imagecreatefromwbmp($file_name);//读取wbmp格式$start_x = 5;//行,从0开始$start_y = 10;//列,从0开始$color_index = imagecolorat($im, $start_x, $start_y);print_r($color_index); 3. 获取图片宽高第2步中可以获取每个像素中的值了,但是我们总不能每个点都手动传入,这时我们就需要获取图片的宽高了 gd库中有获取图片宽高的函数imagesx()和imagesy(),代码示例: 1234$im = imagecreatefromwbmp($file_name);//读取bmp格式,非gd库$width = imagesx($im);$height = imagesy($im);echo $width.'*'.$height; 到这里,最主要的部分都已经可以获取到了,后面就是逻辑部分了(代码中可以看到具体实现方式): 根据图片的宽高,逐行逐点读取每个像素的值,每8位组合成1个字节,然后取模,再转为16进制 检测每一行的最后是否满足8个像素,不足则用0补满 最终将每一行组合到一起,组成16进制字符串 二. 源码整个过程可以大概分为三步完成,你可以根据自己的需求参考或者直接copy使用,如果对你有帮助,希望可以点个赞,转载请注明本篇文章链接地址及作者,谢谢! 将普通jpg/png格式转为.wbmp1234$filename = 'static/img/1.jpg';$path = 'static/img/11.wbmp';$image = getimagesize($filename);jpeg2wbmp($filename, $path, $image[1], $image[0], 5);//threshold == 5时,和给的软件转换后结果完全一致 读取.wbmp格式图片12$filename = 'static/img/11.wbmp';$im = imagecreatefromwbmp($filename); 将.wbmp转为hex_str12345678910111213141516171819202122232425262728293031323334353637383940/** * @param $im * @return string * Commented by liu */ public function wbmp2hex($im) &#123; $width = imagesx($im); $height = imagesy($im); $num = $width % 8; $hex_str = ''; for ($start_y = 0; $start_y &lt; $height; $start_y++) &#123; $binary_str = ''; for ($start_x = 0; $start_x &lt; $width; $start_x++) &#123; $color_index = imagecolorat($im, $start_x, $start_y);//指定像素的索引值 $binary_str .= $color_index == 1 ? 1 : 0; if ((1 + $start_x) % 8 == 0 &amp;&amp; $start_x != 0) &#123;//每隔8位转换1次 $hex = (string)dechex(bindec($binary_str)); $hex = strlen($hex) == 1 ? '0' . $hex : $hex;//补0 $hex_str .= $hex; $binary_str = ''; &#125; &#125; //这时如果$binary_str不为空,说明需要向后补0 if ($num) &#123; for ($i = 0; $i &lt; 8 - $num; $i++) &#123; $binary_str .= 0; &#125; $hex = (string)dechex(bindec($binary_str)); $hex = strlen($hex) == 1 ? '0' . $hex : $hex;//补0 $hex_str .= $hex; &#125; &#125; $hex_str = strtoupper($hex_str);//转为大写 return $hex_str; &#125; 最后附上读取.bmp格式图片的函数: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;?php/** * Commented by liu * Create on 2018/11/23 17:51 * Class Image_api */class Image_api&#123; function __construct ()&#123; &#125; /** * ImageCreateFromBMP函数,读取bmp格式图片 * 注:phpGD扩展中没有ImageCreateFromBMP函数,只有ImageCreateFromWBMP * @param $filename * @return bool|resource * Commented by liu */ function ImageCreateFromBMP($filename) &#123; //Ouverture du fichier en mode binaire if (!$f1 = fopen($filename, \"rb\")) return FALSE; //1 : Chargement des ent�tes FICHIER $FILE = unpack(\"vfile_type/Vfile_size/Vreserved/Vbitmap_offset\", fread($f1, 14)); if ($FILE['file_type'] != 19778) return FALSE; //2 : Chargement des ent�tes BMP $BMP = unpack('Vheader_size/Vwidth/Vheight/vplanes/vbits_per_pixel' . '/Vcompression/Vsize_bitmap/Vhoriz_resolution' . '/Vvert_resolution/Vcolors_used/Vcolors_important', fread($f1, 40)); $BMP['colors'] = pow(2, $BMP['bits_per_pixel']); if ($BMP['size_bitmap'] == 0) $BMP['size_bitmap'] = $FILE['file_size'] - $FILE['bitmap_offset']; $BMP['bytes_per_pixel'] = $BMP['bits_per_pixel'] / 8; $BMP['bytes_per_pixel2'] = ceil($BMP['bytes_per_pixel']); $BMP['decal'] = ($BMP['width'] * $BMP['bytes_per_pixel'] / 4); $BMP['decal'] -= floor($BMP['width'] * $BMP['bytes_per_pixel'] / 4); $BMP['decal'] = 4 - (4 * $BMP['decal']); if ($BMP['decal'] == 4) $BMP['decal'] = 0; //3 : Chargement des couleurs de la palette $PALETTE = array(); if ($BMP['colors'] &lt; 16777216) &#123; $PALETTE = unpack('V' . $BMP['colors'], fread($f1, $BMP['colors'] * 4)); &#125; //4 : Cr�ation de l'image $IMG = fread($f1, $BMP['size_bitmap']); $VIDE = chr(0); $res = imagecreatetruecolor($BMP['width'], $BMP['height']); $P = 0; $Y = $BMP['height'] - 1; while ($Y &gt;= 0) &#123; $X = 0; while ($X &lt; $BMP['width']) &#123; if ($BMP['bits_per_pixel'] == 24) $COLOR = unpack(\"V\", substr($IMG, $P, 3) . $VIDE); elseif ($BMP['bits_per_pixel'] == 16) &#123; $COLOR = unpack(\"n\", substr($IMG, $P, 2)); $COLOR[1] = $PALETTE[$COLOR[1] + 1]; &#125; elseif ($BMP['bits_per_pixel'] == 8) &#123; $COLOR = unpack(\"n\", $VIDE . substr($IMG, $P, 1)); $COLOR[1] = $PALETTE[$COLOR[1] + 1]; &#125; elseif ($BMP['bits_per_pixel'] == 4) &#123; $COLOR = unpack(\"n\", $VIDE . substr($IMG, floor($P), 1)); if (($P * 2) % 2 == 0) $COLOR[1] = ($COLOR[1] &gt;&gt; 4); else $COLOR[1] = ($COLOR[1] &amp; 0x0F); $COLOR[1] = $PALETTE[$COLOR[1] + 1]; &#125; elseif ($BMP['bits_per_pixel'] == 1) &#123; $COLOR = unpack(\"n\", $VIDE . substr($IMG, floor($P), 1)); if (($P * 8) % 8 == 0) $COLOR[1] = $COLOR[1] &gt;&gt; 7; elseif (($P * 8) % 8 == 1) $COLOR[1] = ($COLOR[1] &amp; 0x40) &gt;&gt; 6; elseif (($P * 8) % 8 == 2) $COLOR[1] = ($COLOR[1] &amp; 0x20) &gt;&gt; 5; elseif (($P * 8) % 8 == 3) $COLOR[1] = ($COLOR[1] &amp; 0x10) &gt;&gt; 4; elseif (($P * 8) % 8 == 4) $COLOR[1] = ($COLOR[1] &amp; 0x8) &gt;&gt; 3; elseif (($P * 8) % 8 == 5) $COLOR[1] = ($COLOR[1] &amp; 0x4) &gt;&gt; 2; elseif (($P * 8) % 8 == 6) $COLOR[1] = ($COLOR[1] &amp; 0x2) &gt;&gt; 1; elseif (($P * 8) % 8 == 7) $COLOR[1] = ($COLOR[1] &amp; 0x1); $COLOR[1] = $PALETTE[$COLOR[1] + 1]; &#125; else return FALSE; imagesetpixel($res, $X, $Y, $COLOR[1]); $X++; $P += $BMP['bytes_per_pixel']; &#125; $Y--; $P += $BMP['decal']; &#125; //Fermeture du fichier fclose($f1); return $res; &#125;&#125;","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"图像处理","slug":"大熊BIGBEAR/图像处理","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"},{"name":"GD","slug":"大熊BIGBEAR/PHP/GD","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/GD/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"GD","slug":"GD","permalink":"http://www.pulsating.cn/tags/GD/"},{"name":"pctoLCD2002","slug":"pctoLCD2002","permalink":"http://www.pulsating.cn/tags/pctoLCD2002/"},{"name":"bmp","slug":"bmp","permalink":"http://www.pulsating.cn/tags/bmp/"},{"name":"位图","slug":"位图","permalink":"http://www.pulsating.cn/tags/%E4%BD%8D%E5%9B%BE/"}]},{"title":"Sphinx Linux 下安装过程","slug":"Sphinx-Linux-install","date":"2019-11-12T15:17:58.000Z","updated":"2020-01-08T03:25:56.017Z","comments":true,"path":"2019/11/12/Sphinx-Linux-install/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Sphinx-Linux-install/","excerpt":"&emsp;&emsp;之前记录过一篇Sphinx在Windows上的安装步骤,这篇当然就是Linux系统的安装步骤啦","text":"&emsp;&emsp;之前记录过一篇Sphinx在Windows上的安装步骤,这篇当然就是Linux系统的安装步骤啦 1. 下载sphinx包下载的是当前最新版3.1.1,我将压缩包存在了/usr/local/src/目录下wget -q http://sphinxsearch.com/files/sphinx-3.1.1-612d99f-linux-amd64.tar.gz 下载时间可能比较长需要耐心等待一会 2. 解压tar zxf sphinx-3.1.1-612d99f-linux-amd64.tar.gz解压mv sphinx-3.1.1 sphinx 重命名一下,方便操作吧cd sphinx 进入看下目录列表,其中var是需要后面创建的,请继续往下看 3. 编辑配置文件配置文件在etc目录下,有两个配置文件示例,其中sphinx.conf是完整版的配置项,并且有英文注释,有兴趣的可以了解一下,我们这里使用下面的sphinx.conf.dist简洁版复制一份sphinx.conf.dist到bin目录下,重命名为sphinx.confvi sphinx.conf 打开编辑配置文件,这里我直接贴出我自己的配置内容,可以正常跑起来的,关于其他配置项可以看我的另外一篇Sphinx 配置文件sphinx.conf配置项全解析 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//数据源配置,也就是数据来源source item&#123; type = mysql sql_host = HOST //数据库 sql_user = USER //用户名 sql_pass = PASS //数据库密码 sql_db = poster 数据库名称 sql_port = 3306 # optional, default is 3306 sql_query_pre = SET NAMES utf8 sql_query = \\ SELECT id,name,UNIX_TIMESTAMP(ctime) \\ FROM item sql_attr_timestamp = ctime&#125;//索引配置index item&#123; source = item //数据源 path = /usr/local/src/sphinx/var/data 索引存放目录 min_word_len = 1 ngram_len = 1 ngram_chars = U+3000..U+2FA1F&#125;indexer&#123; mem_limit = 128M&#125;//搜索服务searchd&#123; listen = 9312 listen = 9306:mysql41 log = /usr/local/src/sphinx/var/log/searchd.log query_log = /usr/local/src/sphinx/var/log/query.log read_timeout = 5 max_children = 30 pid_file = /usr/local/src/sphinx/var/log/searchd.pid seamless_rotate = 1 preopen_indexes = 1 unlink_old = 1 binlog_path = /usr/local/src/sphinx/var/data&#125; 配置文件中需要配置几个目录.分别是log,query_log,pid_file,binlog_path,我们回到sphinx下,新建一个目录var,然后进入再新建一个data目录和一个log目录mkdir varcd varmkdir datamkdir log如图: 建立索引首先进入到bin目录下,执行下面的指令./indexer -c sphinx.conf item item为刚才在配置文件中建立的索引名称 这里有个大坑,耽误了好久时间,我用的是ubuntu的系统,当我在执行./indexer -c sphinx.conf item时,出现了一个错误:sql_connect: failed to load libmysqlclient (or libmariadb),加载libmysqlclient失败,然后我在/usr/lib/x86_64-linux-gnu/目录下发现了我的libmysqlclient,并不是没有安装的然后我通过google试着找出问题的答案,然而只有两个相关结果,解决方式是建立软链接,并且将libmysqlclient所在的目录加入到环境变量,我照做了之后发现问题并没有顺利解决,最后,我试着下载所有的依赖apt-get install libmysqlclient18 libmysqlclient-dev libmysqlcppconn7 libmysqlcppconn-dev等待完成,然后忽略error,执行apt-get update等待结束后,再执行建立索引命令,解决了这个问题 5. 开启搜索服务./searchd","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"},{"name":"Sphinx","slug":"大熊BIGBEAR/Mysql/Sphinx","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/Sphinx/"},{"name":"Linux","slug":"大熊BIGBEAR/Linux","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Linux/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"},{"name":"Sphinx","slug":"Sphinx","permalink":"http://www.pulsating.cn/tags/Sphinx/"},{"name":"Linux","slug":"Linux","permalink":"http://www.pulsating.cn/tags/Linux/"},{"name":"Sphinxapi","slug":"Sphinxapi","permalink":"http://www.pulsating.cn/tags/Sphinxapi/"}]},{"title":"Sphinx 配置文件sphinx.conf配置项全解析","slug":"Sphinx-sphinx.conf-analysis","date":"2019-11-12T15:12:36.000Z","updated":"2020-01-08T03:25:56.018Z","comments":true,"path":"2019/11/12/Sphinx-sphinx.conf-analysis/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Sphinx-sphinx.conf-analysis/","excerpt":"source：数据源，数据是从什么地方来的。 index：索引，当有数据源之后，从数据源处构建索引。索引实际上就是相当于一个字典检索。有了整本字典内容以后，才会有字典检索。 searchd：提供搜索查询服务。它一般是以deamon的形式运行在后台的。 indexer：构建索引的服务。当要重新构建索引的时候，就是调用indexer这个命令。","text":"source：数据源，数据是从什么地方来的。 index：索引，当有数据源之后，从数据源处构建索引。索引实际上就是相当于一个字典检索。有了整本字典内容以后，才会有字典检索。 searchd：提供搜索查询服务。它一般是以deamon的形式运行在后台的。 indexer：构建索引的服务。当要重新构建索引的时候，就是调用indexer这个命令。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517// 数据源src1source src1&#123; // 说明数据源的类型。数据源的类型可以是：mysql，pgsql，mssql，xmlpipe，odbc，python // 有人会奇怪，python是一种语言怎么可以成为数据源呢？ // python作为一种语言，可以操作任意其他的数据来源来获取数据，更多数据请看：（http://www.coreseek.cn/products-install/python/） type = mysql // 下面是sql数据库特有的端口，用户名，密码，数据库名等。 sql_host = localhost sql_user = test sql_pass = sql_db = test sql_port = 3306 // 如果是使用unix sock连接可以使用这个。 # sql_sock = /tmp/mysql.sock // indexer和mysql之间的交互，需要考虑到效率和安全性。 // 比如考虑到效率，他们两者之间的交互需要使用压缩协议；考虑到安全，他们两者之间的传输需要使用ssl // 那么这个参数就代表这个意思，0/32/2048/32768 无/使用压缩协议/握手后切换到ssl/Mysql 4.1版本身份认证。 # mysql_connect_flags = 32 // 当mysql_connect_flags设置为2048（ssl）的时候，下面几个就代表ssl连接所需要使用的几个参数。 # mysql_ssl_cert = /etc/ssl/client-cert.pem # mysql_ssl_key = /etc/ssl/client-key.pem # mysql_ssl_ca = /etc/ssl/cacert.pem // mssql特有，是否使用windows登陆 # mssql_winauth = 1 // mssql特有，是使用unicode还是单字节数据。 # mssql_unicode = 1 # request Unicode data from server // odbc的dsn串 # odbc_dsn = DBQ=C:\\data;DefaultDir=C:\\data;Driver=&#123;Microsoft Text Driver (*.txt; *.csv)&#125;; // sql某一列的缓冲大小，一般是针对字符串来说的。 // 为什么要有这么一种缓冲呢？ // 有的字符串，虽然长度很长，但是实际上并没有使用那么长的字符，所以在Sphinx并不会收录所有的字符，而是给每个属性一个缓存作为长度限制。 // 默认情况下非字符类型的属性是1KB，字符类型的属性是1MB。 // 而如果想要配置这个buffer的话，就可以在这里进行配置了。 # sql_column_buffers = content=12M, comments=1M // indexer的sql执行前需要执行的操作。 # sql_query_pre = SET NAMES utf8 # sql_query_pre = SET SESSION query_cache_type=OFF // indexer的sql执行语句 sql_query = \\ SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content \\ FROM documents // 有的时候有多个表，我们想要查询的字段在其他表中。这个时候就需要对sql_query进行join操作。 // 而这个join操作可能非常慢，导致建立索引的时候特别慢，那么这个时候，就可以考虑在sphinx端进行join操作了。 // sql_joined_field是增加一个字段，这个字段是从其他表查询中查询出来的。 // 这里封号后面的查询语句是有要求的，如果是query，则返回id和查询字段，如果是payload-query，则返回id，查询字段和权重。 // 并且这里的后一个查询需要按照id进行升序排列。 # sql_joined_field = tags from query; SELECT docid, CONCAT('tag',tagid) FROM tags ORDER BY docid ASC # sql_joined_field = wtags from payload-query; SELECT docid, tag, tagweight FROM tags ORDER BY docid ASC // 外部文件字段，意思就是一个表中，有一个字段存的是外部文件地址，但是实际的字段内容在文件中。比如这个字段叫做content_file_path。 // 当indexer建立索引的时候，查到这个字段，就读取这个文件地址，然后加载，并进行分词和索引建立等操作。 # sql_file_field = content_file_path // 当数据源数据太大的时候，一个sql语句查询下来往往很有可能锁表等操作。 // 那么我么就可以使用多次查询，那么这个多次查询就需要有个范围和步长，sql_query_range和sql_range_step就是做这个使用的。 // 获取最大和最小的id，然后根据步长来获取数据。比如下面的例子，如果有4500条数据，这个表建立索引的时候就会进行5次sql查询。 // 而5次sql查询每次的间隔时间是使用sql_ranged_rhrottle来进行设置的。单位是毫秒。 # sql_query_range = SELECT MIN(id),MAX(id) FROM documents # sql_range_step = 1000 # sql_ranged_throttle = 0 // 下面都是些不同属性的数据了 // 先要了解属性的概念：属性是存在索引中的，它不进行全文索引，但是可以用于过滤和排序。 // uint无符号整型属性 sql_attr_uint = group_id // bool属性 # sql_attr_bool = is_deleted // 长整型属性 # sql_attr_bigint = my_bigint_id // 时间戳属性，经常被用于做排序 sql_attr_timestamp = date_added // 字符串排序属性。一般我们按照字符串排序的话，我们会将这个字符串存下来进入到索引中，然后在查询的时候比较索引中得字符大小进行排序。 // 但是这个时候索引就会很大，于是我们就想到了一个方法，我们在建立索引的时候，先将字符串值从数据库中取出，暂存，排序。 // 然后给排序后的数组分配一个序号，然后在建立索引的时候，就将这个序号存入到索引中去。这样在查询的时候也就能完成字符串排序的操作。 // 这，就是这个字段的意义。 # sql_attr_str2ordinal = author_name // 浮点数属性，经常在查询地理经纬度的时候会用到。 # sql_attr_float = lat_radians # sql_attr_float = long_radians // 多值属性（MVA） // 试想一下，有一个文章系统，每篇文章都有多个标签，这个文章就叫做多值属性。 // 我要对某个标签进行查询过滤，那么在建立查询的时候就应该把这个标签的值放入到索引中。 // 这个字段，sql_attr_multi就是用来做这个事情的。 # sql_attr_multi = uint tag from query; SELECT docid, tagid FROM tags # sql_attr_multi = uint tag from ranged-query; \\ # SELECT docid, tagid FROM tags WHERE id&gt;=$start AND id&lt;=$end; \\ # SELECT MIN(docid), MAX(docid) FROM tags // 字符串属性。 # sql_attr_string = stitle // 文档词汇数记录属性。比如下面就是在索引建立的时候增加一个词汇数的字段 # sql_attr_str2wordcount = stitle // 字符串字段，可全文搜索，可返回原始文本信息。 # sql_field_string = author // 文档词汇数记录字段，可全文搜索，可返回原始信息 # sql_field_str2wordcount = title // 取后查询，在sql_query执行后立即操作。 // 它和sql_query_post_index的区别就是执行时间不同 // sql_query_post是在sql_query执行后执行，而sql_query_post_index是在索引建立完成后才执行。 // 所以如果要记录最后索引执行时间，那么应该在sql_query_post_index中执行。 # sql_query_post = // 参考sql_query_post的说明。 # sql_query_post_index = REPLACE INTO counters ( id, val ) \\ # VALUES ( 'max_indexed_id', $maxid ) // 命令行获取信息查询。 // 什么意思呢？ // 我们进行索引一般只会返回主键id，而不会返回表中的所有字段。 // 但是在调试的时候，我们一般需要返回表中的字段，那这个时候，就需要使用sql_query_info。 // 同时这个字段只在控制台有效，在api中是无效的。 sql_query_info = SELECT * FROM documents WHERE id=$id // 比如有两个索引，一个索引比较旧，一个索引比较新，那么旧索引中就会有数据是旧的。 // 当我要对两个索引进行搜索的时候，哪些数据要按照新的索引来进行查询呢。 // 这个时候就使用到了这个字段了。 // 这里的例子（http://www.coreseek.cn/docs/coreseek_4.1-sphinx_2.0.1-beta.html#conf-sql-query-killlist）给的非常清晰了。 # sql_query_killlist = SELECT id FROM documents WHERE edited&gt;=@last_reindex // 下面几个压缩解压的配置都是为了一个目的：让索引重建的时候不要影响数据库的性能表现。 // SQL数据源解压字段设置 # unpack_zlib = zlib_column // MySQL数据源解压字段设置 # unpack_mysqlcompress = compressed_column # unpack_mysqlcompress = compressed_column_2 // MySQL数据源解压缓冲区设置 # unpack_mysqlcompress_maxsize = 16M // xmlpipe的数据源就是一个xml文档 # type = xmlpipe // 读取数据源的命令 # xmlpipe_command = cat /home/yejianfeng/instance/coreseek/var/test.xml // 字段 # xmlpipe_field = subject # xmlpipe_field = content // 属性 # xmlpipe_attr_timestamp = published # xmlpipe_attr_uint = author_id // UTF-8修复设置 // 只适用xmlpipe2数据源，数据源中有可能有非utf-8的字符，这个时候解析就有可能出现问题 // 如果设置了这个字段，非utf-8序列就会全部被替换为空格。 # xmlpipe_fixup_utf8 = 1&#125;// sphinx的source是有继承这么一种属性的，意思就是除了父source之外，这个source还有这个特性source src1throttled : src1&#123; sql_ranged_throttle = 100&#125;// 索引test1index test1&#123; // 索引类型，包括有plain，distributed和rt。分别是普通索引/分布式索引/增量索引。默认是plain。 # type = plain // 索引数据源 source = src1 // 索引文件存放路径 path = /home/yejianfeng/instance/coreseek/var/data/test1 // 文档信息的存储模式，包括有none,extern,inline。默认是extern。 // docinfo指的就是数据的所有属性（field）构成的一个集合。 // 首先文档id是存储在一个文件中的（spa） // 当使用inline的时候，文档的属性和文件的id都是存放在spa中的，所以进行查询过滤的时候，不需要进行额外操作。 // 当使用extern的时候，文档的属性是存放在另外一个文件（spd）中的，但是当启动searchd的时候，会把这个文件加载到内存中。 // extern就意味着每次做查询过滤的时候，除了查找文档id之外，还需要去内存中根据属性进行过滤。 // 但是即使这样，extern由于文件大小小，效率也不低。所以不是有特殊要求，一般都是使用extern docinfo = extern // 缓冲内存锁定。 // searchd会讲spa和spi预读取到内存中。但是如果这部分内存数据长时间没有访问，则它会被交换到磁盘上。 // 设置了mlock就不会出现这个问题，这部分数据会一直存放在内存中的。 mlock = 0 // 词形处理器 // 词形处理是什么意思呢？比如在英语中，dogs是dog的复数，所以dog是dogs的词干，这两个实际上是同一个词。 // 所以英语的词形处理器会讲dogs当做dog来进行处理。 morphology = none // 词形处理有的时候会有问题，比如将gps处理成gp，这个设置可以允许根据词的长度来决定是否要使用词形处理器。 # min_stemming_len = 1 // 词形处理后是否还要检索原词？ # index_exact_words = 1 // 停止词，停止词是不被索引的词。 # stopwords = /home/yejianfeng/instance/coreseek/var/data/stopwords.txt // 自定义词形字典 # wordforms = /home/yejianfeng/instance/coreseek/var/data/wordforms.txt // 词汇特殊处理。 // 有的一些特殊词我们希望把它当成另外一个词来处理。比如，c++ =&gt; cplusplus来处理。 # exceptions = /home/yejianfeng/instance/coreseek/var/data/exceptions.txt // 最小索引词长度，小于这个长度的词不会被索引。 min_word_len = 1 // 字符集编码类型，可以为sbcs,utf-8。对于Coreseek，还可以有zh_cn.utf-8,zh_ch.gbk,zh_ch.big5 charset_type = sbcs // 字符表和大小写转换规则。对于Coreseek，这个字段无效。 # 'sbcs' default value is # charset_table = 0..9, A..Z-&gt;a..z, _, a..z, U+A8-&gt;U+B8, U+B8, U+C0..U+DF-&gt;U+E0..U+FF, U+E0..U+FF # # 'utf-8' default value is # charset_table = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F // 忽略字符表。在忽略字符表中的前后词会被连起来当做一个单独关键词处理。 # ignore_chars = U+00AD // 是否启用通配符，默认为0，不启用 # enable_star = 1 // min_prefix_len,min_infix_len,prefix_fields,infix_fields都是在enable_star开启的时候才有效果。 // 最小前缀索引长度 // 为什么要有这个配置项呢？ // 首先这个是当启用通配符配置启用的前提下说的，前缀索引使得一个关键词产生了多个索引项，导致索引文件体积和搜索时间增加巨大。 // 那么我们就有必要限制下前缀索引的前缀长度，比如example，当前缀索引长度设置为5的时候，它只会分解为exampl，example了。 # min_prefix_len = 0 // 最小索引中缀长度。理解同上。 # min_infix_len = 0 // 前缀索引和中缀索引字段列表。并不是所有的字段都需要进行前缀和中缀索引。 # prefix_fields = filename # infix_fields = url, domain // 词汇展开 // 是否尽可能展开关键字的精确格式或者型号形式 # expand_keywords = 1 // N-Gram索引的分词技术 // N-Gram是指不按照词典，而是按照字长来分词，这个主要是针对非英文体系的一些语言来做的（中文、韩文、日文） // 对coreseek来说，这两个配置项可以忽略。 # ngram_len = 1 # ngram_chars = U+3000..U+2FA1F // 词组边界符列表和步长 // 哪些字符被看做分隔不同词组的边界。 # phrase_boundary = ., ?, !, U+2026 # horizontal ellipsis # phrase_boundary_step = 100 // 混合字符列表 # blend_chars = +, &amp;, U+23 # blend_mode = trim_tail, skip_pure // html标记清理，是否从输出全文数据中去除HTML标记。 html_strip = 0 // HTML标记属性索引设置。 # html_index_attrs = img=alt,title; a=title; // 需要清理的html元素 # html_remove_elements = style, script // searchd是预先打开全部索引还是每次查询再打开索引。 # preopen = 1 // 字典文件是保持在磁盘上还是将他预先缓冲在内存中。 # ondisk_dict = 1 // 由于在索引建立的时候，需要建立临时文件和和副本，还有旧的索引 // 这个时候磁盘使用量会暴增，于是有个方法是临时文件重复利用 // 这个配置会极大减少建立索引时候的磁盘压力，代价是索引建立速度变慢。 # inplace_enable = 1 # inplace_hit_gap = 0 # preallocated hitlist gap size # inplace_docinfo_gap = 0 # preallocated docinfo gap size # inplace_reloc_factor = 0.1 # relocation buffer size within arena # inplace_write_factor = 0.1 # write buffer size within arena // 在经过过短的位置后增加位置值 # overshort_step = 1 // 在经过 停用词 处后增加位置值 # stopword_step = 1 // 位置忽略词汇列表 # hitless_words = all # hitless_words = hitless.txt // 是否检测并索引句子和段落边界 # index_sp = 1 // 字段内需要索引的HTML/XML区域的标签列表 # index_zones = title, h*, th&#125;index test1stemmed : test1&#123; path = /home/yejianfeng/instance/coreseek/var/data/test1stemmed morphology = stem_en&#125;index dist1&#123; type = distributed local = test1 local = test1stemmed // 分布式索引（distributed index）中的远程代理和索引声明 agent = localhost:9313:remote1 agent = localhost:9314:remote2,remote3 # agent = /var/run/searchd.sock:remote4 // 分布式索引（ distributed index）中声明远程黑洞代理 # agent_blackhole = testbox:9312:testindex1,testindex2 // 远程代理的连接超时时间 agent_connect_timeout = 1000 // 远程查询超时时间 agent_query_timeout = 3000&#125;index rt&#123; type = rt path = /home/yejianfeng/instance/coreseek/var/data/rt // RT索引内存限制 # rt_mem_limit = 512M // 全文字段定义 rt_field = title rt_field = content // 无符号整数属性定义 rt_attr_uint = gid // 各种属性定义 # rt_attr_bigint = guid # rt_attr_float = gpa # rt_attr_timestamp = ts_added # rt_attr_string = author&#125;indexer&#123; // 建立索引的时候，索引内存限制 mem_limit = 32M // 每秒最大I/O操作次数，用于限制I/O操作 # max_iops = 40 // 最大允许的I/O操作大小，以字节为单位，用于I/O节流 # max_iosize = 1048576 // 对于XMLLpipe2数据源允许的最大的字段大小，以字节为单位 # max_xmlpipe2_field = 4M // 写缓冲区的大小，单位是字节 # write_buffer = 1M // 文件字段可用的最大缓冲区大小，字节为单位 # max_file_field_buffer = 32M&#125;// 搜索服务配置searchd&#123; # listen = 127.0.0.1 # listen = 192.168.0.1:9312 # listen = 9312 # listen = /var/run/searchd.sock // 监听端口 listen = 9312 listen = 9306:mysql41 // 监听日志 log = /home/yejianfeng/instance/coreseek/var/log/searchd.log // 查询日志 query_log = /home/yejianfeng/instance/coreseek/var/log/query.log // 客户端读超时时间 read_timeout = 5 // 客户端持久连接超时时间，即客户端读一次以后，持久连接，然后再读一次。中间这个持久连接的时间。 client_timeout = 300 // 并行执行搜索的数目 max_children = 30 // 进程id文件 pid_file = /home/yejianfeng/instance/coreseek/var/log/searchd.pid // 守护进程在内存中为每个索引所保持并返回给客户端的匹配数目的最大值 max_matches = 1000 // 无缝轮转。防止 searchd 轮换在需要预取大量数据的索引时停止响应 // 当进行索引轮换的时候，可能需要消耗大量的时间在轮换索引上。 // 但是启动了无缝轮转，就以消耗内存为代价减少轮转的时间 seamless_rotate = 1 // 索引预开启，是否强制重新打开所有索引文件 preopen_indexes = 1 // 索引轮换成功之后，是否删除以.old为扩展名的索引拷贝 unlink_old = 1 // 属性刷新周期 // 就是使用UpdateAttributes()更新的文档属性每隔多少时间写回到磁盘中。 # attr_flush_period = 900 // 索引字典存储方式 # ondisk_dict_default = 1 // 用于多值属性MVA更新的存储空间的内存共享池大小 mva_updates_pool = 1M // 网络通讯时允许的最大的包的大小 max_packet_size = 8M // 崩溃日志文件 # crash_log_path = /home/yejianfeng/instance/coreseek/var/log/crash // 每次查询允许设置的过滤器的最大个数 max_filters = 256 // 单个过滤器允许的值的最大个数 max_filter_values = 4096 // TCP监听待处理队列长度 # listen_backlog = 5 // 每个关键字的读缓冲区的大小 # read_buffer = 256K // 无匹配时读操作的大小 # read_unhinted = 32K // 每次批量查询的查询数限制 max_batch_queries = 32 // 每个查询的公共子树文档缓存大小 # subtree_docs_cache = 4M // 每个查询的公共子树命中缓存大小 # subtree_hits_cache = 8M // 多处理模式（MPM）。 可选项；可用值为none、fork、prefork，以及threads。 默认在Unix类系统为form，Windows系统为threads。 workers = threads # for RT to work // 并发查询线程数 # dist_threads = 4 // 二进制日志路径 # binlog_path = # disable logging # binlog_path = /home/yejianfeng/instance/coreseek/var/data # binlog.001 etc will be created there // 二进制日志刷新 # binlog_flush = 2 // 二进制日志大小限制 # binlog_max_log_size = 256M // 线程堆栈 # thread_stack = 128K // 关键字展开限制 # expansion_limit = 1000 // RT索引刷新周期 # rt_flush_period = 900 // 查询日志格式 // 可选项，可用值为plain、sphinxql，默认为plain。 # query_log_format = sphinxql // MySQL版本设置 # mysql_version_string = 5.0.37 // 插件目录 # plugin_dir = /usr/local/sphinx/lib // 服务端默认字符集 # collation_server = utf8_general_ci // 服务端libc字符集 # collation_libc_locale = ru_RU.UTF-8 // 线程服务看守 # watchdog = 1 // 兼容模式 # compat_sphinxql_magics = 1&#125; 转载自: 轩脉刃de刀光剑影","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"},{"name":"Sphinx","slug":"大熊BIGBEAR/Mysql/Sphinx","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/Sphinx/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"},{"name":"Sphinx","slug":"Sphinx","permalink":"http://www.pulsating.cn/tags/Sphinx/"}]},{"title":"从0到1,Sphinx Windows本地安装及PHP使用Sphinxapi示例","slug":"install-Sphinx-in-Windows-and-use-Sphinxapi-in-php","date":"2019-11-12T15:01:44.000Z","updated":"2020-01-08T03:25:56.021Z","comments":true,"path":"2019/11/12/install-Sphinx-in-Windows-and-use-Sphinxapi-in-php/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/install-Sphinx-in-Windows-and-use-Sphinxapi-in-php/","excerpt":"&emsp;&emsp;最近一个项目需要实现这样一个需求:mysql数据库一张表中存了百万张菜品图片,需要根据菜品名称或描述,模糊匹配出符合条件的菜品图片,并展示出来 12select * from table_name where column like '%鱼香肉丝%'; &emsp;&emsp;如果像上面那样,直接使用mysql like查询的话,会进行全表扫描,不走索引,大大的影响查询效率,所以开始学习使用Sphinx全文搜索引擎,下面记录下第一次配置使用的过程,以及过程中遇到的问题和疑问,望指正.","text":"&emsp;&emsp;最近一个项目需要实现这样一个需求:mysql数据库一张表中存了百万张菜品图片,需要根据菜品名称或描述,模糊匹配出符合条件的菜品图片,并展示出来 12select * from table_name where column like '%鱼香肉丝%'; &emsp;&emsp;如果像上面那样,直接使用mysql like查询的话,会进行全表扫描,不走索引,大大的影响查询效率,所以开始学习使用Sphinx全文搜索引擎,下面记录下第一次配置使用的过程,以及过程中遇到的问题和疑问,望指正. 1. 下载sphinx源码压缩包点击下载按照自己的需求,下载对应的版本,我这里下载的是Windows x64 binaries 3.1.1 版本 2. 下载后的sphinx源码目录 3.配置文件打开etc目录,里面有三个文件,example,sql是创建测试表的脚本,我们稍后会用到,sphinx.conf.dist是完整版默认配置,这里我选择了sphinx-min.conf.dist简化版,暂时可以满足需求,复制一份到bin目录下,并且重命名为sphinx.conf. 4. sphinx.config文件配置配置文件的几个组成部分: source 数据源,这里配置你要进行全文检索的数据的来源 index 索引,从上面的数据源处构建索引,相当于字典检索,要有整本字典内容后才会有索引 indexer 构建索引,需要重新构建索引时,其实就是调用indexer这个命令 searchd 提供搜索查询的服务,后台运行123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657source src1 ## src1为数据源命名的名称,可以根据数据源的属性更改&#123; type = mysql ## 数据源,本项目使用mysql sql_host = localhost ## 数据库服务器,这里因为是测试,使用的是本地数据库 sql_user = root # 数据库用户名 sql_pass = root # 数据库密码 sql_db = hongbao ## 数据库名称,替换成你自己的数据库名称 sql_port = 3306 ## 数据库端口,默认3306 sql_query_pre = SET NAMES utf8 ## 如果你的数据库不是uft8编码的,注释掉本行 sql_query = \\ ## 主查询,查询出所有在检索范围的数据 SELECT id, group_id, UNIX_TIMESTAMP(date_added) AS date_added, title, content \\ FROM documents sql_attr_uint = group_id ## 属性 sql_attr_timestamp = date_added ## 属性,可用来排序&#125;index test1 ## 索引名称,自行命名&#123; source = src1 ## 基于这个数据源构建索引 path = D:/sphinx/data/ ## 存放索引的目录,自己创建 charset_table = 0..9, A..Z-&gt;a..z, _, a..z, U+410..U+42F-&gt;U+430..U+44F, U+430..U+44F ## 指定utf-8的编码表 mlock = 0 morphology = none ## 词形处理器,如果检索中文用不到,dogs&lt;==&gt;dog min_word_len = 1 ## 最小索引词长度,小于这个长度的词不会被索引 ngram_len = 1 ## 简单分词,只支持0和1,如果要搜索中文,请指定为1 ngram_chars = U+3000..U+2FA1F ## 需要分词的字符,如果要搜索中文,请放开这行 html_strip = 0 ## html标记清理,是否从输出全文数据中去除HTML标记&#125;indexer&#123; # memory limit, in bytes, kiloytes (16384K) or megabytes (256M) # optional, default is 128M, max is 2047M, recommended is 256M to 1024M mem_limit = 128M ## 建立索引的时候,索引内存限制&#125;searchd&#123; listen = 9312 ## 监听端口 listen = 9306:mysql41 log = D:/sphinx/log/searchd.log ## 监听日志 query_log = D:/sphinx/log/query.log ## 查询日志 pid_file = D:/sphinx/log/searchd.pid ## ## 进程id文件 read_timeout = 5 ## 客户端读超时时间 client_timeout = 300 ## 客户端持久连接超时时间,即客户端读一次以后,持久连接,然后再读一次,中间这个持久连接的时间 max_children = 30 ## 并行执行搜索的数目 persistent_connections_limit = 30 preopen_indexes = 1 ## 索引预开启，是否强制重新打开所有索引文件 unlink_old = 1 ## 索引轮换成功之后，是否删除以.old为扩展名的索引拷贝 max_packet_size = 8M ## 网络通讯时允许的最大的包的大小 max_filters = 256 ## 每次查询允许设置的过滤器的最大个数 max_filter_values = 4096 ## 单个过滤器允许的值的最大个数 max_batch_queries = 32 ## 每次批量查询的查询数限制 workers = threads # for RT to work 多处理模式（MPM）。 可选项；可用值为none、fork、prefork，以及threads。 默认在Unix类系统为form，Windows系统为threads。&#125; __注:配置文件更改完成之后,回到根目录新建配置文件中使用到的data和log两个目录__ 导入源码里提供的示例数据,执行etc目录下的example.sql脚本: 或者使用mysql图形处理界面工具: 5. 根据sphinx.conf创建索引12## 构建索引语法:indexer -c 配置文件 索引名字 打开windows 命令提示行工具,进入到sphinx/bin目录下 启动sphinx检索服务,后台常驻 查看索引创建情况重新打开一个命令行窗口, 6. Sphinxapi.php使用(或者安装php扩展)sphinx提供了各种语言的代码,php使用sphinx,只需要引入sphinxapi.php,打开根目录下的api目录,将sphinxapi.php文件复制到你的项目目录下,方便调用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?php/** * Demo.php * Create on 2018/8/29 10:42 * Create by liu * Administrator */class Demo extends CI_Controller&#123; private $sphinx; public function __construct() &#123; parent::__construct(); require_once APPPATH . 'libraries/Sphinxapi.php'; $this-&gt;sphinx = new SphinxClient(); &#125; public function sphinx() &#123; //设置操作哪个sphinx服务器 $this-&gt;sphinx-&gt;setServer('localhost',9312); $keyword = \"银行\";//要搜索的关键字 $index = 'bank';//索引名称 //查询出关键字所在的主键id $this-&gt;sphinx-&gt;_limit = 2000; $res = $this-&gt;sphinx-&gt;Query($keyword,$index); echo '&lt;pre&gt;'; if (isset($res['matches']))&#123; $ids = array_keys($res['matches']); $ids = implode(',',$ids); &#125;else&#123; print_r(\"内容不存在\"); return; &#125; //获取匹配到的主键id $mysql_con = mysqli_connect('localhost','root','','hongbao');//本地数据库 mysqli_query($mysql_con,'set name utf8'); mysqli_query($mysql_con,'use hongbao'); $sql = \"select * from bank where id in ($ids)\"; $res = mysqli_query($mysql_con,$sql); while ($row = mysqli_fetch_assoc($res))&#123; $data[] = $row; &#125; foreach ($data as $key =&gt; $v)&#123; $v = str_replace($keyword,\"&lt;font color='red'&gt;&#123;$keyword&#125;&lt;/font&gt;\",$v); $data[$key] = $v; &#125; print_r($data); &#125;&#125; 代码运行结果","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"},{"name":"Sphinx","slug":"大熊BIGBEAR/Mysql/Sphinx","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/Sphinx/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"},{"name":"Sphinx","slug":"Sphinx","permalink":"http://www.pulsating.cn/tags/Sphinx/"},{"name":"Sphinxapi","slug":"Sphinxapi","permalink":"http://www.pulsating.cn/tags/Sphinxapi/"}]},{"title":"Windows+PHP5.6环境下安装imagick扩展和imagemagick","slug":"install-imagick-extend-and-imagemagick-in-windows-php5.6","date":"2019-11-12T14:40:35.000Z","updated":"2020-01-08T03:25:56.022Z","comments":true,"path":"2019/11/12/install-imagick-extend-and-imagemagick-in-windows-php5.6/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/install-imagick-extend-and-imagemagick-in-windows-php5.6/","excerpt":"其实回过头看,安装过程中最容易出错的反而是下载阶段,一定要将imagemagick和imagick的版本和phpinfo的信息对应好!下图中几点需要注意,每个人的信息可能不同,根据你自己的phpinfo来选择接下来的下载的程序及扩展版本: PHP Version: PHP版本 compiler: MSVC11 Architecture: x86 Thread Safety: disabled 非线程安全,也就是NTS,相反的则是线程安全TS","text":"其实回过头看,安装过程中最容易出错的反而是下载阶段,一定要将imagemagick和imagick的版本和phpinfo的信息对应好!下图中几点需要注意,每个人的信息可能不同,根据你自己的phpinfo来选择接下来的下载的程序及扩展版本: PHP Version: PHP版本 compiler: MSVC11 Architecture: x86 Thread Safety: disabled 非线程安全,也就是NTS,相反的则是线程安全TS 正文部分 一. Imagemagick部分1. 下载 下载Imagemagick程序下载地址:Imagemagick程序下载地址打开链接,找到Imagemagick的下载区域,根据phpinfo我应该选择vc11,32位的下载链接,也就是下图中圈出的部分 2. 安装 解压缩 将下载后的压缩包,直接解压到你想放置的目录下,不要有中文和特殊字符,我把它放在了D:\\install_dir\\imagemagick下,并且记住不要忘记这个路径 环境变量配置 为了更方便,全局都可以使用,我们需要配置下环境变量,进入刚才解压缩的目录,再进入/bin目录下,复制当前路径,我的路径为D:\\install_dir\\imagemagick\\bin,右击我的电脑(计算机),按照下图依次打开环境变量配置位置,将路径粘贴进去(注意:Path中可能有多个路径,多个路径间用;分号分割就好) 导入DLL文件 进入imagemagick的bin目录下,复制所有.dll后缀的文件到你的php根目录下(我使用的是Phpstudy建的环境,我的php路径为:D:\\phpStudy\\php\\php-5.6.27-nts)我的版本有147个文件,这里有个小技巧,在文件管理器右上角搜索.dll,然后全选复制,会方便一点 二. Imagick扩展部分&emsp;&emsp;首先imagick一个php扩展,可以使用php控制imagemagick程序 1. 下载 下载imagick 下载地址 仍然是根据你的phpinfo选择对应的版本,根据文章开始的图片,我应该选择php_imagick-3.4.3-5.6-ts-vc11-x86.zip 2. 安装 php_imagick.dll 找到刚下载的压缩包,解压后,找到php_imagick.dll文件,将其复制粘贴到php根目录下的ext目录下 其他.DLL文件 将解压后的imagick目录下的其他.dll后缀的文件全部复制粘贴到php根目录下 php.ini 找到php.ini文件并打开编辑,加入extension=php_imagick.dll这一行 三. 重启到这里基本上可以成功安装了,imagemagick需要重启电脑后才会生效,重启电脑后,查看phpinfo,如果成功安装了,会看到下图中的部分","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"大熊BIGBEAR/PHP","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/PHP/"},{"name":"图像处理","slug":"大熊BIGBEAR/图像处理","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"PHP","slug":"PHP","permalink":"http://www.pulsating.cn/tags/PHP/"},{"name":"imagick","slug":"imagick","permalink":"http://www.pulsating.cn/tags/imagick/"},{"name":"Imagemagick","slug":"Imagemagick","permalink":"http://www.pulsating.cn/tags/Imagemagick/"}]},{"title":"Mysql Review 之引擎","slug":"Mysql-Review-engine","date":"2019-11-12T14:31:31.000Z","updated":"2020-01-07T07:31:12.302Z","comments":true,"path":"2019/11/12/Mysql-Review-engine/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Mysql-Review-engine/","excerpt":"","text":"1. Mysql具有多个引擎,都隐藏在Mysql服务器内,全都可以执行CERATE TABLE 和SELECT等命令2. 不同的引擎有不同的功能和灵活性,下面列出几个必须要知道的引擎: InnoDB 是一个可靠的事务处理引擎,不支持全文本搜索.__ MEMORY 功能上等于MyISAM,但由于数据存储在内存(不是磁盘),速度很快,特别适用于临时表. MyISAM 性能极高,支持全文本搜索.但是支持事务处理. 3. 引擎类型可以混用 注:外键不可以跨引擎,即使用一个引擎的表不能引用具有不用引擎的表的外键,这也是混用引擎的一大缺陷","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"},{"name":"Mysql基础","slug":"大熊BIGBEAR/Mysql/Mysql基础","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/Mysql%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"},{"name":"Mysql基础","slug":"Mysql基础","permalink":"http://www.pulsating.cn/tags/Mysql%E5%9F%BA%E7%A1%80/"}]},{"title":"Mysql Review 之表联结入门篇","slug":"Mysql-Review-JOIN","date":"2019-11-12T14:30:06.000Z","updated":"2020-01-07T07:31:12.301Z","comments":true,"path":"2019/11/12/Mysql-Review-JOIN/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Mysql-Review-JOIN/","excerpt":"","text":"1. 为什么要使用联结?联结可以利用一条SELECT语句检索出存储在多个关系表上的数据,也就是联结多个表返回一组数据.2. 一个创建联结的简单例子1234SELECT vend_name,prod_name,prod_price //检索出这三列数据FROM vendors,products //从这两个表中WHERE vendors.vend_id = product.vend_id //条件是两个表中的vend_id相等ORDER BY vend_name,prod_name; //通过vend_name,prod_name排序 创建联结语句时,一定要注意的WHERE子句,如果没有WHERE子句,第一个表中的每一行都i将于第二个表中的行配对,从而产生大量不希望检索出的结果,也就是笛卡儿积(没有联结条件的表关系返回的结果) 应该保证所有联结都有WHERE子句,并且保证WHERE子句的正确性","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"},{"name":"Mysql基础","slug":"大熊BIGBEAR/Mysql/Mysql基础","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/Mysql%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"},{"name":"Mysql基础","slug":"Mysql基础","permalink":"http://www.pulsating.cn/tags/Mysql%E5%9F%BA%E7%A1%80/"}]},{"title":"Mysql Review 之函数篇","slug":"Mysql-Review-function","date":"2019-11-12T14:24:39.000Z","updated":"2020-01-07T07:31:12.303Z","comments":true,"path":"2019/11/12/Mysql-Review-function/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Mysql-Review-function/","excerpt":"","text":"数据处理函数 Mqsql 和其他大多数计算机语言一样,支持利用函数处理数据,大多数SQL都支持以下类型的函数. 处理文本串的文本函数 数值数据上进行算术操作的数值函数 处理日期和时间值并从这些值中提取特定成分的日期和时间函数 返回DBMS正使用的特殊信息的系统函数 1. 文本处理函数常用的文本处理函数一览 函数 说明 示例 Left() or Right() 返回字符串左 or 右边的字符 Length() 返回字符串的长度 Locate() 找出字符串的一个子串 Lower() or Upper() 将字符串转换为小 or 大写 LTrim() or RTrim() 去掉字符串左 or 右边的空格 Substring() 截取字符串的子字符串 2. 日期处理函数常用的日期和时间处理函数 函数 说明 示例 AddDate() or AddTime() 增加一个日期 or 时间 CurDate() or CurTime() 返回当前日期 or 时间 Date() 返回日期部分 DateDiff() 计算两个日期之差 Date_Format() 返回一个格式化的日期或时间串 DayOfWeek() 返回一个日期,对应的是星期几 3. 数值处理函数常用的数值处理函数 函数 说明 示例 ABS() 返回绝对值 Mod() 返回除操作的余数 Rand() 返回一个随机数 Sqrt() 返回一个数的平方根","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"},{"name":"Mysql基础","slug":"大熊BIGBEAR/Mysql/Mysql基础","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/Mysql%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"},{"name":"Mysql基础","slug":"Mysql基础","permalink":"http://www.pulsating.cn/tags/Mysql%E5%9F%BA%E7%A1%80/"}]},{"title":"Mysql Review 之常用词汇 术语","slug":"Mysql-Review-terminology","date":"2019-11-12T14:23:09.000Z","updated":"2020-01-07T07:31:12.303Z","comments":true,"path":"2019/11/12/Mysql-Review-terminology/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Mysql-Review-terminology/","excerpt":"","text":"1. database 数据库 2. DBMS 数据库管理系统 3. table 表 (结构化文件,存储某种特定类型的数据) 4. schema 模式(包括数据库及表间关系) 5. column 列(表由列组成,表中的一个字段,代表一列) 6. datatype 数据类型(int varchar等,每个字段都有相应的数据类型,限制存入的数据种类,例如int类型不能存字符值) 7. row 行(一行也就是一条数据库记录,但从技术上说,行才是正确的术语) 8. primary key 主键 9. sql Structured Query Language 结构化查询语言(与数据库通讯的语言) 10. field 字段 基本上与column意思相同 11. concatenate 拼接 将值连结到一起构成单个值 12. join 联结 13. foreign key 外键 14. scale 可伸缩性 能够适应不断增加的工作量而不失败,设计良好的数据库或应用程序称之为可伸缩性好(scale well) 15. view 视图 16. variable 变量","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"},{"name":"Mysql基础","slug":"大熊BIGBEAR/Mysql/Mysql基础","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/Mysql%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"},{"name":"Mysql基础","slug":"Mysql基础","permalink":"http://www.pulsating.cn/tags/Mysql%E5%9F%BA%E7%A1%80/"}]},{"title":"Mysql Review 之常用sql语句","slug":"Mysql-Review-common-sql","date":"2019-11-12T14:13:03.000Z","updated":"2020-01-08T03:25:56.014Z","comments":true,"path":"2019/11/12/Mysql-Review-common-sql/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Mysql-Review-common-sql/","excerpt":"","text":"一. 综合 使用.sql脚本 SOURCE + 脚本路径; 打开数据库 USE database; 显示所有数据库名称 SHOW databases; 显示所有表名称 SHOW tables; 显示表中的列及属性 SHOW column FROM table_name; 二. 检索/查询语句普通查询 检索某一列 SELECT column_name FROM table_name; 检索所有列,使用 * 通配符 SELECT * FROM table_name;DISTINCT 检索结果去重 SELECT DISTINCT column_name FROM TABLE_NAMELIMIT 限制检索结果行数 SELECT column FROM table_name LIMIT 5 ## 结果不超过5行 SELECT column FROM table_name 5,5 ## 返回从行5开始的5行 SELECT column FROM table_name 5 OFFSET 4 ## limit m,n的替代语法,返回5行,从行4开始 ORDER BY 检索结果排序 SELECT * FROM table_name ORDER BY id DESC 降序/倒序 SELECT * FROM table_name ORDER BY id ASC ## 升序/正序 按多个列排序SELECT * FROM table_name order by column1,column2;## 先按column1 排序,如果column1有2个或多个值相同,则再按照column2排序 WHERE子句 SELECT * FROM table_name WHERE price = 2.5;## 检索出价格为2.5的产品 WHERE 子句操作符 操作符 说明 = 等于 &lt;&gt; 不等于 != 不等于 &lt; 小于 &lt;= 小于等于 &gt; 大于 &gt;= 大于等于 BETWEEN m AND n 指定的两个值之间 空值检查 WHERE column IS NULL; ## 特殊的where 子句 逻辑操作符(operator) and WHERE age = 19 AND score &gt; 80 ; or WHERE user_id = 1 or user_id = 2; in WHERE user_id in (1,2,3,4); not 否定后跟条件的关键字 11.使用通配符进行过滤通配符(wildcard) 用来匹配值的一部分的特殊字符.搜索模式(search pattern) 由字面值,通配符,或两者组合构成的搜索条件. 百分号%通配符,可以在搜索模式的任意位置使用任意个通配符,1SELECT * FROM table_name WHERE username LIKE 'rise%'; ##检索以rise开头的用户名 下划线_通配符,用途和%一样,但是只能匹配单个字符而不是多个1SELECT * FROM table_name WHERE price LIKE '_000'; ##检索出价格为1000,2000等的商品 不要过度使用通配符,并且尽量不要在搜索模式的开始出使用,搜索速度巨慢! Mysql使用正则表达式1SELECT * FROM table_name WHERE prod_name REGEXP '正则表达式'; 计算字段 Concat()拼接两个列 123456## 将两个列拼接起来,变成一个新字段vend-title,类似 '值name(location) '的形式,同时去掉两个字段右侧的空格.## RTrim(),LTrim(),Trim()## AS 用as赋予别名 (又叫导出列)SELECT Concat(RTrim(vend_name) , ' (', RTrim(vend_country), ') ') AS vend_title FROM vendorsORDER BY vend_name; 执行算术计算1234567##通过单价和数量两个列运算出商品总价并形成一个新字段 expanded_priceSELECT prod_id, quantity, item_price, quantity * item_price AS expanded_priceFROM orderitemsWHERE order_num = 20005; 测试计算 123SELECT 3 * 2;SELECT Trim('abc');SELECT Now();","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"大熊BIGBEAR/Mysql","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/"},{"name":"Mysql基础","slug":"大熊BIGBEAR/Mysql/Mysql基础","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Mysql/Mysql%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.pulsating.cn/tags/Mysql/"},{"name":"Mysql基础","slug":"Mysql基础","permalink":"http://www.pulsating.cn/tags/Mysql%E5%9F%BA%E7%A1%80/"}]},{"title":"JS 通过User-Agent判断用户使用的设备 或平台","slug":"Determine-the-device-or-platform-used-by-UserAgent","date":"2019-11-12T14:08:21.000Z","updated":"2020-01-08T03:25:56.012Z","comments":true,"path":"2019/11/12/Determine-the-device-or-platform-used-by-UserAgent/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Determine-the-device-or-platform-used-by-UserAgent/","excerpt":"","text":"12345678910111213141516171819202122232425262728&lt;script&gt; var browser = &#123; versions: function() &#123; var u = navigator.userAgent, app = navigator.appVersion; return &#123; trident: u.indexOf('Trident') &gt; -1, //IE内核 presto: u.indexOf('Presto') &gt; -1, //opera内核 webKit: u.indexOf('AppleWebKit') &gt; -1, //苹果、谷歌内核 gecko: u.indexOf('Gecko') &gt; -1 &amp;&amp; u.indexOf('KHTML') == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf('Android') &gt; -1 || u.indexOf('Adr') &gt; -1, //android终端 iPhone: u.indexOf('iPhone') &gt; -1, //是否为iPhone或者QQHD浏览器 iPad: u.indexOf('iPad') &gt; -1, //是否iPad webApp: u.indexOf('Safari') == -1, //是否web应该程序，没有头部与底部 weixin: u.indexOf('MicroMessenger') &gt; -1, //是否微信 （2015-01-22新增） qq: u.match(/\\sQQ/i) == \" qq\", //是否QQ eleme: u.indexOf('Needle') &gt; -1//是否饿了么 &#125;; &#125;(), language: (navigator.browserLanguage || navigator.language).toLowerCase() &#125;; console.log(browser['versions']['eleme']); if (browser['versions']['eleme'])&#123; show(); &#125;&lt;/script&gt;","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"前端","slug":"大熊BIGBEAR/前端","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"大熊BIGBEAR/前端/JavaScript","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"前端","slug":"前端","permalink":"http://www.pulsating.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.pulsating.cn/tags/JavaScript/"}]},{"title":"图片懒加载 滚动加载 点击图片预览实现过程","slug":"image-lazy-load-and-preview","date":"2019-11-12T14:03:12.000Z","updated":"2020-01-08T03:25:56.020Z","comments":true,"path":"2019/11/12/image-lazy-load-and-preview/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/image-lazy-load-and-preview/","excerpt":"作者是个前端菜鸟,只能靠着东拼西凑才能生存下来这样子 上次写了一个实现搜索框自动补全的小功能的文章,今天这个在其基础上,加入了几个新功能,两者卡可以结合使用,也可以分开独自使用,没有影响的,想了解的同学,可以先去了解一下,[传送门],下面开始实现标题的功能 1. 准备阶段 WEUI: WEUI是一套同微信原生视觉体验一致的基础样式库,由微信官方设计团队为微信内网页和小程序量身定制,令用户感知更加统一,点击进行在线体验. Jquery WEUI:JQuery WeUI 是专为微信公众账号开发而设计的一个简洁而强大的UI库，包含全部WeUI官方的CSS组件，并且额外提供了大量的拓展组件，丰富的组件库可以极大减少前端开发时间,JQuery WeUI官网. ECHO JS:ECHO JS 是一个纯javascript轻量级延迟加载插件,用来实现懒加载部分","text":"作者是个前端菜鸟,只能靠着东拼西凑才能生存下来这样子 上次写了一个实现搜索框自动补全的小功能的文章,今天这个在其基础上,加入了几个新功能,两者卡可以结合使用,也可以分开独自使用,没有影响的,想了解的同学,可以先去了解一下,[传送门],下面开始实现标题的功能 1. 准备阶段 WEUI: WEUI是一套同微信原生视觉体验一致的基础样式库,由微信官方设计团队为微信内网页和小程序量身定制,令用户感知更加统一,点击进行在线体验. Jquery WEUI:JQuery WeUI 是专为微信公众账号开发而设计的一个简洁而强大的UI库，包含全部WeUI官方的CSS组件，并且额外提供了大量的拓展组件，丰富的组件库可以极大减少前端开发时间,JQuery WeUI官网. ECHO JS:ECHO JS 是一个纯javascript轻量级延迟加载插件,用来实现懒加载部分 2. 实现思路 监听键盘:监听键盘的搜索动作(也就是Enter键), 接收到后台的数据后,循环append到img容器中,这里使用的是WEUI的九宫格,将三列调成了两列,将图片展示出来 点击预览 监听用户的鼠标点击动作,当用户点击某一张图片时,调用Photo Browser,并使用pb.open();打开预览图 懒加载 将需要懒加载的img标签添加data-echo属性,并且将原src改为一张透明的loading gif图,echojs就会自动实现懒加载了,使用起来非常简单 滚动加载 滚动加载使用的是JQuery WEUI的infinite,当滑动到最下面时,触发加载动作,向后台发起ajax请求,同时记录当前页数 3. 不多B,上代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;title&gt;图片搜索&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"/static/jquery-weui-build/dist/lib/weui.min.css\"&gt; &lt;link rel=\"stylesheet\" href=\"/static/jquery-weui-build/dist/css/jquery-weui.css\"&gt; &lt;link rel=\"stylesheet\" href=\"/static/jquery-weui-build/demos/css/demos.css\"&gt; &lt;link rel=\"stylesheet\" href=\"/static/jquery-ui/jquery-ui.css\"&gt; &lt;script src=\"/static/js/jquery-3.3.1.min.js\"&gt;&lt;/script&gt; &lt;script src=\"/static/jquery-weui-build/dist/js/jquery-weui.js\"&gt;&lt;/script&gt; &lt;script type='text/javascript' src='/static/jquery-weui-build/dist/js/swiper.js' charset='utf-8'&gt;&lt;/script&gt; &lt;script src=\"/static/jquery-ui/jquery-ui.js\"&gt;&lt;/script&gt; &lt;script src=\"/static/waterfall/js/echo.min.js\"&gt;&lt;/script&gt; &lt;script&gt; echo.init(&#123;//初始化echo.js offset: 0, throttle: 0 &#125;); &lt;/script&gt; &lt;style&gt; body &#123; background: #efeff4; &#125; img &#123; width: 100%; height: 100%; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=\"body\"&gt; &lt;div class=\"ui-widget\"&gt; &lt;div class=\"weui-search-bar\" id=\"searchBar\"&gt; &lt;form class=\"weui-search-bar__form\" action=\"#\"&gt; &lt;div class=\"weui-search-bar__box\"&gt; &lt;i class=\"weui-icon-search\"&gt;&lt;/i&gt; &lt;input type=\"search\" class=\"weui-search-bar__input\" id=\"tags\" placeholder=\"搜索\" required=\"\"&gt; &lt;a href=\"javascript:\" class=\"weui-icon-clear\" id=\"searchClear\"&gt;&lt;/a&gt; &lt;/div&gt; &lt;label class=\"weui-search-bar__label\" id=\"searchText\" style=\"transform-origin: 0px 0px 0px; opacity: 1; transform: scale(1, 1);\"&gt; &lt;i class=\"weui-icon-search\"&gt;&lt;/i&gt; &lt;span&gt;搜索&lt;/span&gt; &lt;/label&gt; &lt;/form&gt; &lt;a href=\"javascript:\" class=\"weui-search-bar__cancel-btn\" id=\"searchCancel\"&gt;取消&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"weui-grids\" id=\"item\"&gt;&lt;/div&gt; &lt;div class=\"weui-loadmore\"&gt; &lt;i class=\"weui-loading\"&gt;&lt;/i&gt; &lt;span class=\"weui-loadmore__tips\"&gt;正在加载&lt;/span&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; var availableTags = [];//数据源 var keyword = '';//搜索关键字 var page = 1;//当前页数 //先初始化自动补全功能 $(\"#tags\").autocomplete(&#123; source: availableTags //数据源 &#125;); if (!$('#item').html())&#123; $('.weui-loadmore').html('&lt;div class=\"weui-loadmore weui-loadmore_line\"&gt; &lt;span class=\"weui-loadmore__tips\"&gt;暂无数据&lt;/span&gt; &lt;/div&gt;');//样式需要调整 &#125; //去掉字符串中任意位置的空格 function Trim(str, is_global) &#123; var result; result = str.replace(/(^\\s+)|(\\s+$)/g, \"\"); if (is_global.toLowerCase() == \"g\") &#123; result = result.replace(/\\s/g, \"\"); &#125; return result; &#125; //判断字符串是否全是中文 function isChn(str) &#123; var reg = /^[\\u4E00-\\u9FA5]+$/; if (!reg.test(str)) &#123; return false; &#125; else &#123; return true; &#125; &#125; //请求后端获取数据源 function get_source(word = null) &#123; var url = \"&lt;?php echo base_url('Picture/source');?&gt;?keyword=\" + word; $.get(&#123; type: 'GET', url: url, async: false,//改为同步 dataType: 'json', success: function (response) &#123; availableTags = response; &#125; &#125;); &#125; //搜索和自动补全结合 $('#tags').keyup(function () &#123; keyword = $('#tags').val(); if (event.which == '13') &#123; $('#item').empty();//初始化图片列表 page = 1;//初始化当前页 call(); return; &#125; if (isChn(Trim(keyword, 'g'))) &#123; get_source(keyword); $(\"#tags\").autocomplete(&#123; source: availableTags //数据源 &#125;); &#125; &#125;); //向后台请求数据 function call() &#123; var pay_url = \"&lt;?php echo base_url('Picture/search');?&gt;\"; $.ajax(&#123; type: 'GET', url: pay_url + '?keyword=' + keyword + '&amp;page=' + page, //搜索 dataType: 'json', success: function (data) &#123; if (data['errno'] == 40001)&#123; no_data_style(); return; &#125; $('.weui-loadmore').html('&lt;i class=\"weui-loading\"&gt;&lt;/i&gt; &lt;span class=\"weui-loadmore__tips\"&gt;正在加载&lt;/span&gt;'); $.each(data, function (index, item) &#123; $('#item').append('&lt;a href=\"javascript:void(0)\" class=\"weui-grid\" style=\"width: 50%;\" onclick=big_img(\"'+item.img+'\",\"'+Trim(item.name, 'g')+'\")&gt; &lt;img src=\"/static/img/index_32.png\" data-echo=\"'+item.img+'\" alt=\"'+item.name+'\"&gt; &lt;p style=\"text-align: center;font-size: 12px;color: black;margin-top: 10px\"&gt;'+item.name+'&lt;/p&gt;&lt;/a&gt;'); if (data.length &lt;= 8 &amp;&amp; page == 1)&#123; no_data_style(); &#125; &#125;); echo.init(&#123;//获得数据后初始化echojs offset: 0, throttle: 0 &#125;); &#125; &#125;) &#125; function no_data_style() &#123; $('.weui-loadmore').empty(); $('.weui-loadmore').append('&lt;div class=\"weui-loadmore weui-loadmore_line\"&gt; &lt;span class=\"weui-loadmore__tips\"&gt;暂无更多&lt;/span&gt; &lt;/div&gt;');//样式需要调整 &#125;&lt;/script&gt;&lt;!--点击预览全图--&gt;&lt;script&gt; function big_img(img,name) &#123; var imgs = [&#123;'image':img,'caption':name&#125;]; var pb = $.photoBrowser(&#123; items: imgs, &#125;); pb.open(); &#125;&lt;/script&gt;&lt;!--滚动加载--&gt;&lt;script&gt; //滚动加载 var loading = false; $(document.body).infinite().on(\"infinite\", function () &#123; if (loading) return; loading = true; setTimeout(function () &#123; page++; call(); loading = false; echo.init(&#123; offset: 0, throttle: 0 &#125;); &#125;, 1000); &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"前端","slug":"大熊BIGBEAR/前端","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"大熊BIGBEAR/前端/JavaScript","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"前端","slug":"前端","permalink":"http://www.pulsating.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.pulsating.cn/tags/JavaScript/"},{"name":"WeUI","slug":"WeUI","permalink":"http://www.pulsating.cn/tags/WeUI/"},{"name":"Jquery WEUI","slug":"Jquery-WEUI","permalink":"http://www.pulsating.cn/tags/Jquery-WEUI/"},{"name":"ECHO JS","slug":"ECHO-JS","permalink":"http://www.pulsating.cn/tags/ECHO-JS/"},{"name":"懒加载","slug":"懒加载","permalink":"http://www.pulsating.cn/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"}]},{"title":"搜索框自动补全(模糊匹配)功能实现","slug":"searchinput-auto-complated","date":"2019-11-12T13:57:06.000Z","updated":"2020-01-08T03:25:56.022Z","comments":true,"path":"2019/11/12/searchinput-auto-complated/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/searchinput-auto-complated/","excerpt":"&emsp;&emsp;本地实现了一个搜索框自动补全的小功能,在JQuery UI的autocomplete插件的基础上,加入了自己的业务代码,贴出来回顾一下,同时可以给大家一个参考","text":"&emsp;&emsp;本地实现了一个搜索框自动补全的小功能,在JQuery UI的autocomplete插件的基础上,加入了自己的业务代码,贴出来回顾一下,同时可以给大家一个参考 &emsp;&emsp;首先贴出的是JQuery Ui 的自动补全插件部分的代码,后面的功能都是在其基础上追加的,直接拷贝到你的本地就可以直观的看到运行效果,也可以到官网上面体验和查看,为了方便,我这里是直接引入的JS链接点击下载JQuery UI的源码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;title&gt;jQuery UI Autocomplete - Default functionality&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\"&gt; &lt;link rel=\"stylesheet\" href=\"/resources/demos/style.css\"&gt; &lt;script src=\"https://code.jquery.com/jquery-1.12.4.js\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/ui/1.12.1/jquery-ui.js\"&gt;&lt;/script&gt; &lt;script&gt; $( function() &#123; var availableTags = [//这里要改成根据用户的输入,自动更换词库的形式 \"ActionScript\", \"AppleScript\", \"Asp\", \"BASIC\", \"C\", \"C++\", \"Clojure\", \"COBOL\", \"ColdFusion\", \"Erlang\", \"Fortran\", \"Groovy\", \"Haskell\", \"Java\", \"JavaScript\", \"Lisp\", \"Perl\", \"PHP\", \"Python\", \"Ruby\", \"Scala\", \"Scheme\" ]; $( \"#tags\" ).autocomplete(&#123;//调用补全功能 source: availableTags &#125;); &#125; ); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"ui-widget\"&gt; &lt;label for=\"tags\"&gt;Tags: &lt;/label&gt; &lt;input id=\"tags\"&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 运行截图 下面说下我追加的部分功能及实现思路,有可以改进的地方还请指教: 首先,数据源要根据用户输入的内容实时更新.输入框的值随着用户的输入会一直变动.所以,输入框下方的推荐补全的内容要输入的值进行变动,这里使用onkeyup属性来监听键盘动作,并传递此时input的value值到js函数中. 1234567//html&lt;input type=\"search\" class=\"\" id=\"tags\" placeholder=\"搜索\" required=\"\" onkeyup=\"catch_keyword(this.value)\"&gt;//js代码function catch_keyword(word) &#123;//这里接受并log出value console.log(word);&#125; 第2步,考虑到数据库中需要模糊检索的字段都是中文的菜品名称.所以,当用户输入字母的时候,进行了一下过滤,当输入的内容中存在字母时,不提交给后台处理 12345678910//字符串判断函数//判断一个字符串是否混有字母,全中文返回truefunction isChn(str) &#123; var reg = /^[\\u4E00-\\u9FA5]+$/; if (!reg.test(str)) &#123; return false; &#125; else &#123; return true; &#125;&#125; 发现当字符串中含有空格的时候,上面的字符串判断函数,返回的内容不符合预期,然后加入了一个去除字符串中所有空格的功能 123456789//去掉字符串中任意位置的空格,返回去除空格后的字符串function Trim(str, is_global) &#123; var result; result = str.replace(/(^\\s+)|(\\s+$)/g, \"\"); if (is_global.toLowerCase() == \"g\") &#123; result = result.replace(/\\s/g, \"\"); &#125; return result;&#125; 处理结束用户的输入后,就是提交到后台,然后返回数据源了,也就是availableTags;这里我把availableTags声明为全局变量.并且用同步的Ajax方式取回数据,然后赋值给availableTags,然后在监听键盘的函数中,使用返回的数据调用自动补全功能. 1234567891011121314//请求后端获取数据源function get_source(word = null) &#123; var url = \"&lt;?php echo base_url('admin/Demo/source');?&gt;?keyword=\" + word; $.get(&#123; type: 'GET', url: url, async: false,//改为同步 dataType: 'json', success: function (response) &#123; console.log('1'); availableTags = response; &#125; &#125;);&#125; &emsp;这里更新下最开始的接收监听键盘后的value值的函数 123456789//捕捉键入的关键字function catch_keyword(word = null) &#123; if (isChn(Trim(word, 'g'))) &#123;//去掉空格后检查字符串,如果符合,继续请求后台 get_source(word); $(\"#tags\").autocomplete(&#123; source: availableTags //数据源 &#125;); &#125;&#125; 到这里,这个功能已经基本结束了,在测试过程中发现了一个小问题,每次第一次获取用户输入的时候,自动补全功能没有触发,在用户继续输入后,才触发成功,经过调试,我在页面加载完成后,初始化一下自动补全插件,解决了这个问题 附: 完整代码不知道如何在markdown中添加下载链接,只好把完整代码放上来啦! 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"/jquery-weui-build/dist/lib/weui.min.css\"&gt; &lt;link rel=\"stylesheet\" href=\"/jquery-weui-build/dist/css/jquery-weui.css\"&gt; &lt;link rel=\"stylesheet\" href=\"/jquery-weui-build/demos/css/demos.css\"&gt; &lt;link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\"&gt; &lt;script src=\"https://code.jquery.com/jquery-1.12.4.js\"&gt;&lt;/script&gt; &lt;script src=\"/static/jquery-weui-build/dist/lib/fastclick.js\"&gt;&lt;/script&gt; &lt;script src=\"https://code.jquery.com/ui/1.12.1/jquery-ui.js\"&gt;&lt;/script&gt; &lt;script&gt; $(function () &#123; FastClick.attach(document.body); &#125;); &lt;/script&gt; &lt;script src=\"/jquery-weui-build/dist/js/jquery-weui.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"ui-widget\"&gt; &lt;div class=\"weui-search-bar\" id=\"searchBar\"&gt; &lt;form class=\"weui-search-bar__form\" action=\"#\"&gt; &lt;div class=\"weui-search-bar__box\"&gt; &lt;i class=\"weui-icon-search\"&gt;&lt;/i&gt; &lt;input type=\"search\" class=\"weui-search-bar__input\" id=\"tags\" placeholder=\"搜索\" required=\"\" onkeyup=\"catch_keyword(this.value)\"&gt; &lt;a href=\"javascript:\" class=\"weui-icon-clear\" id=\"searchClear\"&gt;&lt;/a&gt; &lt;/div&gt; &lt;label class=\"weui-search-bar__label\" id=\"searchText\" style=\"transform-origin: 0px 0px 0px; opacity: 1; transform: scale(1, 1);\"&gt; &lt;i class=\"weui-icon-search\"&gt;&lt;/i&gt; &lt;span&gt;搜索&lt;/span&gt; &lt;/label&gt; &lt;/form&gt; &lt;a href=\"javascript:\" class=\"weui-search-bar__cancel-btn\" id=\"searchCancel\"&gt;取消&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; var availableTags = [];//数据源 //先初始化自动补全功能 $(\"#tags\").autocomplete(&#123; source: availableTags //数据源 &#125;); //去掉字符串中任意位置的空格 function Trim(str, is_global) &#123; var result; result = str.replace(/(^\\s+)|(\\s+$)/g, \"\"); if (is_global.toLowerCase() == \"g\") &#123; result = result.replace(/\\s/g, \"\"); &#125; return result; &#125; //判断字符串是否全是中文 function isChn(str) &#123; var reg = /^[\\u4E00-\\u9FA5]+$/; if (!reg.test(str)) &#123; return false; &#125; else &#123; return true; &#125; &#125; //捕捉键入的关键字 function catch_keyword(word = null) &#123; if (isChn(Trim(word, 'g'))) &#123; get_source(word); $(\"#tags\").autocomplete(&#123; source: availableTags //数据源 &#125;); &#125; &#125; //请求后端获取数据源 function get_source(word = null) &#123; var url = \"&lt;?php echo base_url('admin/Demo/source');?&gt;?keyword=\" + word; $.get(&#123; type: 'GET', url: url, async: false,//改为同步 dataType: 'json', success: function (response) &#123; console.log('1'); availableTags = response; &#125; &#125;); &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"前端","slug":"大熊BIGBEAR/前端","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"大熊BIGBEAR/前端/JavaScript","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/"},{"name":"JQuery UI","slug":"大熊BIGBEAR/前端/JavaScript/JQuery-UI","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/JQuery-UI/"},{"name":"autocomplete","slug":"大熊BIGBEAR/前端/JavaScript/JQuery-UI/autocomplete","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E5%89%8D%E7%AB%AF/JavaScript/JQuery-UI/autocomplete/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"前端","slug":"前端","permalink":"http://www.pulsating.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.pulsating.cn/tags/JavaScript/"},{"name":"JQuery","slug":"JQuery","permalink":"http://www.pulsating.cn/tags/JQuery/"}]},{"title":"查看Andriod手机实时刷新率","slug":"Check-android-mobile-refresh-rate-in-real-time","date":"2019-11-12T13:53:56.000Z","updated":"2020-01-08T03:25:56.010Z","comments":true,"path":"2019/11/12/Check-android-mobile-refresh-rate-in-real-time/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/Check-android-mobile-refresh-rate-in-real-time/","excerpt":"1. 下载ADB2. adb shell &quot;dumpsys window|grep mCurrentFocus 获取app包名3. 操作需测试的app4. adb shell dumpsys gfxinfo ‘app的包名’ &gt;FPS.txt 输出日志5. 打开查看Profile data in ms下的内容:FPS = 1000/Draw + Prepare + Process + Execute","text":"1. 下载ADB2. adb shell &quot;dumpsys window|grep mCurrentFocus 获取app包名3. 操作需测试的app4. adb shell dumpsys gfxinfo ‘app的包名’ &gt;FPS.txt 输出日志5. 打开查看Profile data in ms下的内容:FPS = 1000/Draw + Prepare + Process + Execute","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"杂","slug":"大熊BIGBEAR/杂","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/%E6%9D%82/"}],"tags":[{"name":"adb","slug":"adb","permalink":"http://www.pulsating.cn/tags/adb/"},{"name":"Andriod","slug":"Andriod","permalink":"http://www.pulsating.cn/tags/Andriod/"},{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"}]},{"title":"使用Hexo搭建个人博客","slug":"create-personal-blog-use-hexo","date":"2019-11-12T02:59:00.000Z","updated":"2020-01-08T03:25:56.019Z","comments":true,"path":"2019/11/12/create-personal-blog-use-hexo/","link":"","permalink":"http://www.pulsating.cn/2019/11/12/create-personal-blog-use-hexo/","excerpt":"","text":"","categories":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"Blog","slug":"大熊BIGBEAR/Blog","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Blog/"},{"name":"Hexo","slug":"大熊BIGBEAR/Blog/Hexo","permalink":"http://www.pulsating.cn/categories/%E5%A4%A7%E7%86%8ABIGBEAR/Blog/Hexo/"}],"tags":[{"name":"大熊BIGBEAR","slug":"大熊BIGBEAR","permalink":"http://www.pulsating.cn/tags/%E5%A4%A7%E7%86%8ABIGBEAR/"},{"name":"article","slug":"article","permalink":"http://www.pulsating.cn/tags/article/"},{"name":"建站","slug":"建站","permalink":"http://www.pulsating.cn/tags/%E5%BB%BA%E7%AB%99/"},{"name":"SPA","slug":"SPA","permalink":"http://www.pulsating.cn/tags/SPA/"},{"name":"教程","slug":"教程","permalink":"http://www.pulsating.cn/tags/%E6%95%99%E7%A8%8B/"}]}]}